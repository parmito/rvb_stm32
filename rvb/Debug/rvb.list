
rvb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080060a0  080060a0  000070a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a8  080060a8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a8  080060a8  000070a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080060b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  20000064  08006114  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a50  08006114  00008a50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e2e  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f52  00000000  00000000  0001febb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101b  00000000  00000000  00025300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab33  00000000  00000000  0002631b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198c0  00000000  00000000  00040e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094811  00000000  00000000  0005a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eef1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005898  00000000  00000000  000eef64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f47fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed0 	.word	0x08005ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005ed0 	.word	0x08005ed0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <TaskAppCAN_Entry>:
//              TaskAppCAN_Entry
//
//
//////////////////////////////////////////////
void TaskAppCAN_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 8000168:	6039      	str	r1, [r7, #0]
    xQueueAppCAN = xQueue;
 800016a:	4a0f      	ldr	r2, [pc, #60]	@ (80001a8 <TaskAppCAN_Entry+0x48>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	6013      	str	r3, [r2, #0]
    xTimerAppCAN = xTimer;
 8000170:	4a0e      	ldr	r2, [pc, #56]	@ (80001ac <TaskAppCAN_Entry+0x4c>)
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	6013      	str	r3, [r2, #0]

    hCAN = hGet_CAN_Handler();
 8000176:	f000 fc27 	bl	80009c8 <hGet_CAN_Handler>
 800017a:	4603      	mov	r3, r0
 800017c:	4a0c      	ldr	r2, [pc, #48]	@ (80001b0 <TaskAppCAN_Entry+0x50>)
 800017e:	6013      	str	r3, [r2, #0]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000180:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <TaskAppCAN_Entry+0x54>)
 8000182:	2201      	movs	r2, #1
 8000184:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 8000186:	4b0b      	ldr	r3, [pc, #44]	@ (80001b4 <TaskAppCAN_Entry+0x54>)
 8000188:	2201      	movs	r2, #1
 800018a:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 800018c:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <TaskAppCAN_Entry+0x54>)
 800018e:	2200      	movs	r2, #0
 8000190:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000192:	4b05      	ldr	r3, [pc, #20]	@ (80001a8 <TaskAppCAN_Entry+0x48>)
 8000194:	6818      	ldr	r0, [r3, #0]
 8000196:	2300      	movs	r3, #0
 8000198:	2200      	movs	r2, #0
 800019a:	4906      	ldr	r1, [pc, #24]	@ (80001b4 <TaskAppCAN_Entry+0x54>)
 800019c:	f003 fe9a 	bl	8003ed4 <xQueueGenericSend>
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	20000090 	.word	0x20000090
 80001b0:	20000098 	.word	0x20000098
 80001b4:	20000080 	.word	0x20000080

080001b8 <TaskAppCAN_Start>:
//              TaskAppCAN_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_Start(sMessageType *psMessage)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80001c0:	2301      	movs	r3, #1
 80001c2:	73fb      	strb	r3, [r7, #15]

    (void)stHAL_CAN_FilterConfig();
 80001c4:	f000 fc0a 	bl	80009dc <stHAL_CAN_FilterConfig>
    (void)HAL_CAN_Start(hCAN);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	@ (80001f4 <TaskAppCAN_Start+0x3c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 f9e9 	bl	80015a4 <HAL_CAN_Start>
    pstQueueAppSerial  = TaskAppSerial_getQueue();
 80001d2:	f000 f993 	bl	80004fc <TaskAppSerial_getQueue>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <TaskAppCAN_Start+0x40>)
 80001dc:	601a      	str	r2, [r3, #0]
    pu8SerialTxBuffer  = TaskAppSerial_getTxBuffer();
 80001de:	f000 f997 	bl	8000510 <TaskAppSerial_getTxBuffer>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <TaskAppCAN_Start+0x44>)
 80001e8:	601a      	str	r2, [r3, #0]
	return boError;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3710      	adds	r7, #16
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000098 	.word	0x20000098
 80001f8:	20000094 	.word	0x20000094
 80001fc:	200001d8 	.word	0x200001d8

08000200 <TaskAppCAN_ReceiveEvent>:
//              TaskAppCAN_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_ReceiveEvent(sMessageType *psMessage)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000208:	2301      	movs	r3, #1
 800020a:	73fb      	strb	r3, [r7, #15]

    tstFrameCAN *pstFrameCAN = (tstFrameCAN*)(psMessage->pcMessageData);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	60bb      	str	r3, [r7, #8]

	return boError;
 8000212:	7bfb      	ldrb	r3, [r7, #15]
}
 8000214:	4618      	mov	r0, r3
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
	...

08000220 <TaskAppCAN_TransmitEvent>:
//              TaskAppCAN_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_TransmitEvent(sMessageType *psMessage)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000228:	2301      	movs	r3, #1
 800022a:	73fb      	strb	r3, [r7, #15]
    uint32_t u32;

    pTxHeader.StdId = 0x3C0;
 800022c:	4b38      	ldr	r3, [pc, #224]	@ (8000310 <TaskAppCAN_TransmitEvent+0xf0>)
 800022e:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000232:	601a      	str	r2, [r3, #0]
    pTxHeader.IDE = CAN_ID_STD;
 8000234:	4b36      	ldr	r3, [pc, #216]	@ (8000310 <TaskAppCAN_TransmitEvent+0xf0>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
    pTxHeader.RTR = CAN_RTR_DATA;
 800023a:	4b35      	ldr	r3, [pc, #212]	@ (8000310 <TaskAppCAN_TransmitEvent+0xf0>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
    pTxHeader.DLC = 4;
 8000240:	4b33      	ldr	r3, [pc, #204]	@ (8000310 <TaskAppCAN_TransmitEvent+0xf0>)
 8000242:	2204      	movs	r2, #4
 8000244:	611a      	str	r2, [r3, #16]

    memset(stFrameTxCAN[u8FifoTxCAN].u8Data,0,sizeof(stFrameTxCAN[0].u8Data));
 8000246:	4b33      	ldr	r3, [pc, #204]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	3308      	adds	r3, #8
 800024e:	4a32      	ldr	r2, [pc, #200]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 8000250:	4413      	add	r3, r2
 8000252:	2208      	movs	r2, #8
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fd54 	bl	8005d04 <memset>

    stFrameTxCAN[u8FifoTxCAN].u8Data[0] = 0xC1;
 800025c:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4a2d      	ldr	r2, [pc, #180]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	4413      	add	r3, r2
 8000266:	3308      	adds	r3, #8
 8000268:	22c1      	movs	r2, #193	@ 0xc1
 800026a:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[1] = 0x01;
 800026c:	4b29      	ldr	r3, [pc, #164]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4a29      	ldr	r2, [pc, #164]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 8000272:	011b      	lsls	r3, r3, #4
 8000274:	4413      	add	r3, r2
 8000276:	3309      	adds	r3, #9
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[2] = 0x03;
 800027c:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4a25      	ldr	r2, [pc, #148]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	4413      	add	r3, r2
 8000286:	330a      	adds	r3, #10
 8000288:	2203      	movs	r2, #3
 800028a:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[3] = 0x00;
 800028c:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	4a21      	ldr	r2, [pc, #132]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 8000292:	011b      	lsls	r3, r3, #4
 8000294:	4413      	add	r3, r2
 8000296:	330b      	adds	r3, #11
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]

	u32 = HAL_CAN_GetTxMailboxesFreeLevel(hCAN);
 800029c:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <TaskAppCAN_TransmitEvent+0xfc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fa92 	bl	80017ca <HAL_CAN_GetTxMailboxesFreeLevel>
 80002a6:	60b8      	str	r0, [r7, #8]
    if(u32 > 0)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d00b      	beq.n	80002c6 <TaskAppCAN_TransmitEvent+0xa6>
    {
        (void)HAL_CAN_AddTxMessage(hCAN, &pTxHeader,stFrameTxCAN[u8FifoTxCAN].u8Data, &u32TxMailbox);
 80002ae:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <TaskAppCAN_TransmitEvent+0xfc>)
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <TaskAppCAN_TransmitEvent+0xf4>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	3308      	adds	r3, #8
 80002ba:	4a17      	ldr	r2, [pc, #92]	@ (8000318 <TaskAppCAN_TransmitEvent+0xf8>)
 80002bc:	441a      	add	r2, r3
 80002be:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <TaskAppCAN_TransmitEvent+0x100>)
 80002c0:	4913      	ldr	r1, [pc, #76]	@ (8000310 <TaskAppCAN_TransmitEvent+0xf0>)
 80002c2:	f001 f9b3 	bl	800162c <HAL_CAN_AddTxMessage>
    }

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <TaskAppCAN_TransmitEvent+0x104>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPSERIAL;
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <TaskAppCAN_TransmitEvent+0x104>)
 80002ce:	2202      	movs	r2, #2
 80002d0:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <TaskAppCAN_TransmitEvent+0x104>)
 80002d4:	2202      	movs	r2, #2
 80002d6:	709a      	strb	r2, [r3, #2]

    strcpy(pu8SerialTxBuffer,"SURDAO\r\n");
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <TaskAppCAN_TransmitEvent+0x108>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4913      	ldr	r1, [pc, #76]	@ (800032c <TaskAppCAN_TransmitEvent+0x10c>)
 80002de:	461a      	mov	r2, r3
 80002e0:	460b      	mov	r3, r1
 80002e2:	cb03      	ldmia	r3!, {r0, r1}
 80002e4:	6010      	str	r0, [r2, #0]
 80002e6:	6051      	str	r1, [r2, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	7213      	strb	r3, [r2, #8]
    stAppCANMsg.pcMessageData = (char*)pu8SerialTxBuffer;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <TaskAppCAN_TransmitEvent+0x108>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000324 <TaskAppCAN_TransmitEvent+0x104>)
 80002f2:	6053      	str	r3, [r2, #4]

    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);
 80002f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <TaskAppCAN_TransmitEvent+0x110>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6818      	ldr	r0, [r3, #0]
 80002fa:	2300      	movs	r3, #0
 80002fc:	2200      	movs	r2, #0
 80002fe:	4909      	ldr	r1, [pc, #36]	@ (8000324 <TaskAppCAN_TransmitEvent+0x104>)
 8000300:	f003 fde8 	bl	8003ed4 <xQueueGenericSend>

	return boError;
 8000304:	7bfb      	ldrb	r3, [r7, #15]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000b8 	.word	0x200000b8
 8000314:	200000d1 	.word	0x200000d1
 8000318:	20000154 	.word	0x20000154
 800031c:	20000098 	.word	0x20000098
 8000320:	20000000 	.word	0x20000000
 8000324:	20000080 	.word	0x20000080
 8000328:	200001d8 	.word	0x200001d8
 800032c:	08005ee8 	.word	0x08005ee8
 8000330:	20000094 	.word	0x20000094

08000334 <TaskAppCAN_IgnoreEvent>:
//              TaskAppCAN_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_IgnoreEvent(sMessageType *psMessage)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <vTaskAppCAN>:
};

static uint8_t u8TogglePin = 0;

void vTaskAppCAN(void const * argument)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	if( xQueueReceive(xQueueAppCAN, &stAppCANMsg, 0 ) )
 8000354:	4b5d      	ldr	r3, [pc, #372]	@ (80004cc <vTaskAppCAN+0x180>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	495d      	ldr	r1, [pc, #372]	@ (80004d0 <vTaskAppCAN+0x184>)
 800035c:	4618      	mov	r0, r3
 800035e:	f003 ff59 	bl	8004214 <xQueueReceive>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00a      	beq.n	800037e <vTaskAppCAN+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_APPCAN,gpasTaskAppCAN_StateMachine[ucCurrentStateAppCAN], &ucCurrentStateAppCAN, &stAppCANMsg);
 8000368:	4b5a      	ldr	r3, [pc, #360]	@ (80004d4 <vTaskAppCAN+0x188>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	4b5a      	ldr	r3, [pc, #360]	@ (80004d8 <vTaskAppCAN+0x18c>)
 8000370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000374:	4b56      	ldr	r3, [pc, #344]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000376:	4a57      	ldr	r2, [pc, #348]	@ (80004d4 <vTaskAppCAN+0x188>)
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fd77 	bl	8000e6c <eEventHandler>
	}

	if( HAL_CAN_GetRxFifoFillLevel(hCAN, CAN_RX_FIFO0) > 0)
 800037e:	4b57      	ldr	r3, [pc, #348]	@ (80004dc <vTaskAppCAN+0x190>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f001 fb75 	bl	8001a74 <HAL_CAN_GetRxFifoFillLevel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d050      	beq.n	8000432 <vTaskAppCAN+0xe6>
	{
		memset(stFrameRxCAN[u8FifoRxCAN].u8Data,0,sizeof(stFrameRxCAN[0].u8Data));
 8000390:	4b53      	ldr	r3, [pc, #332]	@ (80004e0 <vTaskAppCAN+0x194>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	011b      	lsls	r3, r3, #4
 8000396:	3308      	adds	r3, #8
 8000398:	4a52      	ldr	r2, [pc, #328]	@ (80004e4 <vTaskAppCAN+0x198>)
 800039a:	4413      	add	r3, r2
 800039c:	2208      	movs	r2, #8
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f005 fcaf 	bl	8005d04 <memset>
		if(HAL_CAN_GetRxMessage(hCAN, CAN_RX_FIFO0,&pRxHeader,stFrameRxCAN[u8FifoRxCAN].u8Data) == HAL_OK)
 80003a6:	4b4d      	ldr	r3, [pc, #308]	@ (80004dc <vTaskAppCAN+0x190>)
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	4b4d      	ldr	r3, [pc, #308]	@ (80004e0 <vTaskAppCAN+0x194>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	011b      	lsls	r3, r3, #4
 80003b0:	3308      	adds	r3, #8
 80003b2:	4a4c      	ldr	r2, [pc, #304]	@ (80004e4 <vTaskAppCAN+0x198>)
 80003b4:	4413      	add	r3, r2
 80003b6:	4a4c      	ldr	r2, [pc, #304]	@ (80004e8 <vTaskAppCAN+0x19c>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	f001 fa3a 	bl	8001832 <HAL_CAN_GetRxMessage>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d136      	bne.n	8000432 <vTaskAppCAN+0xe6>
		{
			stAppCANMsg.ucSrc = SRC_APPCAN;
 80003c4:	4b42      	ldr	r3, [pc, #264]	@ (80004d0 <vTaskAppCAN+0x184>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 80003ca:	4b41      	ldr	r3, [pc, #260]	@ (80004d0 <vTaskAppCAN+0x184>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_RX;
 80003d0:	4b3f      	ldr	r3, [pc, #252]	@ (80004d0 <vTaskAppCAN+0x184>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	709a      	strb	r2, [r3, #2]
			stFrameRxCAN[u8FifoRxCAN].u32ID = pRxHeader.StdId;
 80003d6:	4b42      	ldr	r3, [pc, #264]	@ (80004e0 <vTaskAppCAN+0x194>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <vTaskAppCAN+0x19c>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4940      	ldr	r1, [pc, #256]	@ (80004e4 <vTaskAppCAN+0x198>)
 80003e2:	0103      	lsls	r3, r0, #4
 80003e4:	440b      	add	r3, r1
 80003e6:	601a      	str	r2, [r3, #0]
			stFrameRxCAN[u8FifoRxCAN].u32DLC = pRxHeader.DLC;
 80003e8:	4b3d      	ldr	r3, [pc, #244]	@ (80004e0 <vTaskAppCAN+0x194>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	4b3e      	ldr	r3, [pc, #248]	@ (80004e8 <vTaskAppCAN+0x19c>)
 80003f0:	691a      	ldr	r2, [r3, #16]
 80003f2:	493c      	ldr	r1, [pc, #240]	@ (80004e4 <vTaskAppCAN+0x198>)
 80003f4:	0103      	lsls	r3, r0, #4
 80003f6:	440b      	add	r3, r1
 80003f8:	3304      	adds	r3, #4
 80003fa:	601a      	str	r2, [r3, #0]
			stAppCANMsg.pcMessageData = (char*)&stFrameRxCAN[u8FifoRxCAN];
 80003fc:	4b38      	ldr	r3, [pc, #224]	@ (80004e0 <vTaskAppCAN+0x194>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	011b      	lsls	r3, r3, #4
 8000402:	4a38      	ldr	r2, [pc, #224]	@ (80004e4 <vTaskAppCAN+0x198>)
 8000404:	4413      	add	r3, r2
 8000406:	4a32      	ldr	r2, [pc, #200]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000408:	6053      	str	r3, [r2, #4]
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 800040a:	4b30      	ldr	r3, [pc, #192]	@ (80004cc <vTaskAppCAN+0x180>)
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	2200      	movs	r2, #0
 8000412:	492f      	ldr	r1, [pc, #188]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000414:	f003 fd5e 	bl	8003ed4 <xQueueGenericSend>
			if(++u8FifoRxCAN >= FIFO_SIZE)
 8000418:	4b31      	ldr	r3, [pc, #196]	@ (80004e0 <vTaskAppCAN+0x194>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <vTaskAppCAN+0x194>)
 8000422:	701a      	strb	r2, [r3, #0]
 8000424:	4b2e      	ldr	r3, [pc, #184]	@ (80004e0 <vTaskAppCAN+0x194>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b07      	cmp	r3, #7
 800042a:	d902      	bls.n	8000432 <vTaskAppCAN+0xe6>
			{
				u8FifoRxCAN = 0;
 800042c:	4b2c      	ldr	r3, [pc, #176]	@ (80004e0 <vTaskAppCAN+0x194>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(++u16TimeSlice >= 1000)
 8000432:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <vTaskAppCAN+0x1a0>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	3301      	adds	r3, #1
 8000438:	b29a      	uxth	r2, r3
 800043a:	4b2c      	ldr	r3, [pc, #176]	@ (80004ec <vTaskAppCAN+0x1a0>)
 800043c:	801a      	strh	r2, [r3, #0]
 800043e:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <vTaskAppCAN+0x1a0>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000446:	d33d      	bcc.n	80004c4 <vTaskAppCAN+0x178>
	{
		if(u8TogglePin)
 8000448:	4b29      	ldr	r3, [pc, #164]	@ (80004f0 <vTaskAppCAN+0x1a4>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d006      	beq.n	800045e <vTaskAppCAN+0x112>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000456:	4827      	ldr	r0, [pc, #156]	@ (80004f4 <vTaskAppCAN+0x1a8>)
 8000458:	f001 fd90 	bl	8001f7c <HAL_GPIO_WritePin>
 800045c:	e005      	b.n	800046a <vTaskAppCAN+0x11e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000464:	4823      	ldr	r0, [pc, #140]	@ (80004f4 <vTaskAppCAN+0x1a8>)
 8000466:	f001 fd89 	bl	8001f7c <HAL_GPIO_WritePin>
		}
		u8TogglePin = !u8TogglePin;
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <vTaskAppCAN+0x1a4>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	bf0c      	ite	eq
 8000472:	2301      	moveq	r3, #1
 8000474:	2300      	movne	r3, #0
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <vTaskAppCAN+0x1a4>)
 800047c:	701a      	strb	r2, [r3, #0]

		stAppCANMsg.ucSrc = SRC_APPCAN;
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
		stAppCANMsg.ucDest = SRC_APPCAN;
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000486:	2201      	movs	r2, #1
 8000488:	705a      	strb	r2, [r3, #1]
		stAppCANMsg.ucEvent = EVENT_APPCAN_TX;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <vTaskAppCAN+0x184>)
 800048c:	2202      	movs	r2, #2
 800048e:	709a      	strb	r2, [r3, #2]
		stAppCANMsg.pcMessageData = NULL;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <vTaskAppCAN+0x184>)
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
		xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <vTaskAppCAN+0x180>)
 8000498:	6818      	ldr	r0, [r3, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2200      	movs	r2, #0
 800049e:	490c      	ldr	r1, [pc, #48]	@ (80004d0 <vTaskAppCAN+0x184>)
 80004a0:	f003 fd18 	bl	8003ed4 <xQueueGenericSend>
		if(++u8FifoTxCAN >= FIFO_SIZE)
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <vTaskAppCAN+0x1ac>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <vTaskAppCAN+0x1ac>)
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <vTaskAppCAN+0x1ac>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d902      	bls.n	80004be <vTaskAppCAN+0x172>
		{
			u8FifoTxCAN = 0;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <vTaskAppCAN+0x1ac>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
		}
		u16TimeSlice = 0;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <vTaskAppCAN+0x1a0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	801a      	strh	r2, [r3, #0]
	}
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	20000080 	.word	0x20000080
 80004d4:	20000088 	.word	0x20000088
 80004d8:	08005ffc 	.word	0x08005ffc
 80004dc:	20000098 	.word	0x20000098
 80004e0:	200000d0 	.word	0x200000d0
 80004e4:	200000d4 	.word	0x200000d4
 80004e8:	2000009c 	.word	0x2000009c
 80004ec:	200001d4 	.word	0x200001d4
 80004f0:	200001dc 	.word	0x200001dc
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	200000d1 	.word	0x200000d1

080004fc <TaskAppSerial_getQueue>:
//              TaskAppSerial_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppSerial_getQueue()
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return &xQueueAppSerial;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <TaskAppSerial_getQueue+0x10>)
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200001e0 	.word	0x200001e0

08000510 <TaskAppSerial_getTxBuffer>:
//          TaskAppSerial_getTxBuffer
//
//
//////////////////////////////////////////////
uint8_t *TaskAppSerial_getTxBuffer()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	return &u8FrameTxUSART;
 8000514:	4b02      	ldr	r3, [pc, #8]	@ (8000520 <TaskAppSerial_getTxBuffer+0x10>)
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200001f4 	.word	0x200001f4

08000524 <TaskAppSerial_Entry>:
//
//
//////////////////////////////////////////////

void TaskAppSerial_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
    xQueueAppSerial = xQueue;
 800052e:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <TaskAppSerial_Entry+0x48>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6013      	str	r3, [r2, #0]
    xTimerAppSerial = xTimer;
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <TaskAppSerial_Entry+0x4c>)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	6013      	str	r3, [r2, #0]

    hUSART = hGet_USART_Handler();
 800053a:	f000 fe0d 	bl	8001158 <hGet_USART_Handler>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	@ (8000574 <TaskAppSerial_Entry+0x50>)
 8000542:	6013      	str	r3, [r2, #0]

    stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <TaskAppSerial_Entry+0x54>)
 8000546:	2202      	movs	r2, #2
 8000548:	701a      	strb	r2, [r3, #0]
    stAppSerialMsg.ucDest = SRC_APPSERIAL;
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <TaskAppSerial_Entry+0x54>)
 800054c:	2202      	movs	r2, #2
 800054e:	705a      	strb	r2, [r3, #1]
    stAppSerialMsg.ucEvent = EVENT_APPSERIAL_INIT;
 8000550:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <TaskAppSerial_Entry+0x54>)
 8000552:	2200      	movs	r2, #0
 8000554:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 8000556:	4b05      	ldr	r3, [pc, #20]	@ (800056c <TaskAppSerial_Entry+0x48>)
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	4906      	ldr	r1, [pc, #24]	@ (8000578 <TaskAppSerial_Entry+0x54>)
 8000560:	f003 fcb8 	bl	8003ed4 <xQueueGenericSend>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200001e0 	.word	0x200001e0
 8000570:	200001e4 	.word	0x200001e4
 8000574:	200001f0 	.word	0x200001f0
 8000578:	200001e8 	.word	0x200001e8

0800057c <TaskAppSerial_Start>:
//              TaskAppSerial_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_Start(sMessageType *psMessage)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]

	return boError;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <TaskAppSerial_ReceiveEvent>:
//              TaskAppSerial_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_ReceiveEvent(sMessageType *psMessage)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
	return boError;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <TaskAppSerial_TransmitEvent>:
//              TaskAppSerial_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_TransmitEvent(sMessageType *psMessage)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]

    /*uint8_t u8String[] = "Danilo Franco\r\n";*/

    memcpy(u8FrameTxUSART,psMessage->pcMessageData,strlen(psMessage->pcMessageData));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685c      	ldr	r4, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdc5 	bl	8000150 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4621      	mov	r1, r4
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <TaskAppSerial_TransmitEvent+0x4c>)
 80005ce:	f005 fc1d 	bl	8005e0c <memcpy>

    (void)HAL_UART_Transmit(hUSART, u8FrameTxUSART, strlen(psMessage->pcMessageData),10);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <TaskAppSerial_TransmitEvent+0x50>)
 80005d4:	681c      	ldr	r4, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdb8 	bl	8000150 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	4904      	ldr	r1, [pc, #16]	@ (80005f8 <TaskAppSerial_TransmitEvent+0x4c>)
 80005e8:	4620      	mov	r0, r4
 80005ea:	f002 fb9d 	bl	8002d28 <HAL_UART_Transmit>

	return boError;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	200001f4 	.word	0x200001f4
 80005fc:	200001f0 	.word	0x200001f0

08000600 <TaskAppSerial_IgnoreEvent>:
//              TaskAppSerial_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_IgnoreEvent(sMessageType *psMessage)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]

    return(boError);
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <vTaskAppSerial>:
	gasTaskAppSerial_Initializing,
	gasTaskAppSerial_Running
};

void vTaskAppSerial(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if( xQueueReceive(xQueueAppSerial, &stAppSerialMsg, 0 ) )
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <vTaskAppSerial+0x3c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	490c      	ldr	r1, [pc, #48]	@ (8000658 <vTaskAppSerial+0x40>)
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fdf3 	bl	8004214 <xQueueReceive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00a      	beq.n	800064a <vTaskAppSerial+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_APPSERIAL,gpasTaskAppSerial_StateMachine[ucCurrentStateAppSerial], &ucCurrentStateAppSerial, &stAppSerialMsg);
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <vTaskAppSerial+0x44>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <vTaskAppSerial+0x48>)
 800063c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <vTaskAppSerial+0x40>)
 8000642:	4a06      	ldr	r2, [pc, #24]	@ (800065c <vTaskAppSerial+0x44>)
 8000644:	2002      	movs	r0, #2
 8000646:	f000 fc11 	bl	8000e6c <eEventHandler>
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_TX;
		stAppSerialMsg.pcMessageData = NULL;
		xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
		u16TimeSlice = 0;
	}*/
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001e0 	.word	0x200001e0
 8000658:	200001e8 	.word	0x200001e8
 800065c:	200001dd 	.word	0x200001dd
 8000660:	08006040 	.word	0x08006040

08000664 <TaskIO_Entry>:
//              TaskIO_Entry
//
//
//////////////////////////////////////////////
void TaskIO_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    xQueueIO = xQueue;
 800066e:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <TaskIO_Entry+0x40>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6013      	str	r3, [r2, #0]
    xTimerIO = xTimer;
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <TaskIO_Entry+0x44>)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	6013      	str	r3, [r2, #0]

    stIOMsg.ucSrc = SRC_IO;
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <TaskIO_Entry+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <TaskIO_Entry+0x48>)
 8000682:	2200      	movs	r2, #0
 8000684:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_INIT;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <TaskIO_Entry+0x48>)
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueIO, ( void * )&stIOMsg, 0,0);
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <TaskIO_Entry+0x40>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2200      	movs	r2, #0
 8000696:	4905      	ldr	r1, [pc, #20]	@ (80006ac <TaskIO_Entry+0x48>)
 8000698:	f003 fc1c 	bl	8003ed4 <xQueueGenericSend>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000240 	.word	0x20000240
 80006a8:	20000244 	.word	0x20000244
 80006ac:	20000234 	.word	0x20000234

080006b0 <TaskIO_Start>:
//              TaskIO_Start
//
//
//////////////////////////////////////////////
unsigned char TaskIO_Start(sMessageType *psMessage)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]

    stIOMsg.ucSrc = SRC_IO;
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <TaskIO_Start+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <TaskIO_Start+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_NULL;
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <TaskIO_Start+0x74>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueIO, ( void * )&stIOMsg, 0,0);
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <TaskIO_Start+0x78>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2200      	movs	r2, #0
 80006d8:	4912      	ldr	r1, [pc, #72]	@ (8000724 <TaskIO_Start+0x74>)
 80006da:	f003 fbfb 	bl	8003ed4 <xQueueGenericSend>

    ulCountPulse = 0;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <TaskIO_Start+0x7c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOn = 0;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <TaskIO_Start+0x80>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOff = 0;
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <TaskIO_Start+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
    ulCountPeriod = 0;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <TaskIO_Start+0x88>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]

	ulQtyPulse = 5;	/* 5 pulses*/
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <TaskIO_Start+0x8c>)
 80006f8:	2205      	movs	r2, #5
 80006fa:	601a      	str	r2, [r3, #0]
	ulTimePulseOn = 2; 	/* 2*50 = 100ms*/
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <TaskIO_Start+0x90>)
 80006fe:	2202      	movs	r2, #2
 8000700:	601a      	str	r2, [r3, #0]
	ulTimePulseOff = 2; 	/* 2*50 = 100ms*/
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <TaskIO_Start+0x94>)
 8000704:	2202      	movs	r2, #2
 8000706:	601a      	str	r2, [r3, #0]
	ulPeriod = 40; 		/* 20*50 = 1s*/
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <TaskIO_Start+0x98>)
 800070a:	2228      	movs	r2, #40	@ 0x28
 800070c:	601a      	str	r2, [r3, #0]

    (void)osTimerStart(xTimerIO,50);
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <TaskIO_Start+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2132      	movs	r1, #50	@ 0x32
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fd9f 	bl	8003258 <osTimerStart>
	return boError;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000234 	.word	0x20000234
 8000728:	20000240 	.word	0x20000240
 800072c:	20000248 	.word	0x20000248
 8000730:	2000024c 	.word	0x2000024c
 8000734:	20000250 	.word	0x20000250
 8000738:	20000254 	.word	0x20000254
 800073c:	20000258 	.word	0x20000258
 8000740:	2000025c 	.word	0x2000025c
 8000744:	20000260 	.word	0x20000260
 8000748:	20000264 	.word	0x20000264
 800074c:	20000244 	.word	0x20000244

08000750 <TaskIO_IgnoreEvent>:
//              TaskIO_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_IgnoreEvent(sMessageType *psMessage)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]

    return(boError);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <vLocalTimerCallbackIo>:
//              vTimerCallbackIo
//
//
//////////////////////////////////////////////
void vLocalTimerCallbackIo(void const * argument)
 {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	ulCountPeriod++;
 8000770:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <vLocalTimerCallbackIo+0xc4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a2d      	ldr	r2, [pc, #180]	@ (800082c <vLocalTimerCallbackIo+0xc4>)
 8000778:	6013      	str	r3, [r2, #0]
    if(ulCountPeriod <= ulPeriod)
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <vLocalTimerCallbackIo+0xc4>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b2c      	ldr	r3, [pc, #176]	@ (8000830 <vLocalTimerCallbackIo+0xc8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d83c      	bhi.n	8000800 <vLocalTimerCallbackIo+0x98>
    {
    	if(ulCountPulse <= ((ulQtyPulse) * (ulTimePulseOn+ulTimePulseOff)))
 8000786:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <vLocalTimerCallbackIo+0xcc>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <vLocalTimerCallbackIo+0xd0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a2a      	ldr	r2, [pc, #168]	@ (800083c <vLocalTimerCallbackIo+0xd4>)
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	fb03 f202 	mul.w	r2, r3, r2
 8000798:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <vLocalTimerCallbackIo+0xd8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d341      	bcc.n	8000824 <vLocalTimerCallbackIo+0xbc>
    	{
			if(ulCountTimePulseOn < ulTimePulseOn)
 80007a0:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <vLocalTimerCallbackIo+0xdc>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <vLocalTimerCallbackIo+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d20b      	bcs.n	80007c4 <vLocalTimerCallbackIo+0x5c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b2:	4825      	ldr	r0, [pc, #148]	@ (8000848 <vLocalTimerCallbackIo+0xe0>)
 80007b4:	f001 fbe2 	bl	8001f7c <HAL_GPIO_WritePin>
				ulCountTimePulseOn++;
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <vLocalTimerCallbackIo+0xdc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a21      	ldr	r2, [pc, #132]	@ (8000844 <vLocalTimerCallbackIo+0xdc>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e017      	b.n	80007f4 <vLocalTimerCallbackIo+0x8c>
			}
			else
			{
				if(ulCountTimePulseOff < ulTimePulseOff )
 80007c4:	4b21      	ldr	r3, [pc, #132]	@ (800084c <vLocalTimerCallbackIo+0xe4>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <vLocalTimerCallbackIo+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d20b      	bcs.n	80007e8 <vLocalTimerCallbackIo+0x80>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d6:	481c      	ldr	r0, [pc, #112]	@ (8000848 <vLocalTimerCallbackIo+0xe0>)
 80007d8:	f001 fbd0 	bl	8001f7c <HAL_GPIO_WritePin>
					ulCountTimePulseOff++;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <vLocalTimerCallbackIo+0xe4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a1a      	ldr	r2, [pc, #104]	@ (800084c <vLocalTimerCallbackIo+0xe4>)
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	e005      	b.n	80007f4 <vLocalTimerCallbackIo+0x8c>
				}
				else
				{
					ulCountTimePulseOn = 0;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <vLocalTimerCallbackIo+0xdc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
					ulCountTimePulseOff= 0;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <vLocalTimerCallbackIo+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
				}
			}
			ulCountPulse++;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <vLocalTimerCallbackIo+0xd8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <vLocalTimerCallbackIo+0xd8>)
 80007fc:	6013      	str	r3, [r2, #0]
      lastStateChangeTime = currentTime;
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledState);
#endif
 }
 80007fe:	e011      	b.n	8000824 <vLocalTimerCallbackIo+0xbc>
        ulCountPulse = 0;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <vLocalTimerCallbackIo+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOn = 0;
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <vLocalTimerCallbackIo+0xdc>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOff = 0;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <vLocalTimerCallbackIo+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
        ulCountPeriod = 0;
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <vLocalTimerCallbackIo+0xc4>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081e:	480a      	ldr	r0, [pc, #40]	@ (8000848 <vLocalTimerCallbackIo+0xe0>)
 8000820:	f001 fbac 	bl	8001f7c <HAL_GPIO_WritePin>
 }
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000254 	.word	0x20000254
 8000830:	20000264 	.word	0x20000264
 8000834:	2000025c 	.word	0x2000025c
 8000838:	20000260 	.word	0x20000260
 800083c:	20000258 	.word	0x20000258
 8000840:	20000248 	.word	0x20000248
 8000844:	2000024c 	.word	0x2000024c
 8000848:	40011000 	.word	0x40011000
 800084c:	20000250 	.word	0x20000250

08000850 <vTaskIO>:
	gasTaskIO_Initializing,
	gasTaskIO_Flashing
};

void vTaskIO(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( *xQueueIO, &stIOMsg, 0 ) )
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <vTaskIO+0x3c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2200      	movs	r2, #0
 8000860:	490b      	ldr	r1, [pc, #44]	@ (8000890 <vTaskIO+0x40>)
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fcd6 	bl	8004214 <xQueueReceive>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00a      	beq.n	8000884 <vTaskIO+0x34>
	{
		(void)eEventHandler ((unsigned char)SRC_IO,gpasTaskIO_StateMachine[ucCurrentStateIO], &ucCurrentStateIO, &stIOMsg);
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <vTaskIO+0x44>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <vTaskIO+0x48>)
 8000876:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <vTaskIO+0x40>)
 800087c:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <vTaskIO+0x44>)
 800087e:	2000      	movs	r0, #0
 8000880:	f000 faf4 	bl	8000e6c <eEventHandler>
	}
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000240 	.word	0x20000240
 8000890:	20000234 	.word	0x20000234
 8000894:	2000023c 	.word	0x2000023c
 8000898:	0800606c 	.word	0x0800606c

0800089c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_CAN_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <MX_CAN_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_CAN_Init+0x64>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_CAN_Init+0x64>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_CAN_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_CAN_Init+0x64>)
 80008bc:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80008c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_CAN_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <MX_CAN_Init+0x64>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_CAN_Init+0x64>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_CAN_Init+0x64>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_CAN_Init+0x64>)
 80008dc:	2201      	movs	r2, #1
 80008de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_CAN_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_CAN_Init+0x64>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_CAN_Init+0x64>)
 80008ee:	f000 fc95 	bl	800121c <HAL_CAN_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 fa96 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000268 	.word	0x20000268
 8000904:	40006400 	.word	0x40006400

08000908 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a25      	ldr	r2, [pc, #148]	@ (80009b8 <HAL_CAN_MspInit+0xb0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d143      	bne.n	80009b0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000928:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000932:	61d3      	str	r3, [r2, #28]
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1d      	ldr	r2, [pc, #116]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_CAN_MspInit+0xb4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000958:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4814      	ldr	r0, [pc, #80]	@ (80009c0 <HAL_CAN_MspInit+0xb8>)
 800096e:	f001 f989 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <HAL_CAN_MspInit+0xb8>)
 8000988:	f001 f97c 	bl	8001c84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_CAN_MspInit+0xbc>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
 8000992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000994:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009aa:	4a06      	ldr	r2, [pc, #24]	@ (80009c4 <HAL_CAN_MspInit+0xbc>)
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40006400 	.word	0x40006400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40010000 	.word	0x40010000

080009c8 <hGet_CAN_Handler>:
  }
}

/* USER CODE BEGIN 1 */
CAN_HandleTypeDef *hGet_CAN_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	return &hcan;
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <hGet_CAN_Handler+0x10>)
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000268 	.word	0x20000268

080009dc <stHAL_CAN_FilterConfig>:

HAL_StatusTypeDef stHAL_CAN_FilterConfig(void)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig0 =
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <stHAL_CAN_FilterConfig+0x30>)
 80009e4:	463c      	mov	r4, r7
 80009e6:	461d      	mov	r5, r3
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f4:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterMode =  CAN_FILTERMODE_IDLIST,
			.FilterScale = CAN_FILTERSCALE_16BIT,
			.SlaveStartFilterBank  = 0
	};

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0);
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <stHAL_CAN_FilterConfig+0x34>)
 80009fe:	f000 fd08 	bl	8001412 <HAL_CAN_ConfigFilter>

	return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	08005ef4 	.word	0x08005ef4
 8000a10:	20000268 	.word	0x20000268

08000a14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4a06      	ldr	r2, [pc, #24]	@ (8000a3c <vApplicationGetIdleTaskMemory+0x28>)
 8000a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200002ac 	.word	0x200002ac
 8000a40:	2000034c 	.word	0x2000034c

08000a44 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <vApplicationGetTimerTaskMemory+0x2c>)
 8000a54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	4a06      	ldr	r2, [pc, #24]	@ (8000a74 <vApplicationGetTimerTaskMemory+0x30>)
 8000a5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a62:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000054c 	.word	0x2000054c
 8000a74:	200005ec 	.word	0x200005ec

08000a78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b0a4      	sub	sp, #144	@ 0x90
 8000a7c:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerIO */
  osTimerDef(TimerIO, vTimerCallbackIo);
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <MX_FREERTOS_Init+0xf8>)
 8000a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  TimerIOHandle = osTimerCreate(osTimer(TimerIO), osTimerPeriodic, NULL);
 8000a8a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fbac 	bl	80031f0 <osTimerCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a36      	ldr	r2, [pc, #216]	@ (8000b74 <MX_FREERTOS_Init+0xfc>)
 8000a9c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueIO */
  osMessageQDef(QueueIO, 8, sMessageType);
 8000a9e:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <MX_FREERTOS_Init+0x100>)
 8000aa0:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueIOHandle = osMessageCreate(osMessageQ(QueueIO), NULL);
 8000aaa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fc15 	bl	80032e0 <osMessageCreate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a30      	ldr	r2, [pc, #192]	@ (8000b7c <MX_FREERTOS_Init+0x104>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppCAN */
  osMessageQDef(QueueAppCAN, 8, sMessageType);
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <MX_FREERTOS_Init+0x100>)
 8000abe:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppCANHandle = osMessageCreate(osMessageQ(QueueAppCAN), NULL);
 8000ac8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fc06 	bl	80032e0 <osMessageCreate>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b80 <MX_FREERTOS_Init+0x108>)
 8000ad8:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppSerial */
  osMessageQDef(QueueAppSerial, 8, sMessageType);
 8000ada:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <MX_FREERTOS_Init+0x100>)
 8000adc:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppSerialHandle = osMessageCreate(osMessageQ(QueueAppSerial), NULL);
 8000ae6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 fbf7 	bl	80032e0 <osMessageCreate>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_FREERTOS_Init+0x10c>)
 8000af6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskIO */
  osThreadDef(TaskIO, TaskIO_Init, osPriorityIdle, 0, 128);
 8000af8:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_FREERTOS_Init+0x110>)
 8000afa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000afe:	461d      	mov	r5, r3
 8000b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskIOHandle = osThreadCreate(osThread(TaskIO), NULL);
 8000b0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fb0b 	bl	800312e <osThreadCreate>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <MX_FREERTOS_Init+0x114>)
 8000b1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppCAN */
  osThreadDef(TaskAppCAN, TaskAppCAN_Init, osPriorityIdle, 0, 128);
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_FREERTOS_Init+0x118>)
 8000b20:	f107 0420 	add.w	r4, r7, #32
 8000b24:	461d      	mov	r5, r3
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppCANHandle = osThreadCreate(osThread(TaskAppCAN), NULL);
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 faf8 	bl	800312e <osThreadCreate>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <MX_FREERTOS_Init+0x11c>)
 8000b42:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppSerial */
  osThreadDef(TaskAppSerial, TaskAppSerial_Init, osPriorityIdle, 0, 128);
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_FREERTOS_Init+0x120>)
 8000b46:	1d3c      	adds	r4, r7, #4
 8000b48:	461d      	mov	r5, r3
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppSerialHandle = osThreadCreate(osThread(TaskAppSerial), NULL);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fae7 	bl	800312e <osThreadCreate>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <MX_FREERTOS_Init+0x124>)
 8000b64:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b66:	bf00      	nop
 8000b68:	3790      	adds	r7, #144	@ 0x90
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08000c1d 	.word	0x08000c1d
 8000b74:	200002a8 	.word	0x200002a8
 8000b78:	08005f1c 	.word	0x08005f1c
 8000b7c:	2000029c 	.word	0x2000029c
 8000b80:	200002a0 	.word	0x200002a0
 8000b84:	200002a4 	.word	0x200002a4
 8000b88:	08005f34 	.word	0x08005f34
 8000b8c:	20000290 	.word	0x20000290
 8000b90:	08005f5c 	.word	0x08005f5c
 8000b94:	20000294 	.word	0x20000294
 8000b98:	08005f88 	.word	0x08005f88
 8000b9c:	20000298 	.word	0x20000298

08000ba0 <TaskIO_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskIO_Init */
void TaskIO_Init(void const * argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskIO_Init */
  /* Infinite loop */
  TaskIO_Entry(&QueueIOHandle,TimerIOHandle);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <TaskIO_Init+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <TaskIO_Init+0x28>)
 8000bb0:	f7ff fd58 	bl	8000664 <TaskIO_Entry>
  for(;;)
  {
    osDelay(50);
 8000bb4:	2032      	movs	r0, #50	@ 0x32
 8000bb6:	f002 fb06 	bl	80031c6 <osDelay>
    vTaskIO(argument);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe48 	bl	8000850 <vTaskIO>
    osDelay(50);
 8000bc0:	bf00      	nop
 8000bc2:	e7f7      	b.n	8000bb4 <TaskIO_Init+0x14>
 8000bc4:	200002a8 	.word	0x200002a8
 8000bc8:	2000029c 	.word	0x2000029c

08000bcc <TaskAppCAN_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppCAN_Init */
void TaskAppCAN_Init(void const * argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppCAN_Init */
  /* Infinite loop */
  TaskAppCAN_Entry(QueueAppCANHandle,NULL);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <TaskAppCAN_Init+0x24>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fac0 	bl	8000160 <TaskAppCAN_Entry>
  for(;;)
  {
    osDelay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 faf0 	bl	80031c6 <osDelay>
    vTaskAppCAN(argument);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fbb0 	bl	800034c <vTaskAppCAN>
    osDelay(1);
 8000bec:	bf00      	nop
 8000bee:	e7f7      	b.n	8000be0 <TaskAppCAN_Init+0x14>
 8000bf0:	200002a0 	.word	0x200002a0

08000bf4 <TaskAppSerial_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppSerial_Init */
void TaskAppSerial_Init(void const * argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppSerial_Init */
  /* Infinite loop */
  TaskAppSerial_Entry(QueueAppSerialHandle,NULL);
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <TaskAppSerial_Init+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fc8e 	bl	8000524 <TaskAppSerial_Entry>
  for(;;)
  {
    osDelay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f002 fadc 	bl	80031c6 <osDelay>
    vTaskAppSerial(argument);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fd02 	bl	8000618 <vTaskAppSerial>
    osDelay(1);
 8000c14:	bf00      	nop
 8000c16:	e7f7      	b.n	8000c08 <TaskAppSerial_Init+0x14>
 8000c18:	200002a4 	.word	0x200002a4

08000c1c <vTimerCallbackIo>:
  /* USER CODE END TaskAppSerial_Init */
}

/* vTimerCallbackIo function */
void vTimerCallbackIo(void const * argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerCallbackIo */
	vLocalTimerCallbackIo(argument);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fd9f 	bl	8000768 <vLocalTimerCallbackIo>
  /* USER CODE END vTimerCallbackIo */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c60:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a38      	ldr	r2, [pc, #224]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c66:	f043 0320 	orr.w	r3, r3, #32
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0320 	and.w	r3, r3, #32
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a32      	ldr	r2, [pc, #200]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2c      	ldr	r2, [pc, #176]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <MX_GPIO_Init+0x114>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cae:	4827      	ldr	r0, [pc, #156]	@ (8000d4c <MX_GPIO_Init+0x118>)
 8000cb0:	f001 f964 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cba:	4825      	ldr	r0, [pc, #148]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000cbc:	f001 f95e 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <MX_GPIO_Init+0x118>)
 8000cda:	f000 ffd3 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cde:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <MX_GPIO_Init+0x118>)
 8000cf0:	f000 ffc8 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cf4:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000cf8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <MX_GPIO_Init+0x120>)
 8000d06:	f000 ffbd 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d0a:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 8000d0e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d10:	2303      	movs	r3, #3
 8000d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000d1c:	f000 ffb2 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000d3a:	f000 ffa3 	bl	8001c84 <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40010800 	.word	0x40010800

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fa2c 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f80c 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f7ff ff66 	bl	8000c34 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d68:	f7ff fd98 	bl	800089c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000d6c:	f000 f97e 	bl	800106c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d70:	f7ff fe82 	bl	8000a78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d74:	f002 f9d4 	bl	8003120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <main+0x20>

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	@ 0x40
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2228      	movs	r2, #40	@ 0x28
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 ffba 	bl	8005d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 f8f1 	bl	8001fac <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dd0:	f000 f82a 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fb5f 	bl	80024b0 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000df8:	f000 f816 	bl	8000e28 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3740      	adds	r7, #64	@ 0x40
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e16:	f000 f9e5 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <Error_Handler+0x8>

08000e34 <psSearchEvent>:

#include "state.h"


const sStateMachineType *psSearchEvent (const sStateMachineType *psStateTable,unsigned char ucIncoming)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
    unsigned char ucEvent;

    for (;; psStateTable++)
    {
        ucEvent = psStateTable->ucEvent;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	73fb      	strb	r3, [r7, #15]
        if ((ucEvent != 0)&&(ucEvent != ucIncoming))
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <psSearchEvent+0x20>
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d101      	bne.n	8000e58 <psSearchEvent+0x24>
        {
           continue;
        }
        return psStateTable;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e004      	b.n	8000e62 <psSearchEvent+0x2e>
           continue;
 8000e58:	bf00      	nop
    for (;; psStateTable++)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	330c      	adds	r3, #12
 8000e5e:	607b      	str	r3, [r7, #4]
        ucEvent = psStateTable->ucEvent;
 8000e60:	e7ee      	b.n	8000e40 <psSearchEvent+0xc>
    }

}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <eEventHandler>:

void eEventHandler (unsigned char ucDest,const sStateMachineType *psStateTable, unsigned char *piState, sMessageType *psMessage)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
    unsigned char eError = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75fb      	strb	r3, [r7, #23]

    if(ucDest == psMessage->ucDest)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d118      	bne.n	8000ebc <eEventHandler+0x50>
    {
        psStateTable = psSearchEvent(psStateTable, psMessage->ucEvent);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	789b      	ldrb	r3, [r3, #2]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	68b8      	ldr	r0, [r7, #8]
 8000e92:	f7ff ffcf 	bl	8000e34 <psSearchEvent>
 8000e96:	60b8      	str	r0, [r7, #8]

        eError = (*psStateTable->ActionFun)(psMessage);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	4798      	blx	r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	75fb      	strb	r3, [r7, #23]

        if (eError == 1)
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d104      	bne.n	8000eb4 <eEventHandler+0x48>
        {
            *piState = psStateTable->ucStateSuccess;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	7a1a      	ldrb	r2, [r3, #8]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	701a      	strb	r2, [r3, #0]
        else
        {
            *piState = psStateTable->ucStateFailure;
        }
    }
}
 8000eb2:	e003      	b.n	8000ebc <eEventHandler+0x50>
            *piState = psStateTable->ucStateFailure;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	7a5a      	ldrb	r2, [r3, #9]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	701a      	strb	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_MspInit+0x68>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	210f      	movs	r1, #15
 8000efe:	f06f 0001 	mvn.w	r0, #1
 8000f02:	f000 fe94 	bl	8001c2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_MspInit+0x6c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_MspInit+0x6c>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <HAL_InitTick+0xd0>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fc0f 	bl	8002790 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f72:	f001 fbf9 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8000f76:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7a:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <HAL_InitTick+0xd4>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	3b01      	subs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <HAL_InitTick+0xd8>)
 8000f88:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_InitTick+0xdc>)
 8000f8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_InitTick+0xd8>)
 8000f8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f92:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f94:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <HAL_InitTick+0xd8>)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_InitTick+0xd8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_InitTick+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_InitTick+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fac:	4817      	ldr	r0, [pc, #92]	@ (800100c <HAL_InitTick+0xd8>)
 8000fae:	f001 fc3d 	bl	800282c <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11b      	bne.n	8000ff8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fc0:	4812      	ldr	r0, [pc, #72]	@ (800100c <HAL_InitTick+0xd8>)
 8000fc2:	f001 fc8b 	bl	80028dc <HAL_TIM_Base_Start_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d111      	bne.n	8000ff8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fd4:	2019      	movs	r0, #25
 8000fd6:	f000 fe46 	bl	8001c66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d808      	bhi.n	8000ff2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f000 fe22 	bl	8001c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_InitTick+0xe0>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e002      	b.n	8000ff8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3730      	adds	r7, #48	@ 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000
 8001008:	431bde83 	.word	0x431bde83
 800100c:	200009ec 	.word	0x200009ec
 8001010:	40012c00 	.word	0x40012c00
 8001014:	20000008 	.word	0x20000008

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <TIM1_UP_IRQHandler+0x10>)
 8001052:	f001 fc8f 	bl	8002974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200009ec 	.word	0x200009ec

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <MX_USART1_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART1_UART_Init+0x4c>)
 80010a4:	f001 fdf0 	bl	8002c88 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f7ff febb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000a34 	.word	0x20000a34
 80010bc:	40013800 	.word	0x40013800

080010c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_UART_MspInit+0x8c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d131      	bne.n	8001144 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_UART_MspInit+0x90>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <HAL_UART_MspInit+0x90>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_UART_MspInit+0x90>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_UART_MspInit+0x90>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <HAL_UART_MspInit+0x90>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_UART_MspInit+0x90>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	@ (8001154 <HAL_UART_MspInit+0x94>)
 8001126:	f000 fdad 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_UART_MspInit+0x94>)
 8001140:	f000 fda0 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013800 	.word	0x40013800
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800

08001158 <hGet_USART_Handler>:
  }
}

/* USER CODE BEGIN 1 */
UART_HandleTypeDef *hGet_USART_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	return &huart1;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <hGet_USART_Handler+0x10>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000a34 	.word	0x20000a34

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800116c:	f7ff ff78 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001172:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001188:	4c09      	ldr	r4, [pc, #36]	@ (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f004 fe13 	bl	8005dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fddd 	bl	8000d58 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011a8:	080060b0 	.word	0x080060b0
  ldr r2, =_sbss
 80011ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011b0:	20001a50 	.word	0x20001a50

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 fd25 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f7ff feb0 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe76 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a03      	ldr	r2, [pc, #12]	@ (8001204 <HAL_IncTick+0x20>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000a7c 	.word	0x20000a7c

08001208 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	@ (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000a7c 	.word	0x20000a7c

0800121c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0ed      	b.n	800140a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fb64 	bl	8000908 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff ffda 	bl	8001208 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001256:	e012      	b.n	800127e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001258:	f7ff ffd6 	bl	8001208 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90b      	bls.n	800127e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e0c5      	b.n	800140a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0e5      	beq.n	8001258 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0202 	bic.w	r2, r2, #2
 800129a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff ffb4 	bl	8001208 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012a2:	e012      	b.n	80012ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a4:	f7ff ffb0 	bl	8001208 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b0a      	cmp	r3, #10
 80012b0:	d90b      	bls.n	80012ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e09f      	b.n	800140a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e5      	bne.n	80012a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7e1b      	ldrb	r3, [r3, #24]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d108      	bne.n	80012f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	e007      	b.n	8001302 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7e5b      	ldrb	r3, [r3, #25]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e007      	b.n	800132c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800132a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e9b      	ldrb	r3, [r3, #26]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0220 	orr.w	r2, r2, #32
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e007      	b.n	8001356 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0220 	bic.w	r2, r2, #32
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7edb      	ldrb	r3, [r3, #27]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0210 	bic.w	r2, r2, #16
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e007      	b.n	8001380 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0210 	orr.w	r2, r2, #16
 800137e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7f1b      	ldrb	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0208 	orr.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e007      	b.n	80013aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0208 	bic.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7f5b      	ldrb	r3, [r3, #29]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0204 	orr.w	r2, r2, #4
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	ea42 0103 	orr.w	r1, r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d003      	beq.n	8001438 <HAL_CAN_ConfigFilter+0x26>
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	2b02      	cmp	r3, #2
 8001434:	f040 80aa 	bne.w	800158c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2201      	movs	r2, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d123      	bne.n	80014ba <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	401a      	ands	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001494:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3248      	adds	r2, #72	@ 0x48
 800149a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b0:	6979      	ldr	r1, [r7, #20]
 80014b2:	3348      	adds	r3, #72	@ 0x48
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d122      	bne.n	8001508 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3248      	adds	r2, #72	@ 0x48
 80014e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	3348      	adds	r3, #72	@ 0x48
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001522:	e007      	b.n	8001534 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800154e:	e007      	b.n	8001560 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800157e:	f023 0201 	bic.w	r2, r3, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e006      	b.n	800159a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d12e      	bne.n	8001616 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fe1a 	bl	8001208 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d8:	f7ff fe16 	bl	8001208 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d90b      	bls.n	80015fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2205      	movs	r2, #5
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e012      	b.n	8001624 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e5      	bne.n	80015d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e006      	b.n	8001624 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <HAL_CAN_AddTxMessage+0x2c>
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	2b02      	cmp	r3, #2
 8001654:	f040 80ad 	bne.w	80017b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10a      	bne.n	8001678 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8095 	beq.w	80017a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	0e1b      	lsrs	r3, r3, #24
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001682:	2201      	movs	r2, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	6809      	ldr	r1, [r1, #0]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3318      	adds	r3, #24
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	440b      	add	r3, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00f      	b.n	80016d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3318      	adds	r3, #24
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	440b      	add	r3, r1
 80016ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3318      	adds	r3, #24
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	3304      	adds	r3, #4
 80016e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	7d1b      	ldrb	r3, [r3, #20]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d111      	bne.n	8001710 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3318      	adds	r3, #24
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	6811      	ldr	r1, [r2, #0]
 8001700:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3318      	adds	r3, #24
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	3304      	adds	r3, #4
 800170e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3307      	adds	r3, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	061a      	lsls	r2, r3, #24
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3306      	adds	r3, #6
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3305      	adds	r3, #5
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4313      	orrs	r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	3204      	adds	r2, #4
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4610      	mov	r0, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	6811      	ldr	r1, [r2, #0]
 8001738:	ea43 0200 	orr.w	r2, r3, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3303      	adds	r3, #3
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	061a      	lsls	r2, r3, #24
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3302      	adds	r3, #2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	4313      	orrs	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	4610      	mov	r0, r2
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	6811      	ldr	r1, [r2, #0]
 800176e:	ea43 0200 	orr.w	r2, r3, r0
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	440b      	add	r3, r1
 8001778:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800177c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3318      	adds	r3, #24
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	6811      	ldr	r1, [r2, #0]
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3318      	adds	r3, #24
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	440b      	add	r3, r1
 800179c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e00e      	b.n	80017c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e006      	b.n	80017c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3724      	adds	r7, #36	@ 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017e4:	7afb      	ldrb	r3, [r7, #11]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d11d      	bne.n	8001826 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d003      	beq.n	8001856 <HAL_CAN_GetRxMessage+0x24>
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b02      	cmp	r3, #2
 8001852:	f040 8103 	bne.w	8001a5c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10e      	bne.n	800187a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d116      	bne.n	8001898 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0f7      	b.n	8001a6a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0e8      	b.n	8001a6a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	331b      	adds	r3, #27
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0204 	and.w	r2, r3, #4
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	331b      	adds	r3, #27
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0d5b      	lsrs	r3, r3, #21
 80018c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	331b      	adds	r3, #27
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	331b      	adds	r3, #27
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0202 	and.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	331b      	adds	r3, #27
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2208      	movs	r2, #8
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	e00b      	b.n	8001936 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	331b      	adds	r3, #27
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 020f 	and.w	r2, r3, #15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	331b      	adds	r3, #27
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	331b      	adds	r3, #27
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0a1a      	lsrs	r2, r3, #8
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0c1a      	lsrs	r2, r3, #16
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3302      	adds	r3, #2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e1a      	lsrs	r2, r3, #24
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3303      	adds	r3, #3
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	3304      	adds	r3, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0a1a      	lsrs	r2, r3, #8
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3305      	adds	r3, #5
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0c1a      	lsrs	r2, r3, #16
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3306      	adds	r3, #6
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0e1a      	lsrs	r2, r3, #24
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3307      	adds	r3, #7
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d108      	bne.n	8001a48 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0220 	orr.w	r2, r2, #32
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	e007      	b.n	8001a58 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e006      	b.n	8001a6a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
  }
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d002      	beq.n	8001a96 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d10f      	bne.n	8001ab6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e005      	b.n	8001ab6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4906      	ldr	r1, [pc, #24]	@ (8001b5c <__NVIC_EnableIRQ+0x34>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff4f 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff64 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ffb2 	bl	8001bb4 <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff81 	bl	8001b60 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff57 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b08b      	sub	sp, #44	@ 0x2c
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e161      	b.n	8001f5c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8150 	bne.w	8001f56 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a97      	ldr	r2, [pc, #604]	@ (8001f18 <HAL_GPIO_Init+0x294>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d05e      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a95      	ldr	r2, [pc, #596]	@ (8001f18 <HAL_GPIO_Init+0x294>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d875      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cc6:	4a95      	ldr	r2, [pc, #596]	@ (8001f1c <HAL_GPIO_Init+0x298>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d058      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ccc:	4a93      	ldr	r2, [pc, #588]	@ (8001f1c <HAL_GPIO_Init+0x298>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d86f      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cd2:	4a93      	ldr	r2, [pc, #588]	@ (8001f20 <HAL_GPIO_Init+0x29c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d052      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cd8:	4a91      	ldr	r2, [pc, #580]	@ (8001f20 <HAL_GPIO_Init+0x29c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d869      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cde:	4a91      	ldr	r2, [pc, #580]	@ (8001f24 <HAL_GPIO_Init+0x2a0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04c      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ce4:	4a8f      	ldr	r2, [pc, #572]	@ (8001f24 <HAL_GPIO_Init+0x2a0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d863      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cea:	4a8f      	ldr	r2, [pc, #572]	@ (8001f28 <HAL_GPIO_Init+0x2a4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d046      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cf0:	4a8d      	ldr	r2, [pc, #564]	@ (8001f28 <HAL_GPIO_Init+0x2a4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d85d      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d82a      	bhi.n	8001d50 <HAL_GPIO_Init+0xcc>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d859      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001d04 <HAL_GPIO_Init+0x80>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001d6b 	.word	0x08001d6b
 8001d10:	08001dad 	.word	0x08001dad
 8001d14:	08001db3 	.word	0x08001db3
 8001d18:	08001db3 	.word	0x08001db3
 8001d1c:	08001db3 	.word	0x08001db3
 8001d20:	08001db3 	.word	0x08001db3
 8001d24:	08001db3 	.word	0x08001db3
 8001d28:	08001db3 	.word	0x08001db3
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001db3 	.word	0x08001db3
 8001d34:	08001db3 	.word	0x08001db3
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001db3 	.word	0x08001db3
 8001d40:	08001db3 	.word	0x08001db3
 8001d44:	08001db3 	.word	0x08001db3
 8001d48:	08001d61 	.word	0x08001d61
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	4a76      	ldr	r2, [pc, #472]	@ (8001f2c <HAL_GPIO_Init+0x2a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d56:	e02c      	b.n	8001db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e029      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	3304      	adds	r3, #4
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e024      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e01f      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e01a      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d86:	2304      	movs	r3, #4
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e013      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	611a      	str	r2, [r3, #16]
          break;
 8001d9e:	e009      	b.n	8001db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	615a      	str	r2, [r3, #20]
          break;
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          break;
 8001db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2bff      	cmp	r3, #255	@ 0xff
 8001db8:	d801      	bhi.n	8001dbe <HAL_GPIO_Init+0x13a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_Init+0x13e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	@ 0xff
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_GPIO_Init+0x14c>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x152>
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	3b08      	subs	r3, #8
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	210f      	movs	r1, #15
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80a9 	beq.w	8001f56 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e04:	4b4a      	ldr	r3, [pc, #296]	@ (8001f30 <HAL_GPIO_Init+0x2ac>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a49      	ldr	r2, [pc, #292]	@ (8001f30 <HAL_GPIO_Init+0x2ac>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_GPIO_Init+0x2ac>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e1c:	4a45      	ldr	r2, [pc, #276]	@ (8001f34 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3d      	ldr	r2, [pc, #244]	@ (8001f38 <HAL_GPIO_Init+0x2b4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1e0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f3c <HAL_GPIO_Init+0x2b8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	@ (8001f40 <HAL_GPIO_Init+0x2bc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e64:	2300      	movs	r3, #0
 8001e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e76:	492f      	ldr	r1, [pc, #188]	@ (8001f34 <HAL_GPIO_Init+0x2b0>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	492b      	ldr	r1, [pc, #172]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4927      	ldr	r1, [pc, #156]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	4921      	ldr	r1, [pc, #132]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	491d      	ldr	r1, [pc, #116]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4917      	ldr	r1, [pc, #92]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4913      	ldr	r1, [pc, #76]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01f      	beq.n	8001f48 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	490d      	ldr	r1, [pc, #52]	@ (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e01f      	b.n	8001f56 <HAL_GPIO_Init+0x2d2>
 8001f16:	bf00      	nop
 8001f18:	10320000 	.word	0x10320000
 8001f1c:	10310000 	.word	0x10310000
 8001f20:	10220000 	.word	0x10220000
 8001f24:	10210000 	.word	0x10210000
 8001f28:	10120000 	.word	0x10120000
 8001f2c:	10110000 	.word	0x10110000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	40011000 	.word	0x40011000
 8001f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4909      	ldr	r1, [pc, #36]	@ (8001f78 <HAL_GPIO_Init+0x2f4>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	3301      	adds	r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f47f ae96 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	372c      	adds	r7, #44	@ 0x2c
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e272      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b92      	ldr	r3, [pc, #584]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b89      	ldr	r3, [pc, #548]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x12c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e24c      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x76>
 8002014:	4b80      	ldr	r3, [pc, #512]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7f      	ldr	r2, [pc, #508]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x98>
 800202a:	4b7b      	ldr	r3, [pc, #492]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7a      	ldr	r2, [pc, #488]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b78      	ldr	r3, [pc, #480]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a77      	ldr	r2, [pc, #476]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xbc>
 800204e:	4b72      	ldr	r3, [pc, #456]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a71      	ldr	r2, [pc, #452]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b6f      	ldr	r3, [pc, #444]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a6e      	ldr	r2, [pc, #440]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd4>
 8002068:	4b6b      	ldr	r3, [pc, #428]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6a      	ldr	r2, [pc, #424]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b68      	ldr	r3, [pc, #416]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a67      	ldr	r2, [pc, #412]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff f8be 	bl	8001208 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff f8ba 	bl	8001208 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e200      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe4>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff f8aa 	bl	8001208 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f8a6 	bl	8001208 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1ec      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x10c>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d063      	beq.n	80021ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f2:	4b49      	ldr	r3, [pc, #292]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
 80020fe:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1c0      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b3d      	ldr	r3, [pc, #244]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e03a      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <HAL_RCC_OscConfig+0x270>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f85f 	bl	8001208 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7ff f85b 	bl	8001208 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1a1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4927      	ldr	r1, [pc, #156]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002182:	4b26      	ldr	r3, [pc, #152]	@ (800221c <HAL_RCC_OscConfig+0x270>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff f83e 	bl	8001208 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7ff f83a 	bl	8001208 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e180      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d03a      	beq.n	8002230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d019      	beq.n	80021f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_RCC_OscConfig+0x274>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7ff f81e 	bl	8001208 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff f81a 	bl	8001208 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e160      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fafe 	bl	80027f0 <RCC_Delay>
 80021f4:	e01c      	b.n	8002230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_RCC_OscConfig+0x274>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7ff f804 	bl	8001208 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002202:	e00f      	b.n	8002224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff f800 	bl	8001208 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d908      	bls.n	8002224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e146      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	42420000 	.word	0x42420000
 8002220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b92      	ldr	r3, [pc, #584]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e9      	bne.n	8002204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a6 	beq.w	800238a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b8b      	ldr	r3, [pc, #556]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b88      	ldr	r3, [pc, #544]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a87      	ldr	r2, [pc, #540]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]
 800225a:	4b85      	ldr	r3, [pc, #532]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b82      	ldr	r3, [pc, #520]	@ (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7e      	ldr	r2, [pc, #504]	@ (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7fe ffc1 	bl	8001208 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe ffbd 	bl	8001208 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	@ 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e103      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b75      	ldr	r3, [pc, #468]	@ (8002474 <HAL_RCC_OscConfig+0x4c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x312>
 80022b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e02d      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x334>
 80022c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a69      	ldr	r2, [pc, #420]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b67      	ldr	r3, [pc, #412]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a66      	ldr	r2, [pc, #408]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x356>
 80022e8:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a60      	ldr	r2, [pc, #384]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6213      	str	r3, [r2, #32]
 80022f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x36e>
 8002302:	4b5b      	ldr	r3, [pc, #364]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a5a      	ldr	r2, [pc, #360]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b58      	ldr	r3, [pc, #352]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a57      	ldr	r2, [pc, #348]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe ff71 	bl	8001208 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe ff6d 	bl	8001208 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0b1      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b4b      	ldr	r3, [pc, #300]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x37e>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe ff5b 	bl	8001208 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe ff57 	bl	8001208 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e09b      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b3c      	ldr	r3, [pc, #240]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a3b      	ldr	r2, [pc, #236]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002394:	4b36      	ldr	r3, [pc, #216]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d061      	beq.n	8002464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d146      	bne.n	8002436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe ff2b 	bl	8001208 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe ff27 	bl	8001208 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e06d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4921      	ldr	r1, [pc, #132]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a19      	ldr	r1, [r3, #32]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	430b      	orrs	r3, r1
 8002402:	491b      	ldr	r1, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x4cc>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fefb 	bl	8001208 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fef7 	bl	8001208 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x46a>
 8002434:	e035      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fee4 	bl	8001208 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fee0 	bl	8001208 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e026      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x498>
 8002462:	e01e      	b.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e019      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_RCC_OscConfig+0x500>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d0      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b67      	ldr	r3, [pc, #412]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4965      	ldr	r1, [pc, #404]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b63      	ldr	r3, [pc, #396]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b8      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b53      	ldr	r3, [pc, #332]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a52      	ldr	r2, [pc, #328]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800252e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494d      	ldr	r1, [pc, #308]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d040      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e073      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06b      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4936      	ldr	r1, [pc, #216]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fe32 	bl	8001208 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fe2e 	bl	8001208 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e053      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d210      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4922      	ldr	r1, [pc, #136]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e032      	b.n	8002666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4916      	ldr	r1, [pc, #88]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490e      	ldr	r1, [pc, #56]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f821 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490a      	ldr	r1, [pc, #40]	@ (8002678 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a09      	ldr	r2, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1cc>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCC_ClockConfig+0x1d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc68 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	08006074 	.word	0x08006074
 800267c:	20000004 	.word	0x20000004
 8002680:	20000008 	.word	0x20000008

08002684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800269e:	4b1e      	ldr	r3, [pc, #120]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x94>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x36>
 80026b2:	e027      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_RCC_GetSysClockFreq+0x98>)
 80026b6:	613b      	str	r3, [r7, #16]
      break;
 80026b8:	e027      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	0c9b      	lsrs	r3, r3, #18
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d010      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c5b      	lsrs	r3, r3, #17
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_RCC_GetSysClockFreq+0x98>)
 80026e6:	fb03 f202 	mul.w	r2, r3, r2
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e004      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	613b      	str	r3, [r7, #16]
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCC_GetSysClockFreq+0x98>)
 8002706:	613b      	str	r3, [r7, #16]
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	693b      	ldr	r3, [r7, #16]
}
 800270c:	4618      	mov	r0, r3
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	007a1200 	.word	0x007a1200
 8002720:	0800608c 	.word	0x0800608c
 8002724:	0800609c 	.word	0x0800609c
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b02      	ldr	r3, [pc, #8]	@ (800273c <HAL_RCC_GetHCLKFreq+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff2 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08006084 	.word	0x08006084

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffde 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08006084 	.word	0x08006084

08002790 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	220f      	movs	r2, #15
 800279e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_GetClockConfig+0x58>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_RCC_GetClockConfig+0x58>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetClockConfig+0x58>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <HAL_RCC_GetClockConfig+0x58>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0207 	and.w	r2, r3, #7
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40022000 	.word	0x40022000

080027f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <RCC_Delay+0x34>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <RCC_Delay+0x38>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800280c:	bf00      	nop
  }
  while (Delay --);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <RCC_Delay+0x1c>
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000004 	.word	0x20000004
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f839 	bl	80028ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 f996 	bl	8002b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e035      	b.n	8002960 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a16      	ldr	r2, [pc, #88]	@ (800296c <HAL_TIM_Base_Start_IT+0x90>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_TIM_Base_Start_IT+0x4e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800291e:	d004      	beq.n	800292a <HAL_TIM_Base_Start_IT+0x4e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <HAL_TIM_Base_Start_IT+0x94>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d010      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294c:	e007      	b.n	800295e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400

08002974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0202 	mvn.w	r2, #2
 80029a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8d1 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8c4 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8d3 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0204 	mvn.w	r2, #4
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8ab 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f89e 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f8ad 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0208 	mvn.w	r2, #8
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2204      	movs	r2, #4
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f885 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f878 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f887 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d020      	beq.n	8002abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0210 	mvn.w	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2208      	movs	r2, #8
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f85f 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f852 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f861 	bl	8002b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0201 	mvn.w	r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f992 	bl	8000e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00c      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8b9 	bl	8002c76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f831 	bl	8002b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0220 	mvn.w	r2, #32
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f88c 	bl	8002c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0x28>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0x28>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <TIM_Base_SetConfig+0xc4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0x52>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0x52>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c60 <TIM_Base_SetConfig+0xc4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <TIM_Base_SetConfig+0xc0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d103      	bne.n	8002c34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
  }
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40000400 	.word	0x40000400

08002c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e042      	b.n	8002d20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe fa06 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	@ 0x24
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f971 	bl	8002fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d175      	bne.n	8002e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Transmit+0x2c>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e06e      	b.n	8002e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2221      	movs	r2, #33	@ 0x21
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fa4f 	bl	8001208 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d80:	d108      	bne.n	8002d94 <HAL_UART_Transmit+0x6c>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e003      	b.n	8002d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d9c:	e02e      	b.n	8002dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2180      	movs	r1, #128	@ 0x80
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f848 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e03a      	b.n	8002e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e007      	b.n	8002dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3301      	adds	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1cb      	bne.n	8002d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2140      	movs	r1, #64	@ 0x40
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f814 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4e:	e03b      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e56:	d037      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7fe f9d6 	bl	8001208 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e03a      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d023      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b80      	cmp	r3, #128	@ 0x80
 8002e84:	d020      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d01d      	beq.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d116      	bne.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f81d 	bl	8002ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00f      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d0b4      	beq.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b095      	sub	sp, #84	@ 0x54
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f18:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3314      	adds	r3, #20
 8002f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d119      	bne.n	8002f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 0310 	bic.w	r3, r3, #16
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f88:	61ba      	str	r2, [r7, #24]
 8002f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002faa:	bf00      	nop
 8002fac:	3754      	adds	r7, #84	@ 0x54
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fee:	f023 030c 	bic.w	r3, r3, #12
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	@ (80030c8 <UART_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff fba4 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	e002      	b.n	800302a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7ff fb8c 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a22      	ldr	r2, [pc, #136]	@ (80030cc <UART_SetConfig+0x118>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	0119      	lsls	r1, r3, #4
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <UART_SetConfig+0x118>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	@ 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	@ 0x32
 8003074:	4a15      	ldr	r2, [pc, #84]	@ (80030cc <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003080:	4419      	add	r1, r3
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <UART_SetConfig+0x118>)
 800309a:	fba3 0302 	umull	r0, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2064      	movs	r0, #100	@ 0x64
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	@ 0x32
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <UART_SetConfig+0x118>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	440a      	add	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40013800 	.word	0x40013800
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	2b84      	cmp	r3, #132	@ 0x84
 80030e4:	d005      	beq.n	80030f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	3303      	adds	r3, #3
 80030f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003104:	f3ef 8305 	mrs	r3, IPSR
 8003108:	607b      	str	r3, [r7, #4]
  return(result);
 800310a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003124:	f001 fcaa 	bl	8004a7c <vTaskStartScheduler>
  
  return osOK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}

0800312e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800312e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003130:	b089      	sub	sp, #36	@ 0x24
 8003132:	af04      	add	r7, sp, #16
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <osThreadCreate+0x54>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685c      	ldr	r4, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691e      	ldr	r6, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ffb8 	bl	80030d0 <makeFreeRtosPriority>
 8003160:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800316a:	9202      	str	r2, [sp, #8]
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	9100      	str	r1, [sp, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4632      	mov	r2, r6
 8003174:	4629      	mov	r1, r5
 8003176:	4620      	mov	r0, r4
 8003178:	f001 fa9a 	bl	80046b0 <xTaskCreateStatic>
 800317c:	4603      	mov	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e01c      	b.n	80031bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685c      	ldr	r4, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff9a 	bl	80030d0 <makeFreeRtosPriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4632      	mov	r2, r6
 80031aa:	4629      	mov	r1, r5
 80031ac:	4620      	mov	r0, r4
 80031ae:	f001 fadf 	bl	8004770 <xTaskCreate>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d001      	beq.n	80031bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031bc:	68fb      	ldr	r3, [r7, #12]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <osDelay+0x16>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	e000      	b.n	80031de <osDelay+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fc16 	bl	8004a10 <vTaskDelay>
  
  return osOK;
 80031e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	460b      	mov	r3, r1
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d013      	beq.n	800322e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <osTimerCreate+0x20>
 800320c:	2101      	movs	r1, #1
 800320e:	e000      	b.n	8003212 <osTimerCreate+0x22>
 8003210:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800321a:	9201      	str	r2, [sp, #4]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	460a      	mov	r2, r1
 8003222:	2101      	movs	r1, #1
 8003224:	480b      	ldr	r0, [pc, #44]	@ (8003254 <osTimerCreate+0x64>)
 8003226:	f002 f9fe 	bl	8005626 <xTimerCreateStatic>
 800322a:	4603      	mov	r3, r0
 800322c:	e00e      	b.n	800324c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <osTimerCreate+0x48>
 8003234:	2201      	movs	r2, #1
 8003236:	e000      	b.n	800323a <osTimerCreate+0x4a>
 8003238:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2101      	movs	r1, #1
 8003244:	4803      	ldr	r0, [pc, #12]	@ (8003254 <osTimerCreate+0x64>)
 8003246:	f002 f9cd 	bl	80055e4 <xTimerCreate>
 800324a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	08005fa4 	.word	0x08005fa4

08003258 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <osTimerStart+0x20>
    ticks = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003278:	f7ff ff41 	bl	80030fe <inHandlerMode>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01a      	beq.n	80032b8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	2200      	movs	r2, #0
 8003288:	9200      	str	r2, [sp, #0]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	2109      	movs	r1, #9
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f002 fa46 	bl	8005720 <xTimerGenericCommand>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d002      	beq.n	80032a0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800329a:	23ff      	movs	r3, #255	@ 0xff
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e018      	b.n	80032d2 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d015      	beq.n	80032d2 <osTimerStart+0x7a>
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <osTimerStart+0x84>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	e00c      	b.n	80032d2 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	2104      	movs	r1, #4
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f002 fa2c 	bl	8005720 <xTimerGenericCommand>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <osTimerStart+0x7a>
      result = osErrorOS;
 80032ce:	23ff      	movs	r3, #255	@ 0xff
 80032d0:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80032d2:	697b      	ldr	r3, [r7, #20]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d011      	beq.n	8003316 <osMessageCreate+0x36>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2400      	movs	r4, #0
 800330c:	9400      	str	r4, [sp, #0]
 800330e:	f000 fd09 	bl	8003d24 <xQueueGenericCreateStatic>
 8003312:	4603      	mov	r3, r0
 8003314:	e008      	b.n	8003328 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	4619      	mov	r1, r3
 8003322:	f000 fd7c 	bl	8003e1e <xQueueGenericCreate>
 8003326:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800333c:	f001 fc0e 	bl	8004b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003340:	4b5c      	ldr	r3, [pc, #368]	@ (80034b4 <pvPortMalloc+0x184>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003348:	f000 f924 	bl	8003594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800334c:	4b5a      	ldr	r3, [pc, #360]	@ (80034b8 <pvPortMalloc+0x188>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 8095 	bne.w	8003484 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01e      	beq.n	800339e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003360:	2208      	movs	r2, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f023 0307 	bic.w	r3, r3, #7
 8003378:	3308      	adds	r3, #8
 800337a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d06f      	beq.n	8003484 <pvPortMalloc+0x154>
 80033a4:	4b45      	ldr	r3, [pc, #276]	@ (80034bc <pvPortMalloc+0x18c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d86a      	bhi.n	8003484 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033ae:	4b44      	ldr	r3, [pc, #272]	@ (80034c0 <pvPortMalloc+0x190>)
 80033b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80033b2:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <pvPortMalloc+0x190>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033b8:	e004      	b.n	80033c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d903      	bls.n	80033d6 <pvPortMalloc+0xa6>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f1      	bne.n	80033ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033d6:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <pvPortMalloc+0x184>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033dc:	429a      	cmp	r2, r3
 80033de:	d051      	beq.n	8003484 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2208      	movs	r2, #8
 80033e6:	4413      	add	r3, r2
 80033e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad2      	subs	r2, r2, r3
 80033fa:	2308      	movs	r3, #8
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	429a      	cmp	r2, r3
 8003400:	d920      	bls.n	8003444 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <pvPortMalloc+0xfc>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	613b      	str	r3, [r7, #16]
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad2      	subs	r2, r2, r3
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800343e:	69b8      	ldr	r0, [r7, #24]
 8003440:	f000 f90a 	bl	8003658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <pvPortMalloc+0x18c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <pvPortMalloc+0x18c>)
 8003450:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <pvPortMalloc+0x18c>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <pvPortMalloc+0x194>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d203      	bcs.n	8003466 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <pvPortMalloc+0x18c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a18      	ldr	r2, [pc, #96]	@ (80034c4 <pvPortMalloc+0x194>)
 8003464:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <pvPortMalloc+0x188>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	431a      	orrs	r2, r3
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <pvPortMalloc+0x198>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <pvPortMalloc+0x198>)
 8003482:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003484:	f001 fb78 	bl	8004b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <pvPortMalloc+0x17a>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60fb      	str	r3, [r7, #12]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <pvPortMalloc+0x176>
	return pvReturn;
 80034aa:	69fb      	ldr	r3, [r7, #28]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3728      	adds	r7, #40	@ 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20001688 	.word	0x20001688
 80034b8:	2000169c 	.word	0x2000169c
 80034bc:	2000168c 	.word	0x2000168c
 80034c0:	20001680 	.word	0x20001680
 80034c4:	20001690 	.word	0x20001690
 80034c8:	20001694 	.word	0x20001694

080034cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04f      	beq.n	800357e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034de:	2308      	movs	r3, #8
 80034e0:	425b      	negs	r3, r3
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4413      	add	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <vPortFree+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <vPortFree+0x46>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	60fb      	str	r3, [r7, #12]
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	e7fd      	b.n	800350e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <vPortFree+0x66>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60bb      	str	r3, [r7, #8]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <vPortFree+0xbc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01e      	beq.n	800357e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11a      	bne.n	800357e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <vPortFree+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003558:	f001 fb00 	bl	8004b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <vPortFree+0xc0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4413      	add	r3, r2
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <vPortFree+0xc0>)
 8003568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800356a:	6938      	ldr	r0, [r7, #16]
 800356c:	f000 f874 	bl	8003658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <vPortFree+0xc4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a06      	ldr	r2, [pc, #24]	@ (8003590 <vPortFree+0xc4>)
 8003578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800357a:	f001 fafd 	bl	8004b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	2000169c 	.word	0x2000169c
 800358c:	2000168c 	.word	0x2000168c
 8003590:	20001698 	.word	0x20001698

08003594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800359a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800359e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80035a0:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <prvHeapInit+0xac>)
 80035a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3307      	adds	r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003640 <prvHeapInit+0xac>)
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <prvHeapInit+0xb0>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003644 <prvHeapInit+0xb0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035e0:	2208      	movs	r2, #8
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <prvHeapInit+0xb4>)
 80035f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035f6:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <prvHeapInit+0xb4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035fe:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <prvHeapInit+0xb4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <prvHeapInit+0xb4>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <prvHeapInit+0xb8>)
 8003622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a09      	ldr	r2, [pc, #36]	@ (8003650 <prvHeapInit+0xbc>)
 800362a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800362c:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <prvHeapInit+0xc0>)
 800362e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000a80 	.word	0x20000a80
 8003644:	20001680 	.word	0x20001680
 8003648:	20001688 	.word	0x20001688
 800364c:	20001690 	.word	0x20001690
 8003650:	2000168c 	.word	0x2000168c
 8003654:	2000169c 	.word	0x2000169c

08003658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <prvInsertBlockIntoFreeList+0xa8>)
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e002      	b.n	800366c <prvInsertBlockIntoFreeList+0x14>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	429a      	cmp	r2, r3
 8003674:	d8f7      	bhi.n	8003666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d108      	bne.n	800369a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	441a      	add	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d118      	bne.n	80036e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <prvInsertBlockIntoFreeList+0xac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d00d      	beq.n	80036d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e008      	b.n	80036e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <prvInsertBlockIntoFreeList+0xac>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e003      	b.n	80036e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d002      	beq.n	80036f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	20001680 	.word	0x20001680
 8003704:	20001688 	.word	0x20001688

08003708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f103 0208 	add.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 0208 	add.w	r2, r3, #8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f103 0208 	add.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ba:	d103      	bne.n	80037c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e00c      	b.n	80037de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3308      	adds	r3, #8
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e002      	b.n	80037d2 <vListInsert+0x2e>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d2f6      	bcs.n	80037cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6892      	ldr	r2, [r2, #8]
 800382a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d103      	bne.n	8003848 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b04      	subs	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b04      	subs	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b04      	subs	r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003898:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <pxPortInitialiseStack+0x54>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b14      	subs	r3, #20
 80038a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b20      	subs	r3, #32
 80038ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038b0:	68fb      	ldr	r3, [r7, #12]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	080038c1 	.word	0x080038c1

080038c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ca:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <prvTaskExitError+0x54>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d2:	d00b      	beq.n	80038ec <prvTaskExitError+0x2c>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	60fb      	str	r3, [r7, #12]
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <prvTaskExitError+0x28>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60bb      	str	r3, [r7, #8]
}
 80038fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003900:	bf00      	nop
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0fc      	beq.n	8003902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000010 	.word	0x20000010
	...

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	f04e 0e0d 	orr.w	lr, lr, #13
 800393e:	4770      	bx	lr

08003940 <pxCurrentTCBConst2>:
 8003940:	200016e8 	.word	0x200016e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003948:	4806      	ldr	r0, [pc, #24]	@ (8003964 <prvPortStartFirstTask+0x1c>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	b662      	cpsie	i
 8003954:	b661      	cpsie	f
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	df00      	svc	0
 8003960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003962:	bf00      	nop
 8003964:	e000ed08 	.word	0xe000ed08

08003968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800396e:	4b32      	ldr	r3, [pc, #200]	@ (8003a38 <xPortStartScheduler+0xd0>)
 8003970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	22ff      	movs	r2, #255	@ 0xff
 800397e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <xPortStartScheduler+0xd4>)
 8003994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003996:	4b2a      	ldr	r3, [pc, #168]	@ (8003a40 <xPortStartScheduler+0xd8>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800399c:	e009      	b.n	80039b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800399e:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4a26      	ldr	r2, [pc, #152]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d0ef      	beq.n	800399e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039be:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00b      	beq.n	80039e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039e2:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039ec:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039f4:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <xPortStartScheduler+0xd8>)
 80039f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a00:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <xPortStartScheduler+0xdc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0f      	ldr	r2, [pc, #60]	@ (8003a44 <xPortStartScheduler+0xdc>)
 8003a06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <xPortStartScheduler+0xdc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <xPortStartScheduler+0xdc>)
 8003a12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a18:	f000 f8b8 	bl	8003b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <xPortStartScheduler+0xe0>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a22:	f7ff ff91 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a26:	f001 fa0d 	bl	8004e44 <vTaskSwitchContext>
	prvTaskExitError();
 8003a2a:	f7ff ff49 	bl	80038c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	e000e400 	.word	0xe000e400
 8003a3c:	200016a0 	.word	0x200016a0
 8003a40:	200016a4 	.word	0x200016a4
 8003a44:	e000ed20 	.word	0xe000ed20
 8003a48:	20000010 	.word	0x20000010

08003a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	607b      	str	r3, [r7, #4]
}
 8003a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <vPortEnterCritical+0x58>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa4 <vPortEnterCritical+0x58>)
 8003a6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a70:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <vPortEnterCritical+0x58>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d110      	bne.n	8003a9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <vPortEnterCritical+0x5c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <vPortEnterCritical+0x4e>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <vPortEnterCritical+0x4a>
	}
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000010 	.word	0x20000010
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ab2:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <vPortExitCritical+0x50>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <vPortExitCritical+0x26>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <vPortExitCritical+0x50>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	4a08      	ldr	r2, [pc, #32]	@ (8003afc <vPortExitCritical+0x50>)
 8003ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003adc:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <vPortExitCritical+0x50>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <vPortExitCritical+0x44>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000010 	.word	0x20000010

08003b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b00:	f3ef 8009 	mrs	r0, PSP
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <pxCurrentTCBConst>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b10:	6010      	str	r0, [r2, #0]
 8003b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b1a:	f380 8811 	msr	BASEPRI, r0
 8003b1e:	f001 f991 	bl	8004e44 <vTaskSwitchContext>
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8811 	msr	BASEPRI, r0
 8003b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	6808      	ldr	r0, [r1, #0]
 8003b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b36:	f380 8809 	msr	PSP, r0
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	4770      	bx	lr

08003b40 <pxCurrentTCBConst>:
 8003b40:	200016e8 	.word	0x200016e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop

08003b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	607b      	str	r3, [r7, #4]
}
 8003b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b62:	f001 f8b5 	bl	8004cd0 <xTaskIncrementTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <SysTick_Handler+0x40>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f383 8811 	msr	BASEPRI, r3
}
 8003b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <vPortSetupTimerInterrupt+0x30>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <vPortSetupTimerInterrupt+0x34>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <vPortSetupTimerInterrupt+0x38>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a09      	ldr	r2, [pc, #36]	@ (8003bc8 <vPortSetupTimerInterrupt+0x3c>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <vPortSetupTimerInterrupt+0x40>)
 8003baa:	3b01      	subs	r3, #1
 8003bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bae:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <vPortSetupTimerInterrupt+0x30>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	e000e010 	.word	0xe000e010
 8003bc0:	e000e018 	.word	0xe000e018
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	10624dd3 	.word	0x10624dd3
 8003bcc:	e000e014 	.word	0xe000e014

08003bd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bd6:	f3ef 8305 	mrs	r3, IPSR
 8003bda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d915      	bls.n	8003c0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <vPortValidateInterruptPriority+0x70>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bec:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <vPortValidateInterruptPriority+0x74>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	7afa      	ldrb	r2, [r7, #11]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20b      	bcs.n	8003c0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	607b      	str	r3, [r7, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <vPortValidateInterruptPriority+0x78>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <vPortValidateInterruptPriority+0x7c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90b      	bls.n	8003c36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	603b      	str	r3, [r7, #0]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <vPortValidateInterruptPriority+0x62>
	}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	e000e3f0 	.word	0xe000e3f0
 8003c44:	200016a0 	.word	0x200016a0
 8003c48:	e000ed0c 	.word	0xe000ed0c
 8003c4c:	200016a4 	.word	0x200016a4

08003c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <xQueueGenericReset+0x2c>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60bb      	str	r3, [r7, #8]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c7c:	f7ff fee6 	bl	8003a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	3b01      	subs	r3, #1
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	22ff      	movs	r2, #255	@ 0xff
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	22ff      	movs	r2, #255	@ 0xff
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d114      	bne.n	8003cfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01a      	beq.n	8003d10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3310      	adds	r3, #16
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f964 	bl	8004fac <xTaskRemoveFromEventList>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <xQueueGenericReset+0xd0>)
 8003cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	e009      	b.n	8003d10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3310      	adds	r3, #16
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fd01 	bl	8003708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3324      	adds	r3, #36	@ 0x24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fcfc 	bl	8003708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d10:	f7ff fecc 	bl	8003aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d14:	2301      	movs	r3, #1
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <xQueueGenericCreateStatic+0x56>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <xQueueGenericCreateStatic+0x5a>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericCreateStatic+0x5c>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	623b      	str	r3, [r7, #32]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xQueueGenericCreateStatic+0x84>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueGenericCreateStatic+0x88>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueGenericCreateStatic+0x8a>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61fb      	str	r3, [r7, #28]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dca:	2348      	movs	r3, #72	@ 0x48
 8003dcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b48      	cmp	r3, #72	@ 0x48
 8003dd2:	d00b      	beq.n	8003dec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	61bb      	str	r3, [r7, #24]
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	e7fd      	b.n	8003de8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f840 	bl	8003e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3730      	adds	r7, #48	@ 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	@ 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	613b      	str	r3, [r7, #16]
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3348      	adds	r3, #72	@ 0x48
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fa69 	bl	8003330 <pvPortMalloc>
 8003e5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3348      	adds	r3, #72	@ 0x48
 8003e6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e78:	79fa      	ldrb	r2, [r7, #7]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f805 	bl	8003e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3720      	adds	r7, #32
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	69b8      	ldr	r0, [r7, #24]
 8003ec6:	f7ff fec3 	bl	8003c50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08e      	sub	sp, #56	@ 0x38
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <xQueueGenericSend+0x34>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <xQueueGenericSend+0x42>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <xQueueGenericSend+0x46>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <xQueueGenericSend+0x48>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <xQueueGenericSend+0x64>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d103      	bne.n	8003f46 <xQueueGenericSend+0x72>
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <xQueueGenericSend+0x76>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <xQueueGenericSend+0x78>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <xQueueGenericSend+0x94>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f68:	f001 f9e6 	bl	8005338 <xTaskGetSchedulerState>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <xQueueGenericSend+0xa4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xQueueGenericSend+0xa8>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <xQueueGenericSend+0xaa>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <xQueueGenericSend+0xc6>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61fb      	str	r3, [r7, #28]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f9a:	f7ff fd57 	bl	8003a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <xQueueGenericSend+0xdc>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d129      	bne.n	8004004 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fb6:	f000 fa0f 	bl	80043d8 <prvCopyDataToQueue>
 8003fba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	3324      	adds	r3, #36	@ 0x24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ffef 	bl	8004fac <xTaskRemoveFromEventList>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <xQueueGenericSend+0x200>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	e00a      	b.n	8003ffc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fec:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <xQueueGenericSend+0x200>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ffc:	f7ff fd56 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 8004000:	2301      	movs	r3, #1
 8004002:	e063      	b.n	80040cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400a:	f7ff fd4f 	bl	8003aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800400e:	2300      	movs	r3, #0
 8004010:	e05c      	b.n	80040cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f829 	bl	8005074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004026:	f7ff fd41 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402a:	f000 fd97 	bl	8004b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800402e:	f7ff fd0d 	bl	8003a4c <vPortEnterCritical>
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004038:	b25b      	sxtb	r3, r3
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800403e:	d103      	bne.n	8004048 <xQueueGenericSend+0x174>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404e:	b25b      	sxtb	r3, r3
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x18a>
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800405e:	f7ff fd25 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004062:	1d3a      	adds	r2, r7, #4
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f818 	bl	80050a0 <xTaskCheckForTimeOut>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d124      	bne.n	80040c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004076:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004078:	f000 faa6 	bl	80045c8 <prvIsQueueFull>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004084:	3310      	adds	r3, #16
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 ff3c 	bl	8004f08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004092:	f000 fa31 	bl	80044f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004096:	f000 fd6f 	bl	8004b78 <xTaskResumeAll>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f af7c 	bne.w	8003f9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040a2:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <xQueueGenericSend+0x200>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e772      	b.n	8003f9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b6:	f000 fa1f 	bl	80044f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ba:	f000 fd5d 	bl	8004b78 <xTaskResumeAll>
 80040be:	e76c      	b.n	8003f9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c2:	f000 fa19 	bl	80044f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040c6:	f000 fd57 	bl	8004b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3738      	adds	r7, #56	@ 0x38
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b090      	sub	sp, #64	@ 0x40
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <xQueueGenericSendFromISR+0x3e>
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueGenericSendFromISR+0x42>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueGenericSendFromISR+0x44>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d103      	bne.n	8004146 <xQueueGenericSendFromISR+0x6e>
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <xQueueGenericSendFromISR+0x72>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <xQueueGenericSendFromISR+0x74>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	623b      	str	r3, [r7, #32]
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004168:	f7ff fd32 	bl	8003bd0 <vPortValidateInterruptPriority>
	__asm volatile
 800416c:	f3ef 8211 	mrs	r2, BASEPRI
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004184:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004186:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <xQueueGenericSendFromISR+0xc2>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d12f      	bne.n	80041fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041b0:	f000 f912 	bl	80043d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041bc:	d112      	bne.n	80041e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c8:	3324      	adds	r3, #36	@ 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 feee 	bl	8004fac <xTaskRemoveFromEventList>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00e      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e007      	b.n	80041f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80041e8:	3301      	adds	r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	b25a      	sxtb	r2, r3
 80041ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041f4:	2301      	movs	r3, #1
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80041f8:	e001      	b.n	80041fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f383 8811 	msr	BASEPRI, r3
}
 8004208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800420a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800420c:	4618      	mov	r0, r3
 800420e:	3740      	adds	r7, #64	@ 0x40
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08c      	sub	sp, #48	@ 0x30
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004220:	2300      	movs	r3, #0
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <xQueueReceive+0x32>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	623b      	str	r3, [r7, #32]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <xQueueReceive+0x40>
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueReceive+0x44>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueReceive+0x46>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <xQueueReceive+0x62>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61fb      	str	r3, [r7, #28]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004276:	f001 f85f 	bl	8005338 <xTaskGetSchedulerState>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <xQueueReceive+0x72>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <xQueueReceive+0x76>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueReceive+0x78>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <xQueueReceive+0x94>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61bb      	str	r3, [r7, #24]
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042a8:	f7ff fbd0 	bl	8003a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01f      	beq.n	80042f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042bc:	f000 f8f6 	bl	80044ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	1e5a      	subs	r2, r3, #1
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	3310      	adds	r3, #16
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fe69 	bl	8004fac <xTaskRemoveFromEventList>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042e0:	4b3c      	ldr	r3, [pc, #240]	@ (80043d4 <xQueueReceive+0x1c0>)
 80042e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042f0:	f7ff fbdc 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e069      	b.n	80043cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042fe:	f7ff fbd5 	bl	8003aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004302:	2300      	movs	r3, #0
 8004304:	e062      	b.n	80043cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	4618      	mov	r0, r3
 8004312:	f000 feaf 	bl	8005074 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800431a:	f7ff fbc7 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800431e:	f000 fc1d 	bl	8004b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004322:	f7ff fb93 	bl	8003a4c <vPortEnterCritical>
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800432c:	b25b      	sxtb	r3, r3
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004332:	d103      	bne.n	800433c <xQueueReceive+0x128>
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004342:	b25b      	sxtb	r3, r3
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004348:	d103      	bne.n	8004352 <xQueueReceive+0x13e>
 800434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004352:	f7ff fbab 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004356:	1d3a      	adds	r2, r7, #4
 8004358:	f107 0310 	add.w	r3, r7, #16
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fe9e 	bl	80050a0 <xTaskCheckForTimeOut>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d123      	bne.n	80043b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800436a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800436c:	f000 f916 	bl	800459c <prvIsQueueEmpty>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d017      	beq.n	80043a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	3324      	adds	r3, #36	@ 0x24
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fdc2 	bl	8004f08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004386:	f000 f8b7 	bl	80044f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800438a:	f000 fbf5 	bl	8004b78 <xTaskResumeAll>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d189      	bne.n	80042a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004394:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <xQueueReceive+0x1c0>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	e780      	b.n	80042a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043a8:	f000 f8a6 	bl	80044f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ac:	f000 fbe4 	bl	8004b78 <xTaskResumeAll>
 80043b0:	e77a      	b.n	80042a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b4:	f000 f8a0 	bl	80044f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b8:	f000 fbde 	bl	8004b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043be:	f000 f8ed 	bl	800459c <prvIsQueueEmpty>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f43f af6f 	beq.w	80042a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	@ 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d14d      	bne.n	800449a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ffb6 	bl	8005374 <xTaskPriorityDisinherit>
 8004408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	e043      	b.n	800449a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d119      	bne.n	800444c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6858      	ldr	r0, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	f001 fcf2 	bl	8005e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	d32b      	bcc.n	800449a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	e026      	b.n	800449a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68d8      	ldr	r0, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	461a      	mov	r2, r3
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	f001 fcd8 	bl	8005e0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	425b      	negs	r3, r3
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d207      	bcs.n	8004488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	425b      	negs	r3, r3
 8004482:	441a      	add	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d105      	bne.n	800449a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044a2:	697b      	ldr	r3, [r7, #20]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	441a      	add	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d303      	bcc.n	80044e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	461a      	mov	r2, r3
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f001 fc8e 	bl	8005e0c <memcpy>
	}
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004500:	f7ff faa4 	bl	8003a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800450a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800450c:	e011      	b.n	8004532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d012      	beq.n	800453c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3324      	adds	r3, #36	@ 0x24
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fd46 	bl	8004fac <xTaskRemoveFromEventList>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004526:	f000 fe1f 	bl	8005168 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	3b01      	subs	r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	dce9      	bgt.n	800450e <prvUnlockQueue+0x16>
 800453a:	e000      	b.n	800453e <prvUnlockQueue+0x46>
					break;
 800453c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	22ff      	movs	r2, #255	@ 0xff
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004546:	f7ff fab1 	bl	8003aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800454a:	f7ff fa7f 	bl	8003a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004556:	e011      	b.n	800457c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3310      	adds	r3, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fd21 	bl	8004fac <xTaskRemoveFromEventList>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004570:	f000 fdfa 	bl	8005168 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004574:	7bbb      	ldrb	r3, [r7, #14]
 8004576:	3b01      	subs	r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800457c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004580:	2b00      	cmp	r3, #0
 8004582:	dce9      	bgt.n	8004558 <prvUnlockQueue+0x60>
 8004584:	e000      	b.n	8004588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	22ff      	movs	r2, #255	@ 0xff
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004590:	f7ff fa8c 	bl	8003aac <vPortExitCritical>
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045a4:	f7ff fa52 	bl	8003a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e001      	b.n	80045ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ba:	f7ff fa77 	bl	8003aac <vPortExitCritical>

	return xReturn;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045d0:	f7ff fa3c 	bl	8003a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d102      	bne.n	80045e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e001      	b.n	80045ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f7ff fa5f 	bl	8003aac <vPortExitCritical>

	return xReturn;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e014      	b.n	8004632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004608:	4a0e      	ldr	r2, [pc, #56]	@ (8004644 <vQueueAddToRegistry+0x4c>)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004614:	490b      	ldr	r1, [pc, #44]	@ (8004644 <vQueueAddToRegistry+0x4c>)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800461e:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <vQueueAddToRegistry+0x4c>)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800462a:	e006      	b.n	800463a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3301      	adds	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b07      	cmp	r3, #7
 8004636:	d9e7      	bls.n	8004608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004638:	bf00      	nop
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	200016a8 	.word	0x200016a8

08004648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004658:	f7ff f9f8 	bl	8003a4c <vPortEnterCritical>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004662:	b25b      	sxtb	r3, r3
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004668:	d103      	bne.n	8004672 <vQueueWaitForMessageRestricted+0x2a>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004678:	b25b      	sxtb	r3, r3
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800467e:	d103      	bne.n	8004688 <vQueueWaitForMessageRestricted+0x40>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004688:	f7ff fa10 	bl	8003aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	3324      	adds	r3, #36	@ 0x24
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fc59 	bl	8004f54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046a2:	6978      	ldr	r0, [r7, #20]
 80046a4:	f7ff ff28 	bl	80044f8 <prvUnlockQueue>
	}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	@ 0x38
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	623b      	str	r3, [r7, #32]
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10b      	bne.n	80046fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61fb      	str	r3, [r7, #28]
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	e7fd      	b.n	80046f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046fa:	23a0      	movs	r3, #160	@ 0xa0
 80046fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2ba0      	cmp	r3, #160	@ 0xa0
 8004702:	d00b      	beq.n	800471c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	61bb      	str	r3, [r7, #24]
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800471c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01e      	beq.n	8004762 <xTaskCreateStatic+0xb2>
 8004724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01b      	beq.n	8004762 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800472a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	2202      	movs	r2, #2
 8004738:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800473c:	2300      	movs	r3, #0
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	9302      	str	r3, [sp, #8]
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f851 	bl	80047fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800475a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800475c:	f000 f8ee 	bl	800493c <prvAddNewTaskToReadyList>
 8004760:	e001      	b.n	8004766 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004766:	697b      	ldr	r3, [r7, #20]
	}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	@ 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08c      	sub	sp, #48	@ 0x30
 8004774:	af04      	add	r7, sp, #16
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fdd3 	bl	8003330 <pvPortMalloc>
 800478a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004792:	20a0      	movs	r0, #160	@ 0xa0
 8004794:	f7fe fdcc 	bl	8003330 <pvPortMalloc>
 8004798:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a6:	e005      	b.n	80047b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047a8:	6978      	ldr	r0, [r7, #20]
 80047aa:	f7fe fe8f 	bl	80034cc <vPortFree>
 80047ae:	e001      	b.n	80047b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d017      	beq.n	80047ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	2300      	movs	r3, #0
 80047c6:	9303      	str	r3, [sp, #12]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f80f 	bl	80047fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047de:	69f8      	ldr	r0, [r7, #28]
 80047e0:	f000 f8ac 	bl	800493c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047e4:	2301      	movs	r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	e002      	b.n	80047f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047f0:	69bb      	ldr	r3, [r7, #24]
	}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004814:	3b01      	subs	r3, #1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f023 0307 	bic.w	r3, r3, #7
 8004822:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	617b      	str	r3, [r7, #20]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01f      	beq.n	800488c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e012      	b.n	8004878 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	7819      	ldrb	r1, [r3, #0]
 800485a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	3334      	adds	r3, #52	@ 0x34
 8004862:	460a      	mov	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d006      	beq.n	8004880 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3301      	adds	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d9e9      	bls.n	8004852 <prvInitialiseNewTask+0x56>
 800487e:	e000      	b.n	8004882 <prvInitialiseNewTask+0x86>
			{
				break;
 8004880:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800488a:	e003      	b.n	8004894 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	2b06      	cmp	r3, #6
 8004898:	d901      	bls.n	800489e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800489a:	2306      	movs	r3, #6
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2200      	movs	r2, #0
 80048ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe ff46 	bl	8003746 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048bc:	3318      	adds	r3, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe ff41 	bl	8003746 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	f1c3 0207 	rsb	r2, r3, #7
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	334c      	adds	r3, #76	@ 0x4c
 80048ee:	224c      	movs	r2, #76	@ 0x4c
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fa06 	bl	8005d04 <memset>
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004930 <prvInitialiseNewTask+0x134>)
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <prvInitialiseNewTask+0x138>)
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	4a0c      	ldr	r2, [pc, #48]	@ (8004938 <prvInitialiseNewTask+0x13c>)
 8004908:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	69b8      	ldr	r0, [r7, #24]
 8004910:	f7fe ffaa 	bl	8003868 <pxPortInitialiseStack>
 8004914:	4602      	mov	r2, r0
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004926:	bf00      	nop
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20001910 	.word	0x20001910
 8004934:	20001978 	.word	0x20001978
 8004938:	200019e0 	.word	0x200019e0

0800493c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004944:	f7ff f882 	bl	8003a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004948:	4b2a      	ldr	r3, [pc, #168]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800495a:	4a27      	ldr	r2, [pc, #156]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004960:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <prvAddNewTaskToReadyList+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d110      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004968:	f000 fc22 	bl	80051b0 <prvInitialiseTaskLists>
 800496c:	e00d      	b.n	800498a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d802      	bhi.n	800498a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <prvAddNewTaskToReadyList+0xc8>)
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <prvAddNewTaskToReadyList+0xcc>)
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fe fece 	bl	800375e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049c2:	f7ff f873 	bl	8003aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <prvAddNewTaskToReadyList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ce:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvAddNewTaskToReadyList+0xd0>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200017e8 	.word	0x200017e8
 80049f8:	200016e8 	.word	0x200016e8
 80049fc:	200017f4 	.word	0x200017f4
 8004a00:	20001804 	.word	0x20001804
 8004a04:	200017f0 	.word	0x200017f0
 8004a08:	200016ec 	.word	0x200016ec
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <vTaskDelay+0x64>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <vTaskDelay+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a42:	f000 f88b 	bl	8004b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a46:	2100      	movs	r1, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fd1b 	bl	8005484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a4e:	f000 f893 	bl	8004b78 <xTaskResumeAll>
 8004a52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <vTaskDelay+0x68>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20001810 	.word	0x20001810
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	@ 0x28
 8004a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a8a:	463a      	mov	r2, r7
 8004a8c:	1d39      	adds	r1, r7, #4
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fb ffbe 	bl	8000a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	9202      	str	r2, [sp, #8]
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	4924      	ldr	r1, [pc, #144]	@ (8004b3c <vTaskStartScheduler+0xc0>)
 8004aac:	4824      	ldr	r0, [pc, #144]	@ (8004b40 <vTaskStartScheduler+0xc4>)
 8004aae:	f7ff fdff 	bl	80046b0 <xTaskCreateStatic>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <vTaskStartScheduler+0xc8>)
 8004ab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ab8:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <vTaskStartScheduler+0xc8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e001      	b.n	8004aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ad0:	f000 fd3e 	bl	8005550 <xTimerCreateTimerTask>
 8004ad4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d11b      	bne.n	8004b14 <vTaskStartScheduler+0x98>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	613b      	str	r3, [r7, #16]
}
 8004aee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004af0:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <vTaskStartScheduler+0xcc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	334c      	adds	r3, #76	@ 0x4c
 8004af6:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <vTaskStartScheduler+0xd0>)
 8004af8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <vTaskStartScheduler+0xd4>)
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <vTaskStartScheduler+0xd8>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <vTaskStartScheduler+0xdc>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b0e:	f7fe ff2b 	bl	8003968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b12:	e00f      	b.n	8004b34 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b1a:	d10b      	bne.n	8004b34 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <vTaskStartScheduler+0xb4>
}
 8004b34:	bf00      	nop
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	08005fa8 	.word	0x08005fa8
 8004b40:	08005181 	.word	0x08005181
 8004b44:	2000180c 	.word	0x2000180c
 8004b48:	200016e8 	.word	0x200016e8
 8004b4c:	20000014 	.word	0x20000014
 8004b50:	20001808 	.word	0x20001808
 8004b54:	200017f4 	.word	0x200017f4
 8004b58:	200017ec 	.word	0x200017ec

08004b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <vTaskSuspendAll+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	4a03      	ldr	r2, [pc, #12]	@ (8004b74 <vTaskSuspendAll+0x18>)
 8004b68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20001810 	.word	0x20001810

08004b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b86:	4b42      	ldr	r3, [pc, #264]	@ (8004c90 <xTaskResumeAll+0x118>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	603b      	str	r3, [r7, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ba6:	f7fe ff51 	bl	8003a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004baa:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <xTaskResumeAll+0x118>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4a37      	ldr	r2, [pc, #220]	@ (8004c90 <xTaskResumeAll+0x118>)
 8004bb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb4:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <xTaskResumeAll+0x118>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d161      	bne.n	8004c80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bbc:	4b35      	ldr	r3, [pc, #212]	@ (8004c94 <xTaskResumeAll+0x11c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05d      	beq.n	8004c80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bc4:	e02e      	b.n	8004c24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc6:	4b34      	ldr	r3, [pc, #208]	@ (8004c98 <xTaskResumeAll+0x120>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe fe1e 	bl	8003814 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe fe19 	bl	8003814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be6:	2201      	movs	r2, #1
 8004be8:	409a      	lsls	r2, r3
 8004bea:	4b2c      	ldr	r3, [pc, #176]	@ (8004c9c <xTaskResumeAll+0x124>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <xTaskResumeAll+0x124>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a27      	ldr	r2, [pc, #156]	@ (8004ca0 <xTaskResumeAll+0x128>)
 8004c02:	441a      	add	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe fda7 	bl	800375e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c14:	4b23      	ldr	r3, [pc, #140]	@ (8004ca4 <xTaskResumeAll+0x12c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ca8 <xTaskResumeAll+0x130>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c24:	4b1c      	ldr	r3, [pc, #112]	@ (8004c98 <xTaskResumeAll+0x120>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1cc      	bne.n	8004bc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c32:	f000 fb61 	bl	80052f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c36:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <xTaskResumeAll+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c42:	f000 f845 	bl	8004cd0 <xTaskIncrementTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c4c:	4b16      	ldr	r3, [pc, #88]	@ (8004ca8 <xTaskResumeAll+0x130>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f1      	bne.n	8004c42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <xTaskResumeAll+0x134>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c64:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <xTaskResumeAll+0x130>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c70:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <xTaskResumeAll+0x138>)
 8004c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c80:	f7fe ff14 	bl	8003aac <vPortExitCritical>

	return xAlreadyYielded;
 8004c84:	68bb      	ldr	r3, [r7, #8]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20001810 	.word	0x20001810
 8004c94:	200017e8 	.word	0x200017e8
 8004c98:	200017a8 	.word	0x200017a8
 8004c9c:	200017f0 	.word	0x200017f0
 8004ca0:	200016ec 	.word	0x200016ec
 8004ca4:	200016e8 	.word	0x200016e8
 8004ca8:	200017fc 	.word	0x200017fc
 8004cac:	200017f8 	.word	0x200017f8
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cba:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <xTaskGetTickCount+0x18>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cc0:	687b      	ldr	r3, [r7, #4]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	200017ec 	.word	0x200017ec

08004cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cda:	4b4f      	ldr	r3, [pc, #316]	@ (8004e18 <xTaskIncrementTick+0x148>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 808f 	bne.w	8004e02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8004e1c <xTaskIncrementTick+0x14c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cec:	4a4b      	ldr	r2, [pc, #300]	@ (8004e1c <xTaskIncrementTick+0x14c>)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d121      	bne.n	8004d3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cf8:	4b49      	ldr	r3, [pc, #292]	@ (8004e20 <xTaskIncrementTick+0x150>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	603b      	str	r3, [r7, #0]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xTaskIncrementTick+0x46>
 8004d1a:	4b41      	ldr	r3, [pc, #260]	@ (8004e20 <xTaskIncrementTick+0x150>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	4b40      	ldr	r3, [pc, #256]	@ (8004e24 <xTaskIncrementTick+0x154>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a3e      	ldr	r2, [pc, #248]	@ (8004e20 <xTaskIncrementTick+0x150>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4a3e      	ldr	r2, [pc, #248]	@ (8004e24 <xTaskIncrementTick+0x154>)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e28 <xTaskIncrementTick+0x158>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a3c      	ldr	r2, [pc, #240]	@ (8004e28 <xTaskIncrementTick+0x158>)
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	f000 fade 	bl	80052f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <xTaskIncrementTick+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d348      	bcc.n	8004dd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d46:	4b36      	ldr	r3, [pc, #216]	@ (8004e20 <xTaskIncrementTick+0x150>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d50:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <xTaskIncrementTick+0x15c>)
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d56:	601a      	str	r2, [r3, #0]
					break;
 8004d58:	e03e      	b.n	8004dd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d5a:	4b31      	ldr	r3, [pc, #196]	@ (8004e20 <xTaskIncrementTick+0x150>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d203      	bcs.n	8004d7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d72:	4a2e      	ldr	r2, [pc, #184]	@ (8004e2c <xTaskIncrementTick+0x15c>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d78:	e02e      	b.n	8004dd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fd48 	bl	8003814 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	3318      	adds	r3, #24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fd3f 	bl	8003814 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <xTaskIncrementTick+0x160>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	4a22      	ldr	r2, [pc, #136]	@ (8004e30 <xTaskIncrementTick+0x160>)
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <xTaskIncrementTick+0x164>)
 8004db6:	441a      	add	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fe fccd 	bl	800375e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <xTaskIncrementTick+0x168>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3b9      	bcc.n	8004d46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd6:	e7b6      	b.n	8004d46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dd8:	4b17      	ldr	r3, [pc, #92]	@ (8004e38 <xTaskIncrementTick+0x168>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dde:	4915      	ldr	r1, [pc, #84]	@ (8004e34 <xTaskIncrementTick+0x164>)
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d901      	bls.n	8004df4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004df4:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <xTaskIncrementTick+0x16c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e004      	b.n	8004e0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e02:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <xTaskIncrementTick+0x170>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <xTaskIncrementTick+0x170>)
 8004e0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e0c:	697b      	ldr	r3, [r7, #20]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20001810 	.word	0x20001810
 8004e1c:	200017ec 	.word	0x200017ec
 8004e20:	200017a0 	.word	0x200017a0
 8004e24:	200017a4 	.word	0x200017a4
 8004e28:	20001800 	.word	0x20001800
 8004e2c:	20001808 	.word	0x20001808
 8004e30:	200017f0 	.word	0x200017f0
 8004e34:	200016ec 	.word	0x200016ec
 8004e38:	200016e8 	.word	0x200016e8
 8004e3c:	200017fc 	.word	0x200017fc
 8004e40:	200017f8 	.word	0x200017f8

08004e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e4a:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <vTaskSwitchContext+0xac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e52:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <vTaskSwitchContext+0xb0>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e58:	e045      	b.n	8004ee6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004e5a:	4b26      	ldr	r3, [pc, #152]	@ (8004ef4 <vTaskSwitchContext+0xb0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e60:	4b25      	ldr	r3, [pc, #148]	@ (8004ef8 <vTaskSwitchContext+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e6e:	7afb      	ldrb	r3, [r7, #11]
 8004e70:	f1c3 031f 	rsb	r3, r3, #31
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	4921      	ldr	r1, [pc, #132]	@ (8004efc <vTaskSwitchContext+0xb8>)
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	607b      	str	r3, [r7, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	e7fd      	b.n	8004e9e <vTaskSwitchContext+0x5a>
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <vTaskSwitchContext+0xb8>)
 8004eae:	4413      	add	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d104      	bne.n	8004ed2 <vTaskSwitchContext+0x8e>
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a09      	ldr	r2, [pc, #36]	@ (8004f00 <vTaskSwitchContext+0xbc>)
 8004eda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004edc:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <vTaskSwitchContext+0xbc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <vTaskSwitchContext+0xc0>)
 8004ee4:	6013      	str	r3, [r2, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	20001810 	.word	0x20001810
 8004ef4:	200017fc 	.word	0x200017fc
 8004ef8:	200017f0 	.word	0x200017f0
 8004efc:	200016ec 	.word	0x200016ec
 8004f00:	200016e8 	.word	0x200016e8
 8004f04:	20000014 	.word	0x20000014

08004f08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <vTaskPlaceOnEventList+0x48>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3318      	adds	r3, #24
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fe fc33 	bl	80037a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f3e:	2101      	movs	r1, #1
 8004f40:	6838      	ldr	r0, [r7, #0]
 8004f42:	f000 fa9f 	bl	8005484 <prvAddCurrentTaskToDelayedList>
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200016e8 	.word	0x200016e8

08004f54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	e7fd      	b.n	8004f7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3318      	adds	r3, #24
 8004f84:	4619      	mov	r1, r3
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7fe fbe9 	bl	800375e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68b8      	ldr	r0, [r7, #8]
 8004f9c:	f000 fa72 	bl	8005484 <prvAddCurrentTaskToDelayedList>
	}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200016e8 	.word	0x200016e8

08004fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60fb      	str	r3, [r7, #12]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3318      	adds	r3, #24
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fc18 	bl	8003814 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <xTaskRemoveFromEventList+0xb0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11c      	bne.n	8005026 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fc0f 	bl	8003814 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <xTaskRemoveFromEventList+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	4a16      	ldr	r2, [pc, #88]	@ (8005060 <xTaskRemoveFromEventList+0xb4>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a13      	ldr	r2, [pc, #76]	@ (8005064 <xTaskRemoveFromEventList+0xb8>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe fb9d 	bl	800375e <vListInsertEnd>
 8005024:	e005      	b.n	8005032 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3318      	adds	r3, #24
 800502a:	4619      	mov	r1, r3
 800502c:	480e      	ldr	r0, [pc, #56]	@ (8005068 <xTaskRemoveFromEventList+0xbc>)
 800502e:	f7fe fb96 	bl	800375e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <xTaskRemoveFromEventList+0xc0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	429a      	cmp	r2, r3
 800503e:	d905      	bls.n	800504c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005044:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <xTaskRemoveFromEventList+0xc4>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e001      	b.n	8005050 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20001810 	.word	0x20001810
 8005060:	200017f0 	.word	0x200017f0
 8005064:	200016ec 	.word	0x200016ec
 8005068:	200017a8 	.word	0x200017a8
 800506c:	200016e8 	.word	0x200016e8
 8005070:	200017fc 	.word	0x200017fc

08005074 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800507c:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <vTaskInternalSetTimeOutState+0x24>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <vTaskInternalSetTimeOutState+0x28>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20001800 	.word	0x20001800
 800509c:	200017ec 	.word	0x200017ec

080050a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	613b      	str	r3, [r7, #16]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80050e6:	f7fe fcb1 	bl	8003a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005160 <xTaskCheckForTimeOut+0xc0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005102:	d102      	bne.n	800510a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	e023      	b.n	8005152 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <xTaskCheckForTimeOut+0xc4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d007      	beq.n	8005126 <xTaskCheckForTimeOut+0x86>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e015      	b.n	8005152 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	429a      	cmp	r2, r3
 800512e:	d20b      	bcs.n	8005148 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ff99 	bl	8005074 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	e004      	b.n	8005152 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005152:	f7fe fcab 	bl	8003aac <vPortExitCritical>

	return xReturn;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200017ec 	.word	0x200017ec
 8005164:	20001800 	.word	0x20001800

08005168 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <vTaskMissedYield+0x14>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	200017fc 	.word	0x200017fc

08005180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005188:	f000 f852 	bl	8005230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <prvIdleTask+0x28>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d9f9      	bls.n	8005188 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005194:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <prvIdleTask+0x2c>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051a4:	e7f0      	b.n	8005188 <prvIdleTask+0x8>
 80051a6:	bf00      	nop
 80051a8:	200016ec 	.word	0x200016ec
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051b6:	2300      	movs	r3, #0
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	e00c      	b.n	80051d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <prvInitialiseTaskLists+0x60>)
 80051c8:	4413      	add	r3, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fa9c 	bl	8003708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3301      	adds	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b06      	cmp	r3, #6
 80051da:	d9ef      	bls.n	80051bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051dc:	480d      	ldr	r0, [pc, #52]	@ (8005214 <prvInitialiseTaskLists+0x64>)
 80051de:	f7fe fa93 	bl	8003708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051e2:	480d      	ldr	r0, [pc, #52]	@ (8005218 <prvInitialiseTaskLists+0x68>)
 80051e4:	f7fe fa90 	bl	8003708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051e8:	480c      	ldr	r0, [pc, #48]	@ (800521c <prvInitialiseTaskLists+0x6c>)
 80051ea:	f7fe fa8d 	bl	8003708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ee:	480c      	ldr	r0, [pc, #48]	@ (8005220 <prvInitialiseTaskLists+0x70>)
 80051f0:	f7fe fa8a 	bl	8003708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051f4:	480b      	ldr	r0, [pc, #44]	@ (8005224 <prvInitialiseTaskLists+0x74>)
 80051f6:	f7fe fa87 	bl	8003708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <prvInitialiseTaskLists+0x78>)
 80051fc:	4a05      	ldr	r2, [pc, #20]	@ (8005214 <prvInitialiseTaskLists+0x64>)
 80051fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005200:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <prvInitialiseTaskLists+0x7c>)
 8005202:	4a05      	ldr	r2, [pc, #20]	@ (8005218 <prvInitialiseTaskLists+0x68>)
 8005204:	601a      	str	r2, [r3, #0]
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200016ec 	.word	0x200016ec
 8005214:	20001778 	.word	0x20001778
 8005218:	2000178c 	.word	0x2000178c
 800521c:	200017a8 	.word	0x200017a8
 8005220:	200017bc 	.word	0x200017bc
 8005224:	200017d4 	.word	0x200017d4
 8005228:	200017a0 	.word	0x200017a0
 800522c:	200017a4 	.word	0x200017a4

08005230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005236:	e019      	b.n	800526c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005238:	f7fe fc08 	bl	8003a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523c:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <prvCheckTasksWaitingTermination+0x50>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe fae3 	bl	8003814 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <prvCheckTasksWaitingTermination+0x54>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a0b      	ldr	r2, [pc, #44]	@ (8005284 <prvCheckTasksWaitingTermination+0x54>)
 8005256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <prvCheckTasksWaitingTermination+0x58>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3b01      	subs	r3, #1
 800525e:	4a0a      	ldr	r2, [pc, #40]	@ (8005288 <prvCheckTasksWaitingTermination+0x58>)
 8005260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005262:	f7fe fc23 	bl	8003aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f810 	bl	800528c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <prvCheckTasksWaitingTermination+0x58>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e1      	bne.n	8005238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	200017bc 	.word	0x200017bc
 8005284:	200017e8 	.word	0x200017e8
 8005288:	200017d0 	.word	0x200017d0

0800528c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	334c      	adds	r3, #76	@ 0x4c
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fd3b 	bl	8005d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe f90d 	bl	80034cc <vPortFree>
				vPortFree( pxTCB );
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fe f90a 	bl	80034cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052b8:	e019      	b.n	80052ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d103      	bne.n	80052cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fe f901 	bl	80034cc <vPortFree>
	}
 80052ca:	e010      	b.n	80052ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d00b      	beq.n	80052ee <prvDeleteTCB+0x62>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <prvDeleteTCB+0x5e>
	}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <prvResetNextTaskUnblockTime+0x38>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <prvResetNextTaskUnblockTime+0x3c>)
 800530a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800530e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005310:	e008      	b.n	8005324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <prvResetNextTaskUnblockTime+0x38>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <prvResetNextTaskUnblockTime+0x3c>)
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200017a0 	.word	0x200017a0
 8005334:	20001808 	.word	0x20001808

08005338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <xTaskGetSchedulerState+0x34>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005346:	2301      	movs	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e008      	b.n	800535e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534c:	4b08      	ldr	r3, [pc, #32]	@ (8005370 <xTaskGetSchedulerState+0x38>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005354:	2302      	movs	r3, #2
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e001      	b.n	800535e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800535e:	687b      	ldr	r3, [r7, #4]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	200017f4 	.word	0x200017f4
 8005370:	20001810 	.word	0x20001810

08005374 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d070      	beq.n	800546c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800538a:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <xTaskPriorityDisinherit+0x104>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d00b      	beq.n	80053ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053de:	429a      	cmp	r2, r3
 80053e0:	d044      	beq.n	800546c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d140      	bne.n	800546c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fa10 	bl	8003814 <uxListRemove>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d115      	bne.n	8005426 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fe:	491f      	ldr	r1, [pc, #124]	@ (800547c <xTaskPriorityDisinherit+0x108>)
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xTaskPriorityDisinherit+0xb2>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <xTaskPriorityDisinherit+0x10c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	4a17      	ldr	r2, [pc, #92]	@ (8005480 <xTaskPriorityDisinherit+0x10c>)
 8005424:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	f1c3 0207 	rsb	r2, r3, #7
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	2201      	movs	r2, #1
 8005440:	409a      	lsls	r2, r3
 8005442:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <xTaskPriorityDisinherit+0x10c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4313      	orrs	r3, r2
 8005448:	4a0d      	ldr	r2, [pc, #52]	@ (8005480 <xTaskPriorityDisinherit+0x10c>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <xTaskPriorityDisinherit+0x108>)
 800545a:	441a      	add	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe f97b 	bl	800375e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800546c:	697b      	ldr	r3, [r7, #20]
	}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200016e8 	.word	0x200016e8
 800547c:	200016ec 	.word	0x200016ec
 8005480:	200017f0 	.word	0x200017f0

08005484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005494:	4b28      	ldr	r3, [pc, #160]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe f9ba 	bl	8003814 <uxListRemove>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054a6:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	2201      	movs	r2, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43da      	mvns	r2, r3
 80054b4:	4b21      	ldr	r3, [pc, #132]	@ (800553c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4013      	ands	r3, r2
 80054ba:	4a20      	ldr	r2, [pc, #128]	@ (800553c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c4:	d10a      	bne.n	80054dc <prvAddCurrentTaskToDelayedList+0x58>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	481a      	ldr	r0, [pc, #104]	@ (8005540 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054d6:	f7fe f942 	bl	800375e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054da:	e026      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054e4:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d209      	bcs.n	8005508 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f4:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7fe f94f 	bl	80037a4 <vListInsert>
}
 8005506:	e010      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <prvAddCurrentTaskToDelayedList+0xc4>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7fe f945 	bl	80037a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <prvAddCurrentTaskToDelayedList+0xc8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d202      	bcs.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005524:	4a09      	ldr	r2, [pc, #36]	@ (800554c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6013      	str	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200017ec 	.word	0x200017ec
 8005538:	200016e8 	.word	0x200016e8
 800553c:	200017f0 	.word	0x200017f0
 8005540:	200017d4 	.word	0x200017d4
 8005544:	200017a4 	.word	0x200017a4
 8005548:	200017a0 	.word	0x200017a0
 800554c:	20001808 	.word	0x20001808

08005550 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	@ 0x28
 8005554:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800555a:	f000 fb93 	bl	8005c84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800555e:	4b1d      	ldr	r3, [pc, #116]	@ (80055d4 <xTimerCreateTimerTask+0x84>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d021      	beq.n	80055aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800556e:	1d3a      	adds	r2, r7, #4
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4618      	mov	r0, r3
 800557a:	f7fb fa63 	bl	8000a44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	9202      	str	r2, [sp, #8]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	2302      	movs	r3, #2
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2300      	movs	r3, #0
 800558e:	460a      	mov	r2, r1
 8005590:	4911      	ldr	r1, [pc, #68]	@ (80055d8 <xTimerCreateTimerTask+0x88>)
 8005592:	4812      	ldr	r0, [pc, #72]	@ (80055dc <xTimerCreateTimerTask+0x8c>)
 8005594:	f7ff f88c 	bl	80046b0 <xTaskCreateStatic>
 8005598:	4603      	mov	r3, r0
 800559a:	4a11      	ldr	r2, [pc, #68]	@ (80055e0 <xTimerCreateTimerTask+0x90>)
 800559c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800559e:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <xTimerCreateTimerTask+0x90>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055a6:	2301      	movs	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	613b      	str	r3, [r7, #16]
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055c8:	697b      	ldr	r3, [r7, #20]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20001844 	.word	0x20001844
 80055d8:	08005fb0 	.word	0x08005fb0
 80055dc:	08005859 	.word	0x08005859
 80055e0:	20001848 	.word	0x20001848

080055e4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80055f2:	2028      	movs	r0, #40	@ 0x28
 80055f4:	f7fd fe9c 	bl	8003330 <pvPortMalloc>
 80055f8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f845 	bl	80056a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800561c:	697b      	ldr	r3, [r7, #20]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08a      	sub	sp, #40	@ 0x28
 800562a:	af02      	add	r7, sp, #8
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005634:	2328      	movs	r3, #40	@ 0x28
 8005636:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b28      	cmp	r3, #40	@ 0x28
 800563c:	d00b      	beq.n	8005656 <xTimerCreateStatic+0x30>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61bb      	str	r3, [r7, #24]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005656:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <xTimerCreateStatic+0x50>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f805 	bl	80056a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800569c:	69fb      	ldr	r3, [r7, #28]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	617b      	str	r3, [r7, #20]
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80056d8:	f000 fad4 	bl	8005c84 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe f824 	bl	8003746 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <xTimerGenericCommand+0x30>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	623b      	str	r3, [r7, #32]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005750:	4b19      	ldr	r3, [pc, #100]	@ (80057b8 <xTimerGenericCommand+0x98>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02a      	beq.n	80057ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b05      	cmp	r3, #5
 8005768:	dc18      	bgt.n	800579c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800576a:	f7ff fde5 	bl	8005338 <xTaskGetSchedulerState>
 800576e:	4603      	mov	r3, r0
 8005770:	2b02      	cmp	r3, #2
 8005772:	d109      	bne.n	8005788 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005774:	4b10      	ldr	r3, [pc, #64]	@ (80057b8 <xTimerGenericCommand+0x98>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	f107 0114 	add.w	r1, r7, #20
 800577c:	2300      	movs	r3, #0
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	f7fe fba8 	bl	8003ed4 <xQueueGenericSend>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24
 8005786:	e012      	b.n	80057ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <xTimerGenericCommand+0x98>)
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	f107 0114 	add.w	r1, r7, #20
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	f7fe fb9e 	bl	8003ed4 <xQueueGenericSend>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24
 800579a:	e008      	b.n	80057ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <xTimerGenericCommand+0x98>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	f107 0114 	add.w	r1, r7, #20
 80057a4:	2300      	movs	r3, #0
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	f7fe fc96 	bl	80040d8 <xQueueGenericSendFromISR>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	@ 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20001844 	.word	0x20001844

080057bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <prvProcessExpiredTimer+0x98>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f81d 	bl	8003814 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	18d1      	adds	r1, r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	6978      	ldr	r0, [r7, #20]
 80057f6:	f000 f8d3 	bl	80059a0 <prvInsertTimerInActiveList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d020      	beq.n	8005842 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	2100      	movs	r1, #0
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff ff88 	bl	8005720 <xTimerGenericCommand>
 8005810:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	4798      	blx	r3
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	2000183c 	.word	0x2000183c

08005858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f859 	bl	800591c <prvGetNextExpireTime>
 800586a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f805 	bl	8005880 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005876:	f000 f8d5 	bl	8005a24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800587a:	bf00      	nop
 800587c:	e7f0      	b.n	8005860 <prvTimerTask+0x8>
	...

08005880 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800588a:	f7ff f967 	bl	8004b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f864 	bl	8005960 <prvSampleTimeNow>
 8005898:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d130      	bne.n	8005902 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d806      	bhi.n	80058bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058ae:	f7ff f963 	bl	8004b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff81 	bl	80057bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058ba:	e024      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <prvProcessTimerOrBlockTask+0x90>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <prvProcessTimerOrBlockTask+0x50>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <prvProcessTimerOrBlockTask+0x52>
 80058d0:	2300      	movs	r3, #0
 80058d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <prvProcessTimerOrBlockTask+0x94>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f7fe feb1 	bl	8004648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058e6:	f7ff f947 	bl	8004b78 <xTaskResumeAll>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058f0:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <prvProcessTimerOrBlockTask+0x98>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
}
 8005900:	e001      	b.n	8005906 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005902:	f7ff f939 	bl	8004b78 <xTaskResumeAll>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20001840 	.word	0x20001840
 8005914:	20001844 	.word	0x20001844
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005924:	4b0d      	ldr	r3, [pc, #52]	@ (800595c <prvGetNextExpireTime+0x40>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <prvGetNextExpireTime+0x16>
 800592e:	2201      	movs	r2, #1
 8005930:	e000      	b.n	8005934 <prvGetNextExpireTime+0x18>
 8005932:	2200      	movs	r2, #0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <prvGetNextExpireTime+0x40>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	e001      	b.n	8005950 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	2000183c 	.word	0x2000183c

08005960 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005968:	f7ff f9a4 	bl	8004cb4 <xTaskGetTickCount>
 800596c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800596e:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <prvSampleTimeNow+0x3c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d205      	bcs.n	8005984 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005978:	f000 f91e 	bl	8005bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e002      	b.n	800598a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800598a:	4a04      	ldr	r2, [pc, #16]	@ (800599c <prvSampleTimeNow+0x3c>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2000184c 	.word	0x2000184c

080059a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d812      	bhi.n	80059ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e01b      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <prvInsertTimerInActiveList+0x7c>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fd fedd 	bl	80037a4 <vListInsert>
 80059ea:	e012      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d206      	bcs.n	8005a02 <prvInsertTimerInActiveList+0x62>
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e007      	b.n	8005a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a02:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <prvInsertTimerInActiveList+0x80>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7fd fec9 	bl	80037a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a12:	697b      	ldr	r3, [r7, #20]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20001840 	.word	0x20001840
 8005a20:	2000183c 	.word	0x2000183c

08005a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	@ 0x30
 8005a28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a2a:	e0b2      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f2c0 80af 	blt.w	8005b92 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fd fee5 	bl	8003814 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a4a:	1d3b      	adds	r3, r7, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff87 	bl	8005960 <prvSampleTimeNow>
 8005a52:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	f200 8098 	bhi.w	8005b8c <prvProcessReceivedCommands+0x168>
 8005a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <prvProcessReceivedCommands+0x40>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a8d 	.word	0x08005a8d
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005b03 	.word	0x08005b03
 8005a74:	08005b17 	.word	0x08005b17
 8005a78:	08005b63 	.word	0x08005b63
 8005a7c:	08005a8d 	.word	0x08005a8d
 8005a80:	08005a8d 	.word	0x08005a8d
 8005a84:	08005b03 	.word	0x08005b03
 8005a88:	08005b17 	.word	0x08005b17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	18d1      	adds	r1, r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aac:	f7ff ff78 	bl	80059a0 <prvInsertTimerInActiveList>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d06c      	beq.n	8005b90 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005abc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d061      	beq.n	8005b90 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	441a      	add	r2, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2100      	movs	r1, #0
 8005adc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ade:	f7ff fe1f 	bl	8005720 <xTimerGenericCommand>
 8005ae2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d152      	bne.n	8005b90 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	61bb      	str	r3, [r7, #24]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005b14:	e03d      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	617b      	str	r3, [r7, #20]
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	e7fd      	b.n	8005b4a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	18d1      	adds	r1, r2, r3
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b5c:	f7ff ff20 	bl	80059a0 <prvInsertTimerInActiveList>
					break;
 8005b60:	e017      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005b70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b72:	f7fd fcab 	bl	80034cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b76:	e00c      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005b8a:	e002      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <prvProcessReceivedCommands+0x16e>
					break;
 8005b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b92:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <prvProcessReceivedCommands+0x190>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f107 0108 	add.w	r1, r7, #8
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fb39 	bl	8004214 <xQueueReceive>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f47f af41 	bne.w	8005a2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	3728      	adds	r7, #40	@ 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20001844 	.word	0x20001844

08005bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bbe:	e049      	b.n	8005c54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bca:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fd fe1b 	bl	8003814 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02f      	beq.n	8005c54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90e      	bls.n	8005c24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c12:	4b1a      	ldr	r3, [pc, #104]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f7fd fdc1 	bl	80037a4 <vListInsert>
 8005c22:	e017      	b.n	8005c54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c24:	2300      	movs	r3, #0
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fd76 	bl	8005720 <xTimerGenericCommand>
 8005c34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	603b      	str	r3, [r7, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c54:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1b0      	bne.n	8005bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c5e:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c64:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <prvSwitchTimerLists+0xc8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <prvSwitchTimerLists+0xc4>)
 8005c6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c6c:	4a04      	ldr	r2, [pc, #16]	@ (8005c80 <prvSwitchTimerLists+0xc8>)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6013      	str	r3, [r2, #0]
}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2000183c 	.word	0x2000183c
 8005c80:	20001840 	.word	0x20001840

08005c84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c8a:	f7fd fedf 	bl	8003a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <prvCheckForValidListAndQueue+0x60>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d120      	bne.n	8005cd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c96:	4814      	ldr	r0, [pc, #80]	@ (8005ce8 <prvCheckForValidListAndQueue+0x64>)
 8005c98:	f7fd fd36 	bl	8003708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c9c:	4813      	ldr	r0, [pc, #76]	@ (8005cec <prvCheckForValidListAndQueue+0x68>)
 8005c9e:	f7fd fd33 	bl	8003708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <prvCheckForValidListAndQueue+0x6c>)
 8005ca4:	4a10      	ldr	r2, [pc, #64]	@ (8005ce8 <prvCheckForValidListAndQueue+0x64>)
 8005ca6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ca8:	4b12      	ldr	r3, [pc, #72]	@ (8005cf4 <prvCheckForValidListAndQueue+0x70>)
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <prvCheckForValidListAndQueue+0x68>)
 8005cac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <prvCheckForValidListAndQueue+0x74>)
 8005cb4:	4a11      	ldr	r2, [pc, #68]	@ (8005cfc <prvCheckForValidListAndQueue+0x78>)
 8005cb6:	210c      	movs	r1, #12
 8005cb8:	200a      	movs	r0, #10
 8005cba:	f7fe f833 	bl	8003d24 <xQueueGenericCreateStatic>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4a08      	ldr	r2, [pc, #32]	@ (8005ce4 <prvCheckForValidListAndQueue+0x60>)
 8005cc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005cc4:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <prvCheckForValidListAndQueue+0x60>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ccc:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <prvCheckForValidListAndQueue+0x60>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	490b      	ldr	r1, [pc, #44]	@ (8005d00 <prvCheckForValidListAndQueue+0x7c>)
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe fc90 	bl	80045f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd8:	f7fd fee8 	bl	8003aac <vPortExitCritical>
}
 8005cdc:	bf00      	nop
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20001844 	.word	0x20001844
 8005ce8:	20001814 	.word	0x20001814
 8005cec:	20001828 	.word	0x20001828
 8005cf0:	2000183c 	.word	0x2000183c
 8005cf4:	20001840 	.word	0x20001840
 8005cf8:	200018c8 	.word	0x200018c8
 8005cfc:	20001850 	.word	0x20001850
 8005d00:	08005fb8 	.word	0x08005fb8

08005d04 <memset>:
 8005d04:	4603      	mov	r3, r0
 8005d06:	4402      	add	r2, r0
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d100      	bne.n	8005d0e <memset+0xa>
 8005d0c:	4770      	bx	lr
 8005d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d12:	e7f9      	b.n	8005d08 <memset+0x4>

08005d14 <_reclaim_reent>:
 8005d14:	4b29      	ldr	r3, [pc, #164]	@ (8005dbc <_reclaim_reent+0xa8>)
 8005d16:	b570      	push	{r4, r5, r6, lr}
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4283      	cmp	r3, r0
 8005d1e:	d04b      	beq.n	8005db8 <_reclaim_reent+0xa4>
 8005d20:	69c3      	ldr	r3, [r0, #28]
 8005d22:	b1ab      	cbz	r3, 8005d50 <_reclaim_reent+0x3c>
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	b16b      	cbz	r3, 8005d44 <_reclaim_reent+0x30>
 8005d28:	2500      	movs	r5, #0
 8005d2a:	69e3      	ldr	r3, [r4, #28]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	5959      	ldr	r1, [r3, r5]
 8005d30:	2900      	cmp	r1, #0
 8005d32:	d13b      	bne.n	8005dac <_reclaim_reent+0x98>
 8005d34:	3504      	adds	r5, #4
 8005d36:	2d80      	cmp	r5, #128	@ 0x80
 8005d38:	d1f7      	bne.n	8005d2a <_reclaim_reent+0x16>
 8005d3a:	69e3      	ldr	r3, [r4, #28]
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	68d9      	ldr	r1, [r3, #12]
 8005d40:	f000 f872 	bl	8005e28 <_free_r>
 8005d44:	69e3      	ldr	r3, [r4, #28]
 8005d46:	6819      	ldr	r1, [r3, #0]
 8005d48:	b111      	cbz	r1, 8005d50 <_reclaim_reent+0x3c>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 f86c 	bl	8005e28 <_free_r>
 8005d50:	6961      	ldr	r1, [r4, #20]
 8005d52:	b111      	cbz	r1, 8005d5a <_reclaim_reent+0x46>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 f867 	bl	8005e28 <_free_r>
 8005d5a:	69e1      	ldr	r1, [r4, #28]
 8005d5c:	b111      	cbz	r1, 8005d64 <_reclaim_reent+0x50>
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f862 	bl	8005e28 <_free_r>
 8005d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d66:	b111      	cbz	r1, 8005d6e <_reclaim_reent+0x5a>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 f85d 	bl	8005e28 <_free_r>
 8005d6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d70:	b111      	cbz	r1, 8005d78 <_reclaim_reent+0x64>
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f858 	bl	8005e28 <_free_r>
 8005d78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005d7a:	b111      	cbz	r1, 8005d82 <_reclaim_reent+0x6e>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 f853 	bl	8005e28 <_free_r>
 8005d82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005d84:	b111      	cbz	r1, 8005d8c <_reclaim_reent+0x78>
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f84e 	bl	8005e28 <_free_r>
 8005d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005d8e:	b111      	cbz	r1, 8005d96 <_reclaim_reent+0x82>
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 f849 	bl	8005e28 <_free_r>
 8005d96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005d98:	b111      	cbz	r1, 8005da0 <_reclaim_reent+0x8c>
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 f844 	bl	8005e28 <_free_r>
 8005da0:	6a23      	ldr	r3, [r4, #32]
 8005da2:	b14b      	cbz	r3, 8005db8 <_reclaim_reent+0xa4>
 8005da4:	4620      	mov	r0, r4
 8005da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005daa:	4718      	bx	r3
 8005dac:	680e      	ldr	r6, [r1, #0]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f83a 	bl	8005e28 <_free_r>
 8005db4:	4631      	mov	r1, r6
 8005db6:	e7bb      	b.n	8005d30 <_reclaim_reent+0x1c>
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	bf00      	nop
 8005dbc:	20000014 	.word	0x20000014

08005dc0 <__libc_init_array>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	4d0c      	ldr	r5, [pc, #48]	@ (8005df8 <__libc_init_array+0x38>)
 8005dc6:	4c0d      	ldr	r4, [pc, #52]	@ (8005dfc <__libc_init_array+0x3c>)
 8005dc8:	1b64      	subs	r4, r4, r5
 8005dca:	10a4      	asrs	r4, r4, #2
 8005dcc:	42a6      	cmp	r6, r4
 8005dce:	d109      	bne.n	8005de4 <__libc_init_array+0x24>
 8005dd0:	f000 f87e 	bl	8005ed0 <_init>
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	4d0a      	ldr	r5, [pc, #40]	@ (8005e00 <__libc_init_array+0x40>)
 8005dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8005e04 <__libc_init_array+0x44>)
 8005dda:	1b64      	subs	r4, r4, r5
 8005ddc:	10a4      	asrs	r4, r4, #2
 8005dde:	42a6      	cmp	r6, r4
 8005de0:	d105      	bne.n	8005dee <__libc_init_array+0x2e>
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de8:	4798      	blx	r3
 8005dea:	3601      	adds	r6, #1
 8005dec:	e7ee      	b.n	8005dcc <__libc_init_array+0xc>
 8005dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df2:	4798      	blx	r3
 8005df4:	3601      	adds	r6, #1
 8005df6:	e7f2      	b.n	8005dde <__libc_init_array+0x1e>
 8005df8:	080060a8 	.word	0x080060a8
 8005dfc:	080060a8 	.word	0x080060a8
 8005e00:	080060a8 	.word	0x080060a8
 8005e04:	080060ac 	.word	0x080060ac

08005e08 <__retarget_lock_acquire_recursive>:
 8005e08:	4770      	bx	lr

08005e0a <__retarget_lock_release_recursive>:
 8005e0a:	4770      	bx	lr

08005e0c <memcpy>:
 8005e0c:	440a      	add	r2, r1
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005e14:	d100      	bne.n	8005e18 <memcpy+0xc>
 8005e16:	4770      	bx	lr
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e24:	d1f9      	bne.n	8005e1a <memcpy+0xe>
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <_free_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d040      	beq.n	8005eb2 <_free_r+0x8a>
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f0c      	subs	r4, r1, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfb8      	it	lt
 8005e3a:	18e4      	addlt	r4, r4, r3
 8005e3c:	f000 f83c 	bl	8005eb8 <__malloc_lock>
 8005e40:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb4 <_free_r+0x8c>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	b933      	cbnz	r3, 8005e54 <_free_r+0x2c>
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6014      	str	r4, [r2, #0]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e50:	f000 b838 	b.w	8005ec4 <__malloc_unlock>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d908      	bls.n	8005e6a <_free_r+0x42>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	1821      	adds	r1, r4, r0
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf01      	itttt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	1809      	addeq	r1, r1, r0
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	e7ed      	b.n	8005e46 <_free_r+0x1e>
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b10b      	cbz	r3, 8005e74 <_free_r+0x4c>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d9fa      	bls.n	8005e6a <_free_r+0x42>
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	1850      	adds	r0, r2, r1
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	d10b      	bne.n	8005e94 <_free_r+0x6c>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	4401      	add	r1, r0
 8005e80:	1850      	adds	r0, r2, r1
 8005e82:	4283      	cmp	r3, r0
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	d1e0      	bne.n	8005e4a <_free_r+0x22>
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4408      	add	r0, r1
 8005e8e:	6010      	str	r0, [r2, #0]
 8005e90:	6053      	str	r3, [r2, #4]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x22>
 8005e94:	d902      	bls.n	8005e9c <_free_r+0x74>
 8005e96:	230c      	movs	r3, #12
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	e7d6      	b.n	8005e4a <_free_r+0x22>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	1821      	adds	r1, r4, r0
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf01      	itttt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	1809      	addeq	r1, r1, r0
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	6054      	str	r4, [r2, #4]
 8005eb0:	e7cb      	b.n	8005e4a <_free_r+0x22>
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	20001a4c 	.word	0x20001a4c

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	@ (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bfa5 	b.w	8005e08 <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	20001a48 	.word	0x20001a48

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	@ (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff bfa0 	b.w	8005e0a <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	20001a48 	.word	0x20001a48

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
