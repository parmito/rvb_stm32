
rvb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007798  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080078a8  080078a8  000088a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007b14  08007b14  00008b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b1c  08007b1c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b1c  08007b1c  00008b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b20  08007b20  00008b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007b24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000060  08007b84  00009060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  08007b84  00009af0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152c2  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000422e  00000000  00000000  0001e34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00022580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da5  00000000  00000000  00023798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b400  00000000  00000000  0002453d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177d7  00000000  00000000  0003f93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6bd  00000000  00000000  00057114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e67d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000e6814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000eb458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007890 	.word	0x08007890

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007890 	.word	0x08007890

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//
//////////////////////////////////////////////

extern void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000168:	2014      	movs	r0, #20
 800016a:	f002 fd92 	bl	8002c92 <HAL_NVIC_DisableIRQ>
	HAL_ResumeTick();
 800016e:	f001 fe23 	bl	8001db8 <HAL_ResumeTick>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000172:	4b0b      	ldr	r3, [pc, #44]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 8000178:	4b09      	ldr	r3, [pc, #36]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800017a:	2201      	movs	r2, #1
 800017c:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_WAKEUP;
 800017e:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000180:	2206      	movs	r2, #6
 8000182:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
    xQueueGenericSendFromISR(xQueueAppCAN, &stAppCANMsg, 0,0);
 800018a:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800018c:	6818      	ldr	r0, [r3, #0]
 800018e:	2300      	movs	r3, #0
 8000190:	2200      	movs	r2, #0
 8000192:	4903      	ldr	r1, [pc, #12]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000194:	f005 f860 	bl	8005258 <xQueueGenericSendFromISR>


}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	20000088 	.word	0x20000088

080001a8 <TaskAppCAN_getQueue>:
//              TaskAppCAN_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppCAN_getQueue()
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	return &xQueueAppCAN;
 80001ac:	4b02      	ldr	r3, [pc, #8]	@ (80001b8 <TaskAppCAN_getQueue+0x10>)
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	20000088 	.word	0x20000088

080001bc <TaskAppCAN_Entry>:
//              TaskAppCAN_Entry
//
//
//////////////////////////////////////////////
void TaskAppCAN_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	6039      	str	r1, [r7, #0]
    xQueueAppCAN = xQueue;
 80001c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000204 <TaskAppCAN_Entry+0x48>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6013      	str	r3, [r2, #0]
    xTimerAppCAN = xTimer;
 80001cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <TaskAppCAN_Entry+0x4c>)
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	6013      	str	r3, [r2, #0]

    hCAN = hGet_CAN_Handler();
 80001d2:	f000 fda3 	bl	8000d1c <hGet_CAN_Handler>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	@ (800020c <TaskAppCAN_Entry+0x50>)
 80001da:	6013      	str	r3, [r2, #0]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 80001e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 80001ee:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <TaskAppCAN_Entry+0x48>)
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	2300      	movs	r3, #0
 80001f4:	2200      	movs	r2, #0
 80001f6:	4906      	ldr	r1, [pc, #24]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001f8:	f004 ff2c 	bl	8005054 <xQueueGenericSend>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000088 	.word	0x20000088
 8000208:	2000008c 	.word	0x2000008c
 800020c:	20000098 	.word	0x20000098
 8000210:	2000007c 	.word	0x2000007c

08000214 <TaskAppCAN_Start>:
//              TaskAppCAN_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_Start(sMessageType *psMessage)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800021c:	2301      	movs	r3, #1
 800021e:	73fb      	strb	r3, [r7, #15]

    (void)stHAL_CAN_FilterConfig();
 8000220:	f000 fd86 	bl	8000d30 <stHAL_CAN_FilterConfig>
    (void)HAL_CAN_Start(hCAN);
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <TaskAppCAN_Start+0x3c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f001 ffe2 	bl	80021f2 <HAL_CAN_Start>

    pstQueueAppSerial  = TaskAppSerial_getQueue();
 800022e:	f000 fa77 	bl	8000720 <TaskAppSerial_getQueue>
 8000232:	4603      	mov	r3, r0
 8000234:	4a07      	ldr	r2, [pc, #28]	@ (8000254 <TaskAppCAN_Start+0x40>)
 8000236:	6013      	str	r3, [r2, #0]
    pstQueueIO = TaskIO_getQueue();
 8000238:	f000 fbbe 	bl	80009b8 <TaskIO_getQueue>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <TaskAppCAN_Start+0x44>)
 8000242:	601a      	str	r2, [r3, #0]
    /*u16SizeSerialTxBuffer =  TaskAppSerial_getTxBuffer(&u8SerialTxBuffer);
    pu8SerialTxBuffer = &u8SerialTxBuffer;*/
	return boError;
 8000244:	7bfb      	ldrb	r3, [r7, #15]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000098 	.word	0x20000098
 8000254:	20000090 	.word	0x20000090
 8000258:	20000094 	.word	0x20000094

0800025c <TaskAppCAN_ReceiveEvent>:
//              TaskAppCAN_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_ReceiveEvent(sMessageType *psMessage)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000264:	2301      	movs	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]

    tstFrameCAN *pstFrameCAN = (tstFrameCAN*)(psMessage->pcMessageData);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	60bb      	str	r3, [r7, #8]
        HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
        HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
    	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    }*/

    memset((char*)u8SerialTxBuffer,0x00,sizeof(u8SerialTxBuffer));
 800026e:	2240      	movs	r2, #64	@ 0x40
 8000270:	2100      	movs	r1, #0
 8000272:	4826      	ldr	r0, [pc, #152]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000274:	f006 fe26 	bl	8006ec4 <memset>
    sprintf((char*)&u8SerialTxBuffer[0],"%8X    ",(uint32_t)pstFrameCAN->u32DID);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4924      	ldr	r1, [pc, #144]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb4>)
 8000280:	4822      	ldr	r0, [pc, #136]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000282:	f006 fdff 	bl	8006e84 <siprintf>
    size_t u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 8000286:	4821      	ldr	r0, [pc, #132]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000288:	f7ff ff62 	bl	8000150 <strlen>
 800028c:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	e012      	b.n	80002ba <TaskAppCAN_ReceiveEvent+0x5e>
    {
    	sprintf((char*)&u8SerialTxBuffer[u16Len],"%02X ",(uint16_t)pstFrameCAN->u8Data[u32]);
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000298:	1898      	adds	r0, r3, r2
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	4413      	add	r3, r2
 80002a0:	3308      	adds	r3, #8
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	491b      	ldr	r1, [pc, #108]	@ (8000314 <TaskAppCAN_ReceiveEvent+0xb8>)
 80002a8:	f006 fdec 	bl	8006e84 <siprintf>
    	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002ac:	4817      	ldr	r0, [pc, #92]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	3301      	adds	r3, #1
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d3e7      	bcc.n	8000294 <TaskAppCAN_ReceiveEvent+0x38>
    }
	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002c4:	4811      	ldr	r0, [pc, #68]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002c6:	f7ff ff43 	bl	8000150 <strlen>
 80002ca:	6178      	str	r0, [r7, #20]
	sprintf((char*)&u8SerialTxBuffer[u16Len],"\r\n");
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002d0:	4413      	add	r3, r2
 80002d2:	4911      	ldr	r1, [pc, #68]	@ (8000318 <TaskAppCAN_ReceiveEvent+0xbc>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f006 fdd5 	bl	8006e84 <siprintf>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPSERIAL;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e8:	2203      	movs	r2, #3
 80002ea:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = (char*)&u8SerialTxBuffer[0];
 80002ec:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002ee:	4a07      	ldr	r2, [pc, #28]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002f0:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6818      	ldr	r0, [r3, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2200      	movs	r2, #0
 80002fc:	4907      	ldr	r1, [pc, #28]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002fe:	f004 fea9 	bl	8005054 <xQueueGenericSend>

	return boError;
 8000302:	7bfb      	ldrb	r3, [r7, #15]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000013c 	.word	0x2000013c
 8000310:	080078a8 	.word	0x080078a8
 8000314:	080078b0 	.word	0x080078b0
 8000318:	080078b8 	.word	0x080078b8
 800031c:	2000007c 	.word	0x2000007c
 8000320:	20000090 	.word	0x20000090

08000324 <TaskAppCAN_TransmitEvent>:
//              TaskAppCAN_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_TransmitEvent(sMessageType *psMessage)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800032c:	2301      	movs	r3, #1
 800032e:	73fb      	strb	r3, [r7, #15]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
    strcpy((char*)pu8SerialTxBuffer,"SURDAO\r\n");
    stAppCANMsg.pcMessageData = (char*)pu8SerialTxBuffer;
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);*/

	return boError;
 8000330:	7bfb      	ldrb	r3, [r7, #15]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <TaskAppCAN_PSEvent>:
//             TaskAppCAN_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_PSEvent(sMessageType *psMessage)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000344:	2301      	movs	r3, #1
 8000346:	73fb      	strb	r3, [r7, #15]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 8000350:	2200      	movs	r2, #0
 8000352:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_PS;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 8000356:	2205      	movs	r2, #5
 8000358:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueIO, &stAppCANMsg, 0,0);
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <TaskAppCAN_PSEvent+0x44>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	2200      	movs	r2, #0
 800036a:	4904      	ldr	r1, [pc, #16]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800036c:	f004 fe72 	bl	8005054 <xQueueGenericSend>

	return boError;
 8000370:	7bfb      	ldrb	r3, [r7, #15]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000007c 	.word	0x2000007c
 8000380:	20000094 	.word	0x20000094

08000384 <TaskAppCAN_SleepEvent>:
//             TaskAppCAN_SleepEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_SleepEvent(sMessageType *psMessage)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08c      	sub	sp, #48	@ 0x30
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800038c:	2301      	movs	r3, #1
 800038e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	HAL_SuspendTick();
 8000392:	f001 fd03 	bl	8001d9c <HAL_SuspendTick>
	/*Configure GPIO pin Output Level */

	uint16_t VirtAddVarTab[NB_OF_VAR];
	uint16_t VarDataTab[NB_OF_VAR] = {'C','a','r','l','o','s'};
 8000396:	4a5f      	ldr	r2, [pc, #380]	@ (8000514 <TaskAppCAN_SleepEvent+0x190>)
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	ca07      	ldmia	r2, {r0, r1, r2}
 800039e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t VarDataTabRead[NB_OF_VAR];
	uint16_t VarIndex,VarDataTmp = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	857b      	strh	r3, [r7, #42]	@ 0x2a

	HAL_FLASH_Unlock();
 80003a6:	f002 fcff 	bl	8002da8 <HAL_FLASH_Unlock>

	/* EEPROM Init */
	if( EE_Init() != HAL_OK)
 80003aa:	f000 fcdd 	bl	8000d68 <EE_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <TaskAppCAN_SleepEvent+0x34>
	{
		Error_Handler();
 80003b4:	f001 faf5 	bl	80019a2 <Error_Handler>
	}

	/*EE_Format();*/

	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 80003b8:	2301      	movs	r3, #1
 80003ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80003bc:	e00a      	b.n	80003d4 <TaskAppCAN_SleepEvent+0x50>
	{
		VirtAddVarTab[VarIndex-1] = VarIndex;
 80003be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003c0:	3b01      	subs	r3, #1
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	3330      	adds	r3, #48	@ 0x30
 80003c6:	443b      	add	r3, r7
 80003c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80003ca:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 80003ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003d0:	3301      	adds	r3, #1
 80003d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80003d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003d6:	2b06      	cmp	r3, #6
 80003d8:	d9f1      	bls.n	80003be <TaskAppCAN_SleepEvent+0x3a>
	}

	// Fill EEPROM variables addresses

	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 80003da:	2301      	movs	r3, #1
 80003dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80003de:	e00a      	b.n	80003f6 <TaskAppCAN_SleepEvent+0x72>
	{
		VirtAddVarTab[VarIndex-1] = VarIndex;
 80003e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003e2:	3b01      	subs	r3, #1
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	3330      	adds	r3, #48	@ 0x30
 80003e8:	443b      	add	r3, r7
 80003ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80003ec:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 80003f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003f2:	3301      	adds	r3, #1
 80003f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80003f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003f8:	2b06      	cmp	r3, #6
 80003fa:	d9f1      	bls.n	80003e0 <TaskAppCAN_SleepEvent+0x5c>
	}
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000400:	e014      	b.n	800042c <TaskAppCAN_SleepEvent+0xa8>
	{
		if((EE_ReadVariable(VirtAddVarTab[VarIndex],  &VarDataTabRead[VarIndex])) != HAL_OK)
 8000402:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	3330      	adds	r3, #48	@ 0x30
 8000408:	443b      	add	r3, r7
 800040a:	f833 0c14 	ldrh.w	r0, [r3, #-20]
 800040e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000410:	f107 0208 	add.w	r2, r7, #8
 8000414:	4413      	add	r3, r2
 8000416:	4619      	mov	r1, r3
 8000418:	f000 feaa 	bl	8001170 <EE_ReadVariable>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <TaskAppCAN_SleepEvent+0xa2>
		{
			Error_Handler();
 8000422:	f001 fabe 	bl	80019a2 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 8000426:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000428:	3301      	adds	r3, #1
 800042a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800042c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800042e:	2b05      	cmp	r3, #5
 8000430:	d9e7      	bls.n	8000402 <TaskAppCAN_SleepEvent+0x7e>
		}
	}


	// Fill EEPROM variables addresses
	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 8000432:	2301      	movs	r3, #1
 8000434:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000436:	e00a      	b.n	800044e <TaskAppCAN_SleepEvent+0xca>
	{
		VirtAddVarTab[VarIndex-1] = VarIndex;
 8000438:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800043a:	3b01      	subs	r3, #1
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	3330      	adds	r3, #48	@ 0x30
 8000440:	443b      	add	r3, r7
 8000442:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000444:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++)
 8000448:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800044a:	3301      	adds	r3, #1
 800044c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800044e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000450:	2b06      	cmp	r3, #6
 8000452:	d9f1      	bls.n	8000438 <TaskAppCAN_SleepEvent+0xb4>
	}

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 8000454:	2300      	movs	r3, #0
 8000456:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000458:	e017      	b.n	800048a <TaskAppCAN_SleepEvent+0x106>
	{
		/* Sequence 1 */
		if((EE_WriteVariable(VirtAddVarTab[VarIndex],  VarDataTab[VarIndex])) != HAL_OK)
 800045a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	3330      	adds	r3, #48	@ 0x30
 8000460:	443b      	add	r3, r7
 8000462:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8000466:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	3330      	adds	r3, #48	@ 0x30
 800046c:	443b      	add	r3, r7
 800046e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000472:	4619      	mov	r1, r3
 8000474:	4610      	mov	r0, r2
 8000476:	f000 fec5 	bl	8001204 <EE_WriteVariable>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <TaskAppCAN_SleepEvent+0x100>
		{
			Error_Handler();
 8000480:	f001 fa8f 	bl	80019a2 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 8000484:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000486:	3301      	adds	r3, #1
 8000488:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800048a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800048c:	2b05      	cmp	r3, #5
 800048e:	d9e4      	bls.n	800045a <TaskAppCAN_SleepEvent+0xd6>
		}
	}

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 8000490:	2300      	movs	r3, #0
 8000492:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000494:	e014      	b.n	80004c0 <TaskAppCAN_SleepEvent+0x13c>
	{
		if((EE_ReadVariable(VirtAddVarTab[VarIndex],  &VarDataTabRead[VarIndex])) != HAL_OK)
 8000496:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	3330      	adds	r3, #48	@ 0x30
 800049c:	443b      	add	r3, r7
 800049e:	f833 0c14 	ldrh.w	r0, [r3, #-20]
 80004a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80004a4:	f107 0208 	add.w	r2, r7, #8
 80004a8:	4413      	add	r3, r2
 80004aa:	4619      	mov	r1, r3
 80004ac:	f000 fe60 	bl	8001170 <EE_ReadVariable>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <TaskAppCAN_SleepEvent+0x136>
		{
			Error_Handler();
 80004b6:	f001 fa74 	bl	80019a2 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++)
 80004ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80004bc:	3301      	adds	r3, #1
 80004be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80004c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80004c2:	2b05      	cmp	r3, #5
 80004c4:	d9e7      	bls.n	8000496 <TaskAppCAN_SleepEvent+0x112>
		}
	}


	HAL_CAN_Stop(hCAN);
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <TaskAppCAN_SleepEvent+0x194>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fed5 	bl	800227a <HAL_CAN_Stop>
	HAL_CAN_MspDeInit(hCAN);
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <TaskAppCAN_SleepEvent+0x194>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fc03 	bl	8000ce0 <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(hCAN);
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <TaskAppCAN_SleepEvent+0x194>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fb98 	bl	8000c14 <HAL_CAN_MspInit>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004e4:	2014      	movs	r0, #20
 80004e6:	f002 fbc6 	bl	8002c76 <HAL_NVIC_EnableIRQ>
	HAL_CAN_Start(hCAN);
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <TaskAppCAN_SleepEvent+0x194>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fe7f 	bl	80021f2 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <TaskAppCAN_SleepEvent+0x194>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f84e 	bl	800259c <HAL_CAN_ActivateNotification>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000500:	2101      	movs	r1, #1
 8000502:	2000      	movs	r0, #0
 8000504:	f003 f818 	bl	8003538 <HAL_PWR_EnterSLEEPMode>

	return boError;
 8000508:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 800050c:	4618      	mov	r0, r3
 800050e:	3730      	adds	r7, #48	@ 0x30
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	080078bc 	.word	0x080078bc
 8000518:	20000098 	.word	0x20000098

0800051c <TaskAppCAN_WakeUp>:
//             TaskAppCAN_WakeUp
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_WakeUp(sMessageType *psMessage)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_WAKEUP;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 8000536:	2206      	movs	r2, #6
 8000538:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueIO, &stAppCANMsg, 0,0);
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <TaskAppCAN_WakeUp+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2200      	movs	r2, #0
 800054a:	490c      	ldr	r1, [pc, #48]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 800054c:	f004 fd82 	bl	8005054 <xQueueGenericSend>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 8000558:	2201      	movs	r2, #1
 800055a:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 800055e:	2201      	movs	r2, #1
 8000560:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <TaskAppCAN_WakeUp+0x68>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2200      	movs	r2, #0
 800056a:	4904      	ldr	r1, [pc, #16]	@ (800057c <TaskAppCAN_WakeUp+0x60>)
 800056c:	f004 fd72 	bl	8005054 <xQueueGenericSend>

	return boError;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000007c 	.word	0x2000007c
 8000580:	20000094 	.word	0x20000094
 8000584:	20000088 	.word	0x20000088

08000588 <TaskAppCAN_IgnoreEvent>:
//              TaskAppCAN_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_IgnoreEvent(sMessageType *psMessage)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000594:	7bfb      	ldrb	r3, [r7, #15]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <vTaskAppCAN>:
};

/*static uint8_t u8TogglePin = 0;*/

void vTaskAppCAN(void const * argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	if( HAL_CAN_GetRxFifoFillLevel(hCAN, CAN_RX_FIFO0) > 0)
 80005a8:	4b54      	ldr	r3, [pc, #336]	@ (80006fc <vTaskAppCAN+0x15c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 ffcd 	bl	800254e <HAL_CAN_GetRxFifoFillLevel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d066      	beq.n	8000688 <vTaskAppCAN+0xe8>
	{
		u16TimeToSleep = 0;
 80005ba:	4b51      	ldr	r3, [pc, #324]	@ (8000700 <vTaskAppCAN+0x160>)
 80005bc:	2200      	movs	r2, #0
 80005be:	801a      	strh	r2, [r3, #0]

		memset(&pRxHeader,0x00,sizeof(CAN_RxHeaderTypeDef));
 80005c0:	221c      	movs	r2, #28
 80005c2:	2100      	movs	r1, #0
 80005c4:	484f      	ldr	r0, [pc, #316]	@ (8000704 <vTaskAppCAN+0x164>)
 80005c6:	f006 fc7d 	bl	8006ec4 <memset>
		memset(stFrameRxCAN[u8FifoRxCAN].u8Data,0xFF,sizeof(tstFrameCAN));
 80005ca:	4b4f      	ldr	r3, [pc, #316]	@ (8000708 <vTaskAppCAN+0x168>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	3308      	adds	r3, #8
 80005d2:	4a4e      	ldr	r2, [pc, #312]	@ (800070c <vTaskAppCAN+0x16c>)
 80005d4:	4413      	add	r3, r2
 80005d6:	2210      	movs	r2, #16
 80005d8:	21ff      	movs	r1, #255	@ 0xff
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 fc72 	bl	8006ec4 <memset>

		if(HAL_CAN_GetRxMessage(hCAN, CAN_RX_FIFO0,&pRxHeader,stFrameRxCAN[u8FifoRxCAN].u8Data) == HAL_OK)
 80005e0:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <vTaskAppCAN+0x15c>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	4b48      	ldr	r3, [pc, #288]	@ (8000708 <vTaskAppCAN+0x168>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	3308      	adds	r3, #8
 80005ec:	4a47      	ldr	r2, [pc, #284]	@ (800070c <vTaskAppCAN+0x16c>)
 80005ee:	4413      	add	r3, r2
 80005f0:	4a44      	ldr	r2, [pc, #272]	@ (8000704 <vTaskAppCAN+0x164>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 fe8a 	bl	800230c <HAL_CAN_GetRxMessage>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d165      	bne.n	80006ca <vTaskAppCAN+0x12a>
		{
			stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.StdId;
 80005fe:	4b42      	ldr	r3, [pc, #264]	@ (8000708 <vTaskAppCAN+0x168>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <vTaskAppCAN+0x164>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4940      	ldr	r1, [pc, #256]	@ (800070c <vTaskAppCAN+0x16c>)
 800060a:	0103      	lsls	r3, r0, #4
 800060c:	440b      	add	r3, r1
 800060e:	601a      	str	r2, [r3, #0]
			if(pRxHeader.ExtId != 0)
 8000610:	4b3c      	ldr	r3, [pc, #240]	@ (8000704 <vTaskAppCAN+0x164>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <vTaskAppCAN+0x8a>
			{
				stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.ExtId;
 8000618:	4b3b      	ldr	r3, [pc, #236]	@ (8000708 <vTaskAppCAN+0x168>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	4b39      	ldr	r3, [pc, #228]	@ (8000704 <vTaskAppCAN+0x164>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	493a      	ldr	r1, [pc, #232]	@ (800070c <vTaskAppCAN+0x16c>)
 8000624:	0103      	lsls	r3, r0, #4
 8000626:	440b      	add	r3, r1
 8000628:	601a      	str	r2, [r3, #0]
			}
			stFrameRxCAN[u8FifoRxCAN].u32DLC = pRxHeader.DLC;
 800062a:	4b37      	ldr	r3, [pc, #220]	@ (8000708 <vTaskAppCAN+0x168>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <vTaskAppCAN+0x164>)
 8000632:	691a      	ldr	r2, [r3, #16]
 8000634:	4935      	ldr	r1, [pc, #212]	@ (800070c <vTaskAppCAN+0x16c>)
 8000636:	0103      	lsls	r3, r0, #4
 8000638:	440b      	add	r3, r1
 800063a:	3304      	adds	r3, #4
 800063c:	601a      	str	r2, [r3, #0]

			stAppCANMsg.ucSrc = SRC_APPCAN;
 800063e:	4b34      	ldr	r3, [pc, #208]	@ (8000710 <vTaskAppCAN+0x170>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 8000644:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <vTaskAppCAN+0x170>)
 8000646:	2201      	movs	r2, #1
 8000648:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_RX;
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <vTaskAppCAN+0x170>)
 800064c:	2202      	movs	r2, #2
 800064e:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = (char*)&stFrameRxCAN[u8FifoRxCAN];
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <vTaskAppCAN+0x168>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4a2d      	ldr	r2, [pc, #180]	@ (800070c <vTaskAppCAN+0x16c>)
 8000658:	4413      	add	r3, r2
 800065a:	4a2d      	ldr	r2, [pc, #180]	@ (8000710 <vTaskAppCAN+0x170>)
 800065c:	6053      	str	r3, [r2, #4]
			if(++u8FifoRxCAN >= FIFO_SIZE)
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <vTaskAppCAN+0x168>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <vTaskAppCAN+0x168>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <vTaskAppCAN+0x168>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b07      	cmp	r3, #7
 8000670:	d902      	bls.n	8000678 <vTaskAppCAN+0xd8>
			{
				u8FifoRxCAN = 0;
 8000672:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <vTaskAppCAN+0x168>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			}
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <vTaskAppCAN+0x174>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	2200      	movs	r2, #0
 8000680:	4923      	ldr	r1, [pc, #140]	@ (8000710 <vTaskAppCAN+0x170>)
 8000682:	f004 fce7 	bl	8005054 <xQueueGenericSend>
 8000686:	e020      	b.n	80006ca <vTaskAppCAN+0x12a>
		}
	}
	else
	{
		if(++u16TimeToSleep >= 1000)
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <vTaskAppCAN+0x160>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <vTaskAppCAN+0x160>)
 8000692:	801a      	strh	r2, [r3, #0]
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <vTaskAppCAN+0x160>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800069c:	d315      	bcc.n	80006ca <vTaskAppCAN+0x12a>
		{
			u16TimeToSleep = 0;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <vTaskAppCAN+0x160>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	801a      	strh	r2, [r3, #0]
			stAppCANMsg.ucSrc = SRC_APPCAN;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <vTaskAppCAN+0x170>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <vTaskAppCAN+0x170>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_PS;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <vTaskAppCAN+0x170>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = NULL;
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <vTaskAppCAN+0x170>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <vTaskAppCAN+0x174>)
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	4912      	ldr	r1, [pc, #72]	@ (8000710 <vTaskAppCAN+0x170>)
 80006c6:	f004 fcc5 	bl	8005054 <xQueueGenericSend>
		}
	}

	if( xQueueReceive(xQueueAppCAN, &stAppCANMsg, 0 ) )
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <vTaskAppCAN+0x174>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	490f      	ldr	r1, [pc, #60]	@ (8000710 <vTaskAppCAN+0x170>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fe5e 	bl	8005394 <xQueueReceive>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <vTaskAppCAN+0x154>
	{
		(void)eEventHandler ((unsigned char)SRC_APPCAN,gpasTaskAppCAN_StateMachine[ucCurrentStateAppCAN], &ucCurrentStateAppCAN, &stAppCANMsg);
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <vTaskAppCAN+0x178>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <vTaskAppCAN+0x17c>)
 80006e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <vTaskAppCAN+0x170>)
 80006ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <vTaskAppCAN+0x178>)
 80006ee:	2001      	movs	r0, #1
 80006f0:	f001 f979 	bl	80019e6 <eEventHandler>
	}
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000098 	.word	0x20000098
 8000700:	2000017c 	.word	0x2000017c
 8000704:	2000009c 	.word	0x2000009c
 8000708:	200000b8 	.word	0x200000b8
 800070c:	200000bc 	.word	0x200000bc
 8000710:	2000007c 	.word	0x2000007c
 8000714:	20000088 	.word	0x20000088
 8000718:	20000084 	.word	0x20000084
 800071c:	08007a10 	.word	0x08007a10

08000720 <TaskAppSerial_getQueue>:
//              TaskAppSerial_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppSerial_getQueue()
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	return &xQueueAppSerial;
 8000724:	4b02      	ldr	r3, [pc, #8]	@ (8000730 <TaskAppSerial_getQueue+0x10>)
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000190 	.word	0x20000190

08000734 <TaskAppSerial_Entry>:
//
//
//////////////////////////////////////////////

void TaskAppSerial_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
    xQueueAppSerial = xQueue;
 800073e:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <TaskAppSerial_Entry+0x48>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6013      	str	r3, [r2, #0]
    xTimerAppSerial = xTimer;
 8000744:	4a0e      	ldr	r2, [pc, #56]	@ (8000780 <TaskAppSerial_Entry+0x4c>)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	6013      	str	r3, [r2, #0]

    hUSART = hGet_USART_Handler();
 800074a:	f001 fa95 	bl	8001c78 <hGet_USART_Handler>
 800074e:	4603      	mov	r3, r0
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <TaskAppSerial_Entry+0x50>)
 8000752:	6013      	str	r3, [r2, #0]

    stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <TaskAppSerial_Entry+0x54>)
 8000756:	2202      	movs	r2, #2
 8000758:	701a      	strb	r2, [r3, #0]
    stAppSerialMsg.ucDest = SRC_APPSERIAL;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <TaskAppSerial_Entry+0x54>)
 800075c:	2202      	movs	r2, #2
 800075e:	705a      	strb	r2, [r3, #1]
    stAppSerialMsg.ucEvent = EVENT_APPSERIAL_INIT;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <TaskAppSerial_Entry+0x54>)
 8000762:	2201      	movs	r2, #1
 8000764:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <TaskAppSerial_Entry+0x48>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	2200      	movs	r2, #0
 800076e:	4906      	ldr	r1, [pc, #24]	@ (8000788 <TaskAppSerial_Entry+0x54>)
 8000770:	f004 fc70 	bl	8005054 <xQueueGenericSend>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000190 	.word	0x20000190
 8000780:	20000194 	.word	0x20000194
 8000784:	200001a0 	.word	0x200001a0
 8000788:	20000198 	.word	0x20000198

0800078c <TaskAppSerial_Start>:
//              TaskAppSerial_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_Start(sMessageType *psMessage)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]

	return boError;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <TaskAppSerial_ReceiveEvent>:
//              TaskAppSerial_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_ReceiveEvent(sMessageType *psMessage)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80007ac:	2301      	movs	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]

	return boError;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <TaskAppSerial_TransmitEvent>:
//              TaskAppSerial_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_TransmitEvent(sMessageType *psMessage)
{
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]

	memset((char*)&stFrameTxUSART[u8FifoTxUSART],0x00,sizeof(tstFrameUSART));
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	01db      	lsls	r3, r3, #7
 80007ce:	4a20      	ldr	r2, [pc, #128]	@ (8000850 <TaskAppSerial_TransmitEvent+0x94>)
 80007d0:	4413      	add	r3, r2
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 fb74 	bl	8006ec4 <memset>
	memcpy((char*)&stFrameTxUSART[u8FifoTxUSART],psMessage->pcMessageData,strlen(psMessage->pcMessageData));
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	01db      	lsls	r3, r3, #7
 80007e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <TaskAppSerial_TransmitEvent+0x94>)
 80007e4:	189c      	adds	r4, r3, r2
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685d      	ldr	r5, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fcae 	bl	8000150 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4629      	mov	r1, r5
 80007fa:	4620      	mov	r0, r4
 80007fc:	f006 fbec 	bl	8006fd8 <memcpy>
	(void)HAL_UART_Transmit(hUSART,(uint8_t*)&stFrameTxUSART[u8FifoTxUSART], strlen(psMessage->pcMessageData),5);
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <TaskAppSerial_TransmitEvent+0x98>)
 8000802:	681c      	ldr	r4, [r3, #0]
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	01db      	lsls	r3, r3, #7
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <TaskAppSerial_TransmitEvent+0x94>)
 800080c:	189d      	adds	r5, r3, r2
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fc9c 	bl	8000150 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	2305      	movs	r3, #5
 800081e:	4629      	mov	r1, r5
 8000820:	4620      	mov	r0, r4
 8000822:	f003 fb05 	bl	8003e30 <HAL_UART_Transmit>
	if(++u8FifoTxUSART >= 2)
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d902      	bls.n	8000840 <TaskAppSerial_TransmitEvent+0x84>
	{
		u8FifoTxUSART = 0;
 800083a:	4b04      	ldr	r3, [pc, #16]	@ (800084c <TaskAppSerial_TransmitEvent+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	}

	return boError;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	bf00      	nop
 800084c:	200002a4 	.word	0x200002a4
 8000850:	200001a4 	.word	0x200001a4
 8000854:	200001a0 	.word	0x200001a0

08000858 <TaskAppSerial_IgnoreEvent>:
//              TaskAppSerial_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_IgnoreEvent(sMessageType *psMessage)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <vTaskAppSerial>:
	gasTaskAppSerial_Initializing,
	gasTaskAppSerial_Running
};

void vTaskAppSerial(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if( xQueueReceive(xQueueAppSerial, &stAppSerialMsg, 0 ) )
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <vTaskAppSerial+0x3c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <vTaskAppSerial+0x40>)
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fd87 	bl	8005394 <xQueueReceive>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00a      	beq.n	80008a2 <vTaskAppSerial+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_APPSERIAL,gpasTaskAppSerial_StateMachine[ucCurrentStateAppSerial], &ucCurrentStateAppSerial, &stAppSerialMsg);
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <vTaskAppSerial+0x44>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <vTaskAppSerial+0x48>)
 8000894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <vTaskAppSerial+0x40>)
 800089a:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <vTaskAppSerial+0x44>)
 800089c:	2002      	movs	r0, #2
 800089e:	f001 f8a2 	bl	80019e6 <eEventHandler>
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_TX;
		stAppSerialMsg.pcMessageData = NULL;
		xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
		u16TimeSlice = 0;
	}*/
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000190 	.word	0x20000190
 80008b0:	20000198 	.word	0x20000198
 80008b4:	2000018c 	.word	0x2000018c
 80008b8:	08007a58 	.word	0x08007a58

080008bc <TaskIO_Entry>:
//              TaskIO_Entry
//
//
//////////////////////////////////////////////
void TaskIO_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
    xQueueIO = xQueue;
 80008c6:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <TaskIO_Entry+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6013      	str	r3, [r2, #0]
    xTimerIO = xTimer;
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <TaskIO_Entry+0x44>)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	6013      	str	r3, [r2, #0]

    stIOMsg.ucSrc = SRC_IO;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <TaskIO_Entry+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <TaskIO_Entry+0x48>)
 80008da:	2200      	movs	r2, #0
 80008dc:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_INIT;
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <TaskIO_Entry+0x48>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <TaskIO_Entry+0x40>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	2200      	movs	r2, #0
 80008ec:	4905      	ldr	r1, [pc, #20]	@ (8000904 <TaskIO_Entry+0x48>)
 80008ee:	f004 fbb1 	bl	8005054 <xQueueGenericSend>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002b4 	.word	0x200002b4
 8000900:	200002b8 	.word	0x200002b8
 8000904:	200002a8 	.word	0x200002a8

08000908 <TaskIO_Start>:
//              TaskIO_Start
//
//
//////////////////////////////////////////////
unsigned char TaskIO_Start(sMessageType *psMessage)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]

    pstQueueAppCAN  = TaskAppCAN_getQueue();
 8000914:	f7ff fc48 	bl	80001a8 <TaskAppCAN_getQueue>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <TaskIO_Start+0x80>)
 800091e:	601a      	str	r2, [r3, #0]

    stIOMsg.ucSrc = SRC_IO;
 8000920:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <TaskIO_Start+0x84>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <TaskIO_Start+0x84>)
 8000928:	2200      	movs	r2, #0
 800092a:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_NULL;
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <TaskIO_Start+0x84>)
 800092e:	2200      	movs	r2, #0
 8000930:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <TaskIO_Start+0x88>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2200      	movs	r2, #0
 800093a:	4914      	ldr	r1, [pc, #80]	@ (800098c <TaskIO_Start+0x84>)
 800093c:	f004 fb8a 	bl	8005054 <xQueueGenericSend>

    ulCountPulse = 0;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <TaskIO_Start+0x8c>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOn = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <TaskIO_Start+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOff = 0;
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <TaskIO_Start+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
    ulCountPeriod = 0;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <TaskIO_Start+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]

	ulQtyPulse = 5;	/* 5 pulses*/
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <TaskIO_Start+0x9c>)
 800095a:	2205      	movs	r2, #5
 800095c:	601a      	str	r2, [r3, #0]
	ulTimePulseOn = 2; 	/* 2*50 = 100ms*/
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <TaskIO_Start+0xa0>)
 8000960:	2202      	movs	r2, #2
 8000962:	601a      	str	r2, [r3, #0]
	ulTimePulseOff = 2; 	/* 2*50 = 100ms*/
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <TaskIO_Start+0xa4>)
 8000966:	2202      	movs	r2, #2
 8000968:	601a      	str	r2, [r3, #0]
	ulPeriod = 40; 		/* 20*50 = 1s*/
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <TaskIO_Start+0xa8>)
 800096c:	2228      	movs	r2, #40	@ 0x28
 800096e:	601a      	str	r2, [r3, #0]

    (void)osTimerStart(xTimerIO,50);
 8000970:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <TaskIO_Start+0xac>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2132      	movs	r1, #50	@ 0x32
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fcf2 	bl	8004360 <osTimerStart>
	return boError;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002dc 	.word	0x200002dc
 800098c:	200002a8 	.word	0x200002a8
 8000990:	200002b4 	.word	0x200002b4
 8000994:	200002bc 	.word	0x200002bc
 8000998:	200002c0 	.word	0x200002c0
 800099c:	200002c4 	.word	0x200002c4
 80009a0:	200002c8 	.word	0x200002c8
 80009a4:	200002cc 	.word	0x200002cc
 80009a8:	200002d0 	.word	0x200002d0
 80009ac:	200002d4 	.word	0x200002d4
 80009b0:	200002d8 	.word	0x200002d8
 80009b4:	200002b8 	.word	0x200002b8

080009b8 <TaskIO_getQueue>:
//              TaskIO_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskIO_getQueue()
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	return &xQueueIO;
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <TaskIO_getQueue+0x10>)
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200002b4 	.word	0x200002b4

080009cc <TaskIO_PSEvent>:
//              TaskIO_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_PSEvent(sMessageType *psMessage)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStop(xTimerIO);
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <TaskIO_PSEvent+0x54>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fd03 	bl	80043e8 <osTimerStop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <TaskIO_PSEvent+0x58>)
 80009ea:	f002 fd8d 	bl	8003508 <HAL_GPIO_WritePin>

	stIOMsg.ucSrc = SRC_IO;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <TaskIO_PSEvent+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	stIOMsg.ucDest = SRC_APPCAN;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <TaskIO_PSEvent+0x5c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	705a      	strb	r2, [r3, #1]
	stIOMsg.ucEvent = EVENT_APPCAN_SLEEP;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <TaskIO_PSEvent+0x5c>)
 80009fc:	2205      	movs	r2, #5
 80009fe:	709a      	strb	r2, [r3, #2]
	stIOMsg.pcMessageData = NULL;
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <TaskIO_PSEvent+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppCAN, &stIOMsg, 0,0);
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <TaskIO_PSEvent+0x60>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4905      	ldr	r1, [pc, #20]	@ (8000a28 <TaskIO_PSEvent+0x5c>)
 8000a12:	f004 fb1f 	bl	8005054 <xQueueGenericSend>

    return(boError);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200002b8 	.word	0x200002b8
 8000a24:	40011000 	.word	0x40011000
 8000a28:	200002a8 	.word	0x200002a8
 8000a2c:	200002dc 	.word	0x200002dc

08000a30 <TaskIO_WakeupEvent>:
//              TaskIO_WakeupEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_WakeupEvent(sMessageType *psMessage)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStart(xTimerIO,50);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <TaskIO_WakeupEvent+0x24>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2132      	movs	r1, #50	@ 0x32
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fc8c 	bl	8004360 <osTimerStart>

    return(boError);
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200002b8 	.word	0x200002b8

08000a58 <TaskIO_IgnoreEvent>:
//              TaskIO_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_IgnoreEvent(sMessageType *psMessage)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <vLocalTimerCallbackIo>:
//              vTimerCallbackIo
//
//
//////////////////////////////////////////////
void vLocalTimerCallbackIo(void const * argument)
 {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	ulCountPeriod++;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <vLocalTimerCallbackIo+0xc4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b34 <vLocalTimerCallbackIo+0xc4>)
 8000a80:	6013      	str	r3, [r2, #0]
    if(ulCountPeriod <= ulPeriod)
 8000a82:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <vLocalTimerCallbackIo+0xc4>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <vLocalTimerCallbackIo+0xc8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d83c      	bhi.n	8000b08 <vLocalTimerCallbackIo+0x98>
    {
    	if(ulCountPulse <= ((ulQtyPulse) * (ulTimePulseOn+ulTimePulseOff)))
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <vLocalTimerCallbackIo+0xcc>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <vLocalTimerCallbackIo+0xd0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a2a      	ldr	r2, [pc, #168]	@ (8000b44 <vLocalTimerCallbackIo+0xd4>)
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	fb03 f202 	mul.w	r2, r3, r2
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <vLocalTimerCallbackIo+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d341      	bcc.n	8000b2c <vLocalTimerCallbackIo+0xbc>
    	{
			if(ulCountTimePulseOn < ulTimePulseOn)
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <vLocalTimerCallbackIo+0xdc>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <vLocalTimerCallbackIo+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d20b      	bcs.n	8000acc <vLocalTimerCallbackIo+0x5c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aba:	4825      	ldr	r0, [pc, #148]	@ (8000b50 <vLocalTimerCallbackIo+0xe0>)
 8000abc:	f002 fd24 	bl	8003508 <HAL_GPIO_WritePin>
				ulCountTimePulseOn++;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <vLocalTimerCallbackIo+0xdc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <vLocalTimerCallbackIo+0xdc>)
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e017      	b.n	8000afc <vLocalTimerCallbackIo+0x8c>
			}
			else
			{
				if(ulCountTimePulseOff < ulTimePulseOff )
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <vLocalTimerCallbackIo+0xe4>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <vLocalTimerCallbackIo+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d20b      	bcs.n	8000af0 <vLocalTimerCallbackIo+0x80>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ade:	481c      	ldr	r0, [pc, #112]	@ (8000b50 <vLocalTimerCallbackIo+0xe0>)
 8000ae0:	f002 fd12 	bl	8003508 <HAL_GPIO_WritePin>
					ulCountTimePulseOff++;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <vLocalTimerCallbackIo+0xe4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <vLocalTimerCallbackIo+0xe4>)
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e005      	b.n	8000afc <vLocalTimerCallbackIo+0x8c>
				}
				else
				{
					ulCountTimePulseOn = 0;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <vLocalTimerCallbackIo+0xdc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
					ulCountTimePulseOff= 0;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <vLocalTimerCallbackIo+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
				}
			}
			ulCountPulse++;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <vLocalTimerCallbackIo+0xd8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <vLocalTimerCallbackIo+0xd8>)
 8000b04:	6013      	str	r3, [r2, #0]
      lastStateChangeTime = currentTime;
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledState);
#endif
 }
 8000b06:	e011      	b.n	8000b2c <vLocalTimerCallbackIo+0xbc>
        ulCountPulse = 0;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <vLocalTimerCallbackIo+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOn = 0;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <vLocalTimerCallbackIo+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOff = 0;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <vLocalTimerCallbackIo+0xe4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
        ulCountPeriod = 0;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <vLocalTimerCallbackIo+0xc4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b26:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <vLocalTimerCallbackIo+0xe0>)
 8000b28:	f002 fcee 	bl	8003508 <HAL_GPIO_WritePin>
 }
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200002c8 	.word	0x200002c8
 8000b38:	200002d8 	.word	0x200002d8
 8000b3c:	200002d0 	.word	0x200002d0
 8000b40:	200002d4 	.word	0x200002d4
 8000b44:	200002cc 	.word	0x200002cc
 8000b48:	200002bc 	.word	0x200002bc
 8000b4c:	200002c0 	.word	0x200002c0
 8000b50:	40011000 	.word	0x40011000
 8000b54:	200002c4 	.word	0x200002c4

08000b58 <vTaskIO>:
	gasTaskIO_Running,
	gasTaskIO_Sleeping
};

void vTaskIO(void const * argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( xQueueIO, &stIOMsg, 0 ) )
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <vTaskIO+0x3c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <vTaskIO+0x40>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fc13 	bl	8005394 <xQueueReceive>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <vTaskIO+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_IO,gpasTaskIO_StateMachine[ucCurrentStateIO], &ucCurrentStateIO, &stIOMsg);
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <vTaskIO+0x44>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <vTaskIO+0x48>)
 8000b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <vTaskIO+0x40>)
 8000b82:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <vTaskIO+0x44>)
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 ff2e 	bl	80019e6 <eEventHandler>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200002b4 	.word	0x200002b4
 8000b98:	200002a8 	.word	0x200002a8
 8000b9c:	200002b0 	.word	0x200002b0
 8000ba0:	08007aa8 	.word	0x08007aa8

08000ba4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000baa:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <MX_CAN_Init+0x6c>)
 8000bac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bbc:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000bc0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bc4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bc8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bcc:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000bd0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_CAN_Init+0x68>)
 8000bf8:	f001 f8ec 	bl	8001dd4 <HAL_CAN_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000c02:	f000 fece 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200002e0 	.word	0x200002e0
 8000c10:	40006400 	.word	0x40006400

08000c14 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a28      	ldr	r2, [pc, #160]	@ (8000cd0 <HAL_CAN_MspInit+0xbc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d148      	bne.n	8000cc6 <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a26      	ldr	r2, [pc, #152]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c3e:	61d3      	str	r3, [r2, #28]
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <HAL_CAN_MspInit+0xc0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <HAL_CAN_MspInit+0xc4>)
 8000c7a:	f002 fa15 	bl	80030a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <HAL_CAN_MspInit+0xc4>)
 8000c94:	f002 fa08 	bl	80030a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_CAN_MspInit+0xc8>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <HAL_CAN_MspInit+0xc8>)
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2014      	movs	r0, #20
 8000cc2:	f001 ffbc 	bl	8002c3e <HAL_NVIC_SetPriority>
    /*HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);  */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	@ 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40006400 	.word	0x40006400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_CAN_MspDeInit+0x30>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10a      	bne.n	8000d08 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_CAN_MspDeInit+0x34>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_CAN_MspDeInit+0x34>)
 8000cf8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000cfc:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000cfe:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_CAN_MspDeInit+0x38>)
 8000d04:	f002 fb4c 	bl	80033a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40006400 	.word	0x40006400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <hGet_CAN_Handler>:

/* USER CODE BEGIN 1 */
CAN_HandleTypeDef *hGet_CAN_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	return &hcan;
 8000d20:	4b02      	ldr	r3, [pc, #8]	@ (8000d2c <hGet_CAN_Handler+0x10>)
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200002e0 	.word	0x200002e0

08000d30 <stHAL_CAN_FilterConfig>:

HAL_StatusTypeDef stHAL_CAN_FilterConfig(void)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig0 =
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <stHAL_CAN_FilterConfig+0x30>)
 8000d38:	463c      	mov	r4, r7
 8000d3a:	461d      	mov	r5, r3
 8000d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d48:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterMode =  /*CAN_FILTERMODE_IDLIST*/CAN_FILTERMODE_IDMASK,
			.FilterScale = CAN_FILTERSCALE_32BIT,
			.SlaveStartFilterBank  = 14
	};

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0);
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <stHAL_CAN_FilterConfig+0x34>)
 8000d52:	f001 f985 	bl	8002060 <HAL_CAN_ConfigFilter>

	return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d60:	080078c8 	.word	0x080078c8
 8000d64:	200002e0 	.word	0x200002e0

08000d68 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000d72:	2306      	movs	r3, #6
 8000d74:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	83fb      	strh	r3, [r7, #30]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d86:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000d8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001010 <EE_Init+0x2a8>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000d92:	4ba0      	ldr	r3, [pc, #640]	@ (8001014 <EE_Init+0x2ac>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001010 <EE_Init+0x2a8>)
 8000d9e:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8000da4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000da6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00b      	beq.n	8000dc6 <EE_Init+0x5e>
 8000dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db2:	f280 8196 	bge.w	80010e2 <EE_Init+0x37a>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80f8 	beq.w	8000fac <EE_Init+0x244>
 8000dbc:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d050      	beq.n	8000e66 <EE_Init+0xfe>
 8000dc4:	e18d      	b.n	80010e2 <EE_Init+0x37a>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000dc6:	8c3b      	ldrh	r3, [r7, #32]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d116      	bne.n	8000dfa <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000dcc:	4890      	ldr	r0, [pc, #576]	@ (8001010 <EE_Init+0x2a8>)
 8000dce:	f000 f9a9 	bl	8001124 <EE_VerifyPageFullyErased>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f040 818e 	bne.w	80010f6 <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000dda:	f107 0214 	add.w	r2, r7, #20
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 f8b8 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000de8:	4603      	mov	r3, r0
 8000dea:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000dec:	7efb      	ldrb	r3, [r7, #27]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8181 	beq.w	80010f6 <EE_Init+0x38e>
          {
            return flashstatus;
 8000df4:	7efb      	ldrb	r3, [r7, #27]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	e185      	b.n	8001106 <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000dfa:	8c3b      	ldrh	r3, [r7, #32]
 8000dfc:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d125      	bne.n	8000e50 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e04:	4882      	ldr	r0, [pc, #520]	@ (8001010 <EE_Init+0x2a8>)
 8000e06:	f000 f98d 	bl	8001124 <EE_VerifyPageFullyErased>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10e      	bne.n	8000e2e <EE_Init+0xc6>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000e10:	f107 0214 	add.w	r2, r7, #20
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f89d 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000e22:	7efb      	ldrb	r3, [r7, #27]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <EE_Init+0xc6>
          {
            return flashstatus;
 8000e28:	7efb      	ldrb	r3, [r7, #27]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	e16b      	b.n	8001106 <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	4977      	ldr	r1, [pc, #476]	@ (8001014 <EE_Init+0x2ac>)
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f001 ff45 	bl	8002cc8 <HAL_FLASH_Program>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000e42:	7efb      	ldrb	r3, [r7, #27]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 8156 	beq.w	80010f6 <EE_Init+0x38e>
        {
          return flashstatus;
 8000e4a:	7efb      	ldrb	r3, [r7, #27]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	e15a      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000e50:	f000 f9fa 	bl	8001248 <EE_Format>
 8000e54:	4603      	mov	r3, r0
 8000e56:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000e58:	7efb      	ldrb	r3, [r7, #27]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 814b 	beq.w	80010f6 <EE_Init+0x38e>
        {
          return flashstatus;
 8000e60:	7efb      	ldrb	r3, [r7, #27]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	e14f      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000e66:	8c3b      	ldrh	r3, [r7, #32]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d163      	bne.n	8000f34 <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e70:	e030      	b.n	8000ed4 <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000e72:	4b69      	ldr	r3, [pc, #420]	@ (8001018 <EE_Init+0x2b0>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e7a:	4968      	ldr	r1, [pc, #416]	@ (800101c <EE_Init+0x2b4>)
 8000e7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d101      	bne.n	8000e88 <EE_Init+0x120>
          {
            x = varidx;
 8000e84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e86:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (varidx != x)
 8000e88:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d01d      	beq.n	8000ece <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000e92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e94:	4a61      	ldr	r2, [pc, #388]	@ (800101c <EE_Init+0x2b4>)
 8000e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9a:	4961      	ldr	r1, [pc, #388]	@ (8001020 <EE_Init+0x2b8>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f967 	bl	8001170 <EE_ReadVariable>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8000ea6:	8bbb      	ldrh	r3, [r7, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d010      	beq.n	8000ece <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000eac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000eae:	4a5b      	ldr	r2, [pc, #364]	@ (800101c <EE_Init+0x2b4>)
 8000eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001020 <EE_Init+0x2b8>)
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fa58 	bl	8001370 <EE_VerifyPageFullWriteVariable>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8000ec4:	8bfb      	ldrh	r3, [r7, #30]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <EE_Init+0x166>
              {
                return eepromstatus;
 8000eca:	8bfb      	ldrh	r3, [r7, #30]
 8000ecc:	e11b      	b.n	8001106 <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000ece:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ed4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d9cb      	bls.n	8000e72 <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	494b      	ldr	r1, [pc, #300]	@ (8001010 <EE_Init+0x2a8>)
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 feef 	bl	8002cc8 <HAL_FLASH_Program>
 8000eea:	4603      	mov	r3, r0
 8000eec:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000eee:	7efb      	ldrb	r3, [r7, #27]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <EE_Init+0x192>
        {
          return flashstatus;
 8000ef4:	7efb      	ldrb	r3, [r7, #27]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	e105      	b.n	8001106 <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000efe:	4b45      	ldr	r3, [pc, #276]	@ (8001014 <EE_Init+0x2ac>)
 8000f00:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000f06:	4843      	ldr	r0, [pc, #268]	@ (8001014 <EE_Init+0x2ac>)
 8000f08:	f000 f90c 	bl	8001124 <EE_VerifyPageFullyErased>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 80f3 	bne.w	80010fa <EE_Init+0x392>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000f14:	f107 0214 	add.w	r2, r7, #20
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f81b 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000f22:	4603      	mov	r3, r0
 8000f24:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000f26:	7efb      	ldrb	r3, [r7, #27]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 80e6 	beq.w	80010fa <EE_Init+0x392>
          {
            return flashstatus;
 8000f2e:	7efb      	ldrb	r3, [r7, #27]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	e0e8      	b.n	8001106 <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000f34:	8c3b      	ldrh	r3, [r7, #32]
 8000f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <EE_Init+0x22e>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <EE_Init+0x2ac>)
 8000f44:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000f4a:	4832      	ldr	r0, [pc, #200]	@ (8001014 <EE_Init+0x2ac>)
 8000f4c:	f000 f8ea 	bl	8001124 <EE_VerifyPageFullyErased>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10e      	bne.n	8000f74 <EE_Init+0x20c>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000f56:	f107 0214 	add.w	r2, r7, #20
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fffa 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000f64:	4603      	mov	r3, r0
 8000f66:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000f68:	7efb      	ldrb	r3, [r7, #27]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <EE_Init+0x20c>
          {
            return flashstatus;
 8000f6e:	7efb      	ldrb	r3, [r7, #27]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	e0c8      	b.n	8001106 <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	4924      	ldr	r1, [pc, #144]	@ (8001010 <EE_Init+0x2a8>)
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f001 fea2 	bl	8002cc8 <HAL_FLASH_Program>
 8000f84:	4603      	mov	r3, r0
 8000f86:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000f88:	7efb      	ldrb	r3, [r7, #27]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80b5 	beq.w	80010fa <EE_Init+0x392>
        {
          return flashstatus;
 8000f90:	7efb      	ldrb	r3, [r7, #27]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	e0b7      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000f96:	f000 f957 	bl	8001248 <EE_Format>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000f9e:	7efb      	ldrb	r3, [r7, #27]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80aa 	beq.w	80010fa <EE_Init+0x392>
        {
          return flashstatus;
 8000fa6:	7efb      	ldrb	r3, [r7, #27]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	e0ac      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000fac:	8c3b      	ldrh	r3, [r7, #32]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10a      	bne.n	8000fc8 <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000fb2:	f000 f949 	bl	8001248 <EE_Format>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000fba:	7efb      	ldrb	r3, [r7, #27]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 809e 	beq.w	80010fe <EE_Init+0x396>
        {
          return flashstatus;
 8000fc2:	7efb      	ldrb	r3, [r7, #27]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	e09e      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000fc8:	8c3b      	ldrh	r3, [r7, #32]
 8000fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d11b      	bne.n	800100a <EE_Init+0x2a2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <EE_Init+0x2ac>)
 8000fd8:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <EE_Init+0x2ac>)
 8000fe0:	f000 f8a0 	bl	8001124 <EE_VerifyPageFullyErased>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 8089 	bne.w	80010fe <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000fec:	f107 0214 	add.w	r2, r7, #20
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 ffaf 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000ffe:	7efb      	ldrb	r3, [r7, #27]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d07c      	beq.n	80010fe <EE_Init+0x396>
          {
            return flashstatus;
 8001004:	7efb      	ldrb	r3, [r7, #27]
 8001006:	b29b      	uxth	r3, r3
 8001008:	e07d      	b.n	8001106 <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800100a:	2300      	movs	r3, #0
 800100c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800100e:	e03a      	b.n	8001086 <EE_Init+0x31e>
 8001010:	0800fc00 	.word	0x0800fc00
 8001014:	08010000 	.word	0x08010000
 8001018:	0800fc06 	.word	0x0800fc06
 800101c:	20000180 	.word	0x20000180
 8001020:	20000344 	.word	0x20000344
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <EE_Init+0x3a8>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800102c:	4939      	ldr	r1, [pc, #228]	@ (8001114 <EE_Init+0x3ac>)
 800102e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001032:	429a      	cmp	r2, r3
 8001034:	d101      	bne.n	800103a <EE_Init+0x2d2>
          {
            x = varidx;
 8001036:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001038:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (varidx != x)
 800103a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800103c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001040:	429a      	cmp	r2, r3
 8001042:	d01d      	beq.n	8001080 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001044:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <EE_Init+0x3ac>)
 8001048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104c:	4932      	ldr	r1, [pc, #200]	@ (8001118 <EE_Init+0x3b0>)
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f88e 	bl	8001170 <EE_ReadVariable>
 8001054:	4603      	mov	r3, r0
 8001056:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001058:	8bbb      	ldrh	r3, [r7, #28]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d010      	beq.n	8001080 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 800105e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001060:	4a2c      	ldr	r2, [pc, #176]	@ (8001114 <EE_Init+0x3ac>)
 8001062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001066:	4a2c      	ldr	r2, [pc, #176]	@ (8001118 <EE_Init+0x3b0>)
 8001068:	8812      	ldrh	r2, [r2, #0]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f97f 	bl	8001370 <EE_VerifyPageFullWriteVariable>
 8001072:	4603      	mov	r3, r0
 8001074:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001076:	8bfb      	ldrh	r3, [r7, #30]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <EE_Init+0x318>
              {
                return eepromstatus;
 800107c:	8bfb      	ldrh	r3, [r7, #30]
 800107e:	e042      	b.n	8001106 <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001080:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001082:	3301      	adds	r3, #1
 8001084:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001088:	2b05      	cmp	r3, #5
 800108a:	d9cb      	bls.n	8001024 <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	4921      	ldr	r1, [pc, #132]	@ (800111c <EE_Init+0x3b4>)
 8001096:	2001      	movs	r0, #1
 8001098:	f001 fe16 	bl	8002cc8 <HAL_FLASH_Program>
 800109c:	4603      	mov	r3, r0
 800109e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80010a0:	7efb      	ldrb	r3, [r7, #27]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <EE_Init+0x344>
        {
          return flashstatus;
 80010a6:	7efb      	ldrb	r3, [r7, #27]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	e02c      	b.n	8001106 <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <EE_Init+0x3b8>)
 80010b2:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80010b8:	4819      	ldr	r0, [pc, #100]	@ (8001120 <EE_Init+0x3b8>)
 80010ba:	f000 f833 	bl	8001124 <EE_VerifyPageFullyErased>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d11c      	bne.n	80010fe <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80010c4:	f107 0214 	add.w	r2, r7, #20
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 ff43 	bl	8002f58 <HAL_FLASHEx_Erase>
 80010d2:	4603      	mov	r3, r0
 80010d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80010d6:	7efb      	ldrb	r3, [r7, #27]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d010      	beq.n	80010fe <EE_Init+0x396>
          {
            return flashstatus;
 80010dc:	7efb      	ldrb	r3, [r7, #27]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	e011      	b.n	8001106 <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 80010e2:	f000 f8b1 	bl	8001248 <EE_Format>
 80010e6:	4603      	mov	r3, r0
 80010e8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80010ea:	7efb      	ldrb	r3, [r7, #27]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <EE_Init+0x39a>
      {
        return flashstatus;
 80010f0:	7efb      	ldrb	r3, [r7, #27]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	e007      	b.n	8001106 <EE_Init+0x39e>
      break;
 80010f6:	bf00      	nop
 80010f8:	e004      	b.n	8001104 <EE_Init+0x39c>
      break;
 80010fa:	bf00      	nop
 80010fc:	e002      	b.n	8001104 <EE_Init+0x39c>
      break;
 80010fe:	bf00      	nop
 8001100:	e000      	b.n	8001104 <EE_Init+0x39c>
      }
      break;
 8001102:	bf00      	nop
  }

  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	08010006 	.word	0x08010006
 8001114:	20000180 	.word	0x20000180
 8001118:	20000344 	.word	0x20000344
 800111c:	08010000 	.word	0x08010000
 8001120:	0800fc00 	.word	0x0800fc00

08001124 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8001130:	f245 5355 	movw	r3, #21845	@ 0x5555
 8001134:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001136:	e00d      	b.n	8001154 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 800113e:	897b      	ldrh	r3, [r7, #10]
 8001140:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001144:	4293      	cmp	r3, r2
 8001146:	d002      	beq.n	800114e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]

      break;
 800114c:	e006      	b.n	800115c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3304      	adds	r3, #4
 8001152:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <EE_VerifyPageFullyErased+0x48>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d9ed      	bls.n	8001138 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	b29b      	uxth	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0800ffff 	.word	0x0800ffff

08001170 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 800117c:	2300      	movs	r3, #0
 800117e:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001180:	f245 5355 	movw	r3, #21845	@ 0x5555
 8001184:	81bb      	strh	r3, [r7, #12]
 8001186:	2301      	movs	r3, #1
 8001188:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <EE_ReadVariable+0x8c>)
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <EE_ReadVariable+0x8c>)
 8001190:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f8a8 	bl	80012e8 <EE_FindValidPage>
 8001198:	4603      	mov	r3, r0
 800119a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	2bab      	cmp	r3, #171	@ 0xab
 80011a0:	d101      	bne.n	80011a6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80011a2:	23ab      	movs	r3, #171	@ 0xab
 80011a4:	e025      	b.n	80011f2 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80011ac:	333f      	adds	r3, #63	@ 0x3f
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	3301      	adds	r3, #1
 80011b6:	029a      	lsls	r2, r3, #10
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <EE_ReadVariable+0x90>)
 80011ba:	4413      	add	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 80011be:	e012      	b.n	80011e6 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 80011c6:	89ba      	ldrh	r2, [r7, #12]
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d108      	bne.n	80011e0 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	3b02      	subs	r3, #2
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	82fb      	strh	r3, [r7, #22]

      break;
 80011de:	e007      	b.n	80011f0 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3b04      	subs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3302      	adds	r3, #2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8e7      	bhi.n	80011c0 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80011f0:	8afb      	ldrh	r3, [r7, #22]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800fc00 	.word	0x0800fc00
 8001200:	0800fbfe 	.word	0x0800fbfe

08001204 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	4613      	mov	r3, r2
 8001212:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001218:	88ba      	ldrh	r2, [r7, #4]
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f8a6 	bl	8001370 <EE_VerifyPageFullWriteVariable>
 8001224:	4603      	mov	r3, r0
 8001226:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001228:	89fb      	ldrh	r3, [r7, #14]
 800122a:	2b80      	cmp	r3, #128	@ 0x80
 800122c:	d107      	bne.n	800123e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800122e:	88ba      	ldrh	r2, [r7, #4]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f8fd 	bl	8001434 <EE_PageTransfer>
 800123a:	4603      	mov	r3, r0
 800123c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800123e:	89fb      	ldrh	r3, [r7, #14]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <EE_Format+0x98>)
 800125c:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001262:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <EE_Format+0x98>)
 8001264:	f7ff ff5e 	bl	8001124 <EE_VerifyPageFullyErased>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10d      	bne.n	800128a <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	463b      	mov	r3, r7
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe6e 	bl	8002f58 <HAL_FLASHEx_Erase>
 800127c:	4603      	mov	r3, r0
 800127e:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <EE_Format+0x42>
    {
      return flashstatus;
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	e025      	b.n	80012d6 <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	4913      	ldr	r1, [pc, #76]	@ (80012e0 <EE_Format+0x98>)
 8001294:	2001      	movs	r0, #1
 8001296:	f001 fd17 	bl	8002cc8 <HAL_FLASH_Program>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <EE_Format+0x60>
  {
    return flashstatus;
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	e016      	b.n	80012d6 <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <EE_Format+0x9c>)
 80012aa:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <EE_Format+0x9c>)
 80012ae:	f7ff ff39 	bl	8001124 <EE_VerifyPageFullyErased>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10d      	bne.n	80012d4 <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80012b8:	f107 0210 	add.w	r2, r7, #16
 80012bc:	463b      	mov	r3, r7
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fe49 	bl	8002f58 <HAL_FLASHEx_Erase>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <EE_Format+0x8c>
    {
      return flashstatus;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	e000      	b.n	80012d6 <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	0800fc00 	.word	0x0800fc00
 80012e4:	08010000 	.word	0x08010000

080012e8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80012f2:	2306      	movs	r3, #6
 80012f4:	81fb      	strh	r3, [r7, #14]
 80012f6:	2306      	movs	r3, #6
 80012f8:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <EE_FindValidPage+0x80>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <EE_FindValidPage+0x84>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01b      	beq.n	8001344 <EE_FindValidPage+0x5c>
 800130c:	2b01      	cmp	r3, #1
 800130e:	d125      	bne.n	800135c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8001310:	89bb      	ldrh	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001320:	2300      	movs	r3, #0
 8001322:	e01c      	b.n	800135e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001324:	2301      	movs	r3, #1
 8001326:	e01a      	b.n	800135e <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001338:	2301      	movs	r3, #1
 800133a:	e010      	b.n	800135e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800133c:	2300      	movs	r3, #0
 800133e:	e00e      	b.n	800135e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001340:	23ab      	movs	r3, #171	@ 0xab
 8001342:	e00c      	b.n	800135e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800134a:	2300      	movs	r3, #0
 800134c:	e007      	b.n	800135e <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 800134e:	89bb      	ldrh	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001354:	2301      	movs	r3, #1
 8001356:	e002      	b.n	800135e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001358:	23ab      	movs	r3, #171	@ 0xab
 800135a:	e000      	b.n	800135e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800135c:	2300      	movs	r3, #0
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	0800fc00 	.word	0x0800fc00
 800136c:	08010000 	.word	0x08010000

08001370 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	460a      	mov	r2, r1
 800137c:	80fb      	strh	r3, [r7, #6]
 800137e:	4613      	mov	r3, r2
 8001380:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8001386:	2300      	movs	r3, #0
 8001388:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800138a:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <EE_VerifyPageFullWriteVariable+0xb8>)
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b27      	ldr	r3, [pc, #156]	@ (800142c <EE_VerifyPageFullWriteVariable+0xbc>)
 8001390:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff ffa8 	bl	80012e8 <EE_FindValidPage>
 8001398:	4603      	mov	r3, r0
 800139a:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 800139c:	8a3b      	ldrh	r3, [r7, #16]
 800139e:	2bab      	cmp	r3, #171	@ 0xab
 80013a0:	d101      	bne.n	80013a6 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80013a2:	23ab      	movs	r3, #171	@ 0xab
 80013a4:	e03b      	b.n	800141e <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80013a6:	8a3b      	ldrh	r3, [r7, #16]
 80013a8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80013ac:	333f      	adds	r3, #63	@ 0x3f
 80013ae:	029b      	lsls	r3, r3, #10
 80013b0:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80013b2:	8a3b      	ldrh	r3, [r7, #16]
 80013b4:	3301      	adds	r3, #1
 80013b6:	029a      	lsls	r2, r3, #10
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <EE_VerifyPageFullWriteVariable+0xc0>)
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80013be:	e029      	b.n	8001414 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013c8:	d121      	bne.n	800140e <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	461c      	mov	r4, r3
 80013d0:	4615      	mov	r5, r2
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	6979      	ldr	r1, [r7, #20]
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fc75 	bl	8002cc8 <HAL_FLASH_Program>
 80013de:	4603      	mov	r3, r0
 80013e0:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	e017      	b.n	800141e <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1c99      	adds	r1, r3, #2
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4698      	mov	r8, r3
 80013f8:	4691      	mov	r9, r2
 80013fa:	4642      	mov	r2, r8
 80013fc:	464b      	mov	r3, r9
 80013fe:	2001      	movs	r0, #1
 8001400:	f001 fc62 	bl	8002cc8 <HAL_FLASH_Program>
 8001404:	4603      	mov	r3, r0
 8001406:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8001408:	7cfb      	ldrb	r3, [r7, #19]
 800140a:	b29b      	uxth	r3, r3
 800140c:	e007      	b.n	800141e <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3d1      	bcc.n	80013c0 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800141c:	2380      	movs	r3, #128	@ 0x80
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	0800fc00 	.word	0x0800fc00
 800142c:	08010000 	.word	0x08010000
 8001430:	0800fbff 	.word	0x0800fbff

08001434 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	@ 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4613      	mov	r3, r2
 8001442:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 800144a:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <EE_PageTransfer+0x164>)
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t oldpageid = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001456:	2300      	movs	r3, #0
 8001458:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	843b      	strh	r3, [r7, #32]
 800145e:	2300      	movs	r3, #0
 8001460:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff ff3e 	bl	80012e8 <EE_FindValidPage>
 800146c:	4603      	mov	r3, r0
 800146e:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8001470:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 8001476:	4b48      	ldr	r3, [pc, #288]	@ (8001598 <EE_PageTransfer+0x164>)
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 800147a:	4b48      	ldr	r3, [pc, #288]	@ (800159c <EE_PageTransfer+0x168>)
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800147e:	e009      	b.n	8001494 <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8001480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8001486:	4b45      	ldr	r3, [pc, #276]	@ (800159c <EE_PageTransfer+0x168>)
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 800148a:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <EE_PageTransfer+0x164>)
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800148e:	e001      	b.n	8001494 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001490:	23ab      	movs	r3, #171	@ 0xab
 8001492:	e07c      	b.n	800158e <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8001494:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800149e:	2001      	movs	r0, #1
 80014a0:	f001 fc12 	bl	8002cc8 <HAL_FLASH_Program>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80014aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <EE_PageTransfer+0x86>
  {
    return flashstatus;
 80014b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	e069      	b.n	800158e <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80014ba:	88ba      	ldrh	r2, [r7, #4]
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff55 	bl	8001370 <EE_VerifyPageFullWriteVariable>
 80014c6:	4603      	mov	r3, r0
 80014c8:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 80014ca:	8c3b      	ldrh	r3, [r7, #32]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 80014d0:	8c3b      	ldrh	r3, [r7, #32]
 80014d2:	e05c      	b.n	800158e <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014d8:	e027      	b.n	800152a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80014da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014dc:	4a30      	ldr	r2, [pc, #192]	@ (80015a0 <EE_PageTransfer+0x16c>)
 80014de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d01d      	beq.n	8001524 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80014e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014ea:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <EE_PageTransfer+0x16c>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	492c      	ldr	r1, [pc, #176]	@ (80015a4 <EE_PageTransfer+0x170>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fe3c 	bl	8001170 <EE_ReadVariable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 80014fc:	8bfb      	ldrh	r3, [r7, #30]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d010      	beq.n	8001524 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001502:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <EE_PageTransfer+0x16c>)
 8001506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150a:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <EE_PageTransfer+0x170>)
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff2d 	bl	8001370 <EE_VerifyPageFullWriteVariable>
 8001516:	4603      	mov	r3, r0
 8001518:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 800151a:	8c3b      	ldrh	r3, [r7, #32]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8001520:	8c3b      	ldrh	r3, [r7, #32]
 8001522:	e034      	b.n	800158e <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001524:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001526:	3301      	adds	r3, #1
 8001528:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800152a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800152c:	2b05      	cmp	r3, #5
 800152e:	d9d4      	bls.n	80014da <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8001534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001536:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 800153c:	f107 0218 	add.w	r2, r7, #24
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fd06 	bl	8002f58 <HAL_FLASHEx_Erase>
 800154c:	4603      	mov	r3, r0
 800154e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001552:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 800155a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800155e:	b29b      	uxth	r3, r3
 8001560:	e015      	b.n	800158e <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800156c:	2001      	movs	r0, #1
 800156e:	f001 fbab 	bl	8002cc8 <HAL_FLASH_Program>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001578:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8001580:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001584:	b29b      	uxth	r3, r3
 8001586:	e002      	b.n	800158e <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8001588:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3730      	adds	r7, #48	@ 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	0800fc00 	.word	0x0800fc00
 800159c:	08010000 	.word	0x08010000
 80015a0:	20000180 	.word	0x20000180
 80015a4:	20000344 	.word	0x20000344

080015a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <vApplicationGetIdleTaskMemory+0x28>)
 80015b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80015be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2280      	movs	r2, #128	@ 0x80
 80015c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000364 	.word	0x20000364
 80015d4:	20000404 	.word	0x20000404

080015d8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <vApplicationGetTimerTaskMemory+0x2c>)
 80015e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <vApplicationGetTimerTaskMemory+0x30>)
 80015ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000604 	.word	0x20000604
 8001608:	200006a4 	.word	0x200006a4

0800160c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800160c:	b5b0      	push	{r4, r5, r7, lr}
 800160e:	b0a4      	sub	sp, #144	@ 0x90
 8001610:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerIO */
  osTimerDef(TimerIO, vTimerCallbackIo);
 8001612:	4b3c      	ldr	r3, [pc, #240]	@ (8001704 <MX_FREERTOS_Init+0xf8>)
 8001614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  TimerIOHandle = osTimerCreate(osTimer(TimerIO), osTimerPeriodic, NULL);
 800161e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fe66 	bl	80042f8 <osTimerCreate>
 800162c:	4603      	mov	r3, r0
 800162e:	4a36      	ldr	r2, [pc, #216]	@ (8001708 <MX_FREERTOS_Init+0xfc>)
 8001630:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueIO */
  osMessageQDef(QueueIO, 8, sMessageType);
 8001632:	4b36      	ldr	r3, [pc, #216]	@ (800170c <MX_FREERTOS_Init+0x100>)
 8001634:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8001638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueIOHandle = osMessageCreate(osMessageQ(QueueIO), NULL);
 800163e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f002 ff0b 	bl	8004460 <osMessageCreate>
 800164a:	4603      	mov	r3, r0
 800164c:	4a30      	ldr	r2, [pc, #192]	@ (8001710 <MX_FREERTOS_Init+0x104>)
 800164e:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppCAN */
  osMessageQDef(QueueAppCAN, 16, sMessageType);
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <MX_FREERTOS_Init+0x108>)
 8001652:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppCANHandle = osMessageCreate(osMessageQ(QueueAppCAN), NULL);
 800165c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fefc 	bl	8004460 <osMessageCreate>
 8001668:	4603      	mov	r3, r0
 800166a:	4a2b      	ldr	r2, [pc, #172]	@ (8001718 <MX_FREERTOS_Init+0x10c>)
 800166c:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppSerial */
  osMessageQDef(QueueAppSerial, 16, sMessageType);
 800166e:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <MX_FREERTOS_Init+0x108>)
 8001670:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppSerialHandle = osMessageCreate(osMessageQ(QueueAppSerial), NULL);
 800167a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f002 feed 	bl	8004460 <osMessageCreate>
 8001686:	4603      	mov	r3, r0
 8001688:	4a24      	ldr	r2, [pc, #144]	@ (800171c <MX_FREERTOS_Init+0x110>)
 800168a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskIO */
  osThreadDef(TaskIO, TaskIO_Init, osPriorityIdle, 0, 128);
 800168c:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <MX_FREERTOS_Init+0x114>)
 800168e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001692:	461d      	mov	r5, r3
 8001694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800169c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskIOHandle = osThreadCreate(osThread(TaskIO), NULL);
 80016a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 fdc5 	bl	8004236 <osThreadCreate>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <MX_FREERTOS_Init+0x118>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppCAN */
  osThreadDef(TaskAppCAN, TaskAppCAN_Init, osPriorityIdle, 0, 128);
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_FREERTOS_Init+0x11c>)
 80016b4:	f107 0420 	add.w	r4, r7, #32
 80016b8:	461d      	mov	r5, r3
 80016ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppCANHandle = osThreadCreate(osThread(TaskAppCAN), NULL);
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fdb2 	bl	8004236 <osThreadCreate>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a15      	ldr	r2, [pc, #84]	@ (800172c <MX_FREERTOS_Init+0x120>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppSerial */
  osThreadDef(TaskAppSerial, TaskAppSerial_Init, osPriorityIdle, 0, 128);
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_FREERTOS_Init+0x124>)
 80016da:	1d3c      	adds	r4, r7, #4
 80016dc:	461d      	mov	r5, r3
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppSerialHandle = osThreadCreate(osThread(TaskAppSerial), NULL);
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fda1 	bl	8004236 <osThreadCreate>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001734 <MX_FREERTOS_Init+0x128>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016fa:	bf00      	nop
 80016fc:	3790      	adds	r7, #144	@ 0x90
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}
 8001702:	bf00      	nop
 8001704:	080017b9 	.word	0x080017b9
 8001708:	20000360 	.word	0x20000360
 800170c:	080078f0 	.word	0x080078f0
 8001710:	20000354 	.word	0x20000354
 8001714:	08007900 	.word	0x08007900
 8001718:	20000358 	.word	0x20000358
 800171c:	2000035c 	.word	0x2000035c
 8001720:	08007918 	.word	0x08007918
 8001724:	20000348 	.word	0x20000348
 8001728:	08007940 	.word	0x08007940
 800172c:	2000034c 	.word	0x2000034c
 8001730:	0800796c 	.word	0x0800796c
 8001734:	20000350 	.word	0x20000350

08001738 <TaskIO_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskIO_Init */
void TaskIO_Init(void const * argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskIO_Init */
  /* Infinite loop */
  TaskIO_Entry(QueueIOHandle,TimerIOHandle);
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <TaskIO_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <TaskIO_Init+0x2c>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f8b6 	bl	80008bc <TaskIO_Entry>
  for(;;)
  {
    osDelay(50);
 8001750:	2032      	movs	r0, #50	@ 0x32
 8001752:	f002 fdbc 	bl	80042ce <osDelay>
    vTaskIO(argument);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff f9fe 	bl	8000b58 <vTaskIO>
    osDelay(50);
 800175c:	bf00      	nop
 800175e:	e7f7      	b.n	8001750 <TaskIO_Init+0x18>
 8001760:	20000354 	.word	0x20000354
 8001764:	20000360 	.word	0x20000360

08001768 <TaskAppCAN_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppCAN_Init */
void TaskAppCAN_Init(void const * argument)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppCAN_Init */
  /* Infinite loop */
  TaskAppCAN_Entry(QueueAppCANHandle,NULL);
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <TaskAppCAN_Init+0x24>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd20 	bl	80001bc <TaskAppCAN_Entry>
  for(;;)
  {
    osDelay(1);
 800177c:	2001      	movs	r0, #1
 800177e:	f002 fda6 	bl	80042ce <osDelay>
    vTaskAppCAN(argument);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe ff0c 	bl	80005a0 <vTaskAppCAN>
    osDelay(1);
 8001788:	bf00      	nop
 800178a:	e7f7      	b.n	800177c <TaskAppCAN_Init+0x14>
 800178c:	20000358 	.word	0x20000358

08001790 <TaskAppSerial_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppSerial_Init */
void TaskAppSerial_Init(void const * argument)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppSerial_Init */
  /* Infinite loop */
  TaskAppSerial_Entry(QueueAppSerialHandle,NULL);
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <TaskAppSerial_Init+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe ffc8 	bl	8000734 <TaskAppSerial_Entry>
  for(;;)
  {
    osDelay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f002 fd92 	bl	80042ce <osDelay>
    vTaskAppSerial(argument);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff f860 	bl	8000870 <vTaskAppSerial>
    osDelay(1);
 80017b0:	bf00      	nop
 80017b2:	e7f7      	b.n	80017a4 <TaskAppSerial_Init+0x14>
 80017b4:	2000035c 	.word	0x2000035c

080017b8 <vTimerCallbackIo>:
  /* USER CODE END TaskAppSerial_Init */
}

/* vTimerCallbackIo function */
void vTimerCallbackIo(void const * argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerCallbackIo */
	vLocalTimerCallbackIo(argument);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f955 	bl	8000a70 <vLocalTimerCallbackIo>
  /* USER CODE END vTimerCallbackIo */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <MX_GPIO_Init+0x114>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a3e      	ldr	r2, [pc, #248]	@ (80018e4 <MX_GPIO_Init+0x114>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b3c      	ldr	r3, [pc, #240]	@ (80018e4 <MX_GPIO_Init+0x114>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <MX_GPIO_Init+0x114>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a38      	ldr	r2, [pc, #224]	@ (80018e4 <MX_GPIO_Init+0x114>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b36      	ldr	r3, [pc, #216]	@ (80018e4 <MX_GPIO_Init+0x114>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <MX_GPIO_Init+0x114>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a32      	ldr	r2, [pc, #200]	@ (80018e4 <MX_GPIO_Init+0x114>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <MX_GPIO_Init+0x114>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <MX_GPIO_Init+0x114>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a2c      	ldr	r2, [pc, #176]	@ (80018e4 <MX_GPIO_Init+0x114>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <MX_GPIO_Init+0x114>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800184a:	4827      	ldr	r0, [pc, #156]	@ (80018e8 <MX_GPIO_Init+0x118>)
 800184c:	f001 fe5c 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001856:	4825      	ldr	r0, [pc, #148]	@ (80018ec <MX_GPIO_Init+0x11c>)
 8001858:	f001 fe56 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2302      	movs	r3, #2
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4619      	mov	r1, r3
 8001874:	481c      	ldr	r0, [pc, #112]	@ (80018e8 <MX_GPIO_Init+0x118>)
 8001876:	f001 fc17 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800187a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800187e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001880:	2303      	movs	r3, #3
 8001882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4619      	mov	r1, r3
 800188a:	4817      	ldr	r0, [pc, #92]	@ (80018e8 <MX_GPIO_Init+0x118>)
 800188c:	f001 fc0c 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001890:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8001894:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <MX_GPIO_Init+0x120>)
 80018a2:	f001 fc01 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80018a6:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 80018aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	2303      	movs	r3, #3
 80018ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <MX_GPIO_Init+0x11c>)
 80018b8:	f001 fbf6 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <MX_GPIO_Init+0x11c>)
 80018d6:	f001 fbe7 	bl	80030a8 <HAL_GPIO_Init>

}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40010800 	.word	0x40010800

080018f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f8:	f000 f9ee 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fc:	f000 f80c 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001900:	f7ff ff66 	bl	80017d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8001904:	f7ff f94e 	bl	8000ba4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001908:	f000 f940 	bl	8001b8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800190c:	f7ff fe7e 	bl	800160c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001910:	f002 fc8a 	bl	8004228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <main+0x20>

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b090      	sub	sp, #64	@ 0x40
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	2228      	movs	r2, #40	@ 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f005 facc 	bl	8006ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	2302      	movs	r3, #2
 800194e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001956:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fe05 	bl	8003570 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800196c:	f000 f819 	bl	80019a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 f872 	bl	8003a74 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001996:	f000 f804 	bl	80019a2 <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3740      	adds	r7, #64	@ 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a6:	b672      	cpsid	i
}
 80019a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019aa:	bf00      	nop
 80019ac:	e7fd      	b.n	80019aa <Error_Handler+0x8>

080019ae <psSearchEvent>:

#include "state.h"


const sStateMachineType *psSearchEvent (const sStateMachineType *psStateTable,unsigned char ucIncoming)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
    unsigned char ucEvent;

    for (;; psStateTable++)
    {
        ucEvent = psStateTable->ucEvent;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	73fb      	strb	r3, [r7, #15]
        if ((ucEvent != 0)&&(ucEvent != ucIncoming))
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <psSearchEvent+0x20>
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d101      	bne.n	80019d2 <psSearchEvent+0x24>
        {
           continue;
        }
        return psStateTable;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e004      	b.n	80019dc <psSearchEvent+0x2e>
           continue;
 80019d2:	bf00      	nop
    for (;; psStateTable++)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	330c      	adds	r3, #12
 80019d8:	607b      	str	r3, [r7, #4]
        ucEvent = psStateTable->ucEvent;
 80019da:	e7ee      	b.n	80019ba <psSearchEvent+0xc>
    }

}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <eEventHandler>:

void eEventHandler (unsigned char ucDest,const sStateMachineType *psStateTable, unsigned char *piState, sMessageType *psMessage)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4603      	mov	r3, r0
 80019f4:	73fb      	strb	r3, [r7, #15]
    unsigned char eError = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]

    if(ucDest == psMessage->ucDest)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d118      	bne.n	8001a36 <eEventHandler+0x50>
    {
        psStateTable = psSearchEvent(psStateTable, psMessage->ucEvent);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f7ff ffcf 	bl	80019ae <psSearchEvent>
 8001a10:	60b8      	str	r0, [r7, #8]

        eError = (*psStateTable->ActionFun)(psMessage);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	4798      	blx	r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]

        if (eError == 1)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d104      	bne.n	8001a2e <eEventHandler+0x48>
        {
            *piState = psStateTable->ucStateSuccess;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	7a1a      	ldrb	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	701a      	strb	r2, [r3, #0]
        else
        {
            *piState = psStateTable->ucStateFailure;
        }
    }
}
 8001a2c:	e003      	b.n	8001a36 <eEventHandler+0x50>
            *piState = psStateTable->ucStateFailure;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	7a5a      	ldrb	r2, [r3, #9]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	701a      	strb	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x68>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	210f      	movs	r1, #15
 8001a7a:	f06f 0001 	mvn.w	r0, #1
 8001a7e:	f001 f8de 	bl	8002c3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_MspInit+0x6c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_MspInit+0x6c>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae8:	f000 f93c 	bl	8001d64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001aec:	f004 fce4 	bl	80064b8 <xTaskGetSchedulerState>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001af6:	f003 f8e7 	bl	8004cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
#if 1
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b06:	f000 fd6e 	bl	80025e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002e0 	.word	0x200002e0

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f005 fa1c 	bl	8006f80 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20002800 	.word	0x20002800
 8001b74:	00000400 	.word	0x00000400
 8001b78:	20000aa4 	.word	0x20000aa4
 8001b7c:	20001af0 	.word	0x20001af0

08001b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <MX_USART1_UART_Init+0x4c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001b98:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <MX_USART1_UART_Init+0x50>)
 8001b9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_USART1_UART_Init+0x48>)
 8001bc2:	f002 f8e5 	bl	8003d90 <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001bcc:	f7ff fee9 	bl	80019a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000aa8 	.word	0x20000aa8
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	001e8480 	.word	0x001e8480

08001be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c6c <HAL_UART_MspInit+0x8c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d131      	bne.n	8001c64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_UART_MspInit+0x90>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <HAL_UART_MspInit+0x94>)
 8001c46:	f001 fa2f 	bl	80030a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <HAL_UART_MspInit+0x94>)
 8001c60:	f001 fa22 	bl	80030a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010800 	.word	0x40010800

08001c78 <hGet_USART_Handler>:
  }
}

/* USER CODE BEGIN 1 */
UART_HandleTypeDef *hGet_USART_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
	return &huart1;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <hGet_USART_Handler+0x10>)
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000aa8 	.word	0x20000aa8

08001c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff ff78 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c92:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ca8:	4c09      	ldr	r4, [pc, #36]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f005 f969 	bl	8006f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cba:	f7ff fe1b 	bl	80018f4 <main>
  bx lr
 8001cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001cc8:	08007b24 	.word	0x08007b24
  ldr r2, =_sbss
 8001ccc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001cd0:	20001af0 	.word	0x20001af0

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x28>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 ff9d 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fea4 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 ffc3 	bl	8002cae <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d40:	f000 ff7d 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_IncTick+0x1c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a03      	ldr	r2, [pc, #12]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000af0 	.word	0x20000af0

08001d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <HAL_GetTick+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000af0 	.word	0x20000af0

08001d9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <HAL_SuspendTick+0x18>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_SuspendTick+0x18>)
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_ResumeTick+0x18>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a03      	ldr	r2, [pc, #12]	@ (8001dd0 <HAL_ResumeTick+0x18>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e11c      	b.n	8002020 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d131      	bne.n	8001e56 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a8c      	ldr	r2, [pc, #560]	@ (8002028 <HAL_CAN_Init+0x254>)
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a8c      	ldr	r2, [pc, #560]	@ (800202c <HAL_CAN_Init+0x258>)
 8001dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a8b      	ldr	r2, [pc, #556]	@ (8002030 <HAL_CAN_Init+0x25c>)
 8001e02:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a8b      	ldr	r2, [pc, #556]	@ (8002034 <HAL_CAN_Init+0x260>)
 8001e08:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a8a      	ldr	r2, [pc, #552]	@ (8002038 <HAL_CAN_Init+0x264>)
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a8a      	ldr	r2, [pc, #552]	@ (800203c <HAL_CAN_Init+0x268>)
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a89      	ldr	r2, [pc, #548]	@ (8002040 <HAL_CAN_Init+0x26c>)
 8001e1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a89      	ldr	r2, [pc, #548]	@ (8002044 <HAL_CAN_Init+0x270>)
 8001e20:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a88      	ldr	r2, [pc, #544]	@ (8002048 <HAL_CAN_Init+0x274>)
 8001e26:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a88      	ldr	r2, [pc, #544]	@ (800204c <HAL_CAN_Init+0x278>)
 8001e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a87      	ldr	r2, [pc, #540]	@ (8002050 <HAL_CAN_Init+0x27c>)
 8001e32:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a87      	ldr	r2, [pc, #540]	@ (8002054 <HAL_CAN_Init+0x280>)
 8001e38:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a86      	ldr	r2, [pc, #536]	@ (8002058 <HAL_CAN_Init+0x284>)
 8001e3e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a84      	ldr	r2, [pc, #528]	@ (800205c <HAL_CAN_Init+0x288>)
 8001e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e66:	f7ff ff8f 	bl	8001d88 <HAL_GetTick>
 8001e6a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6c:	e012      	b.n	8001e94 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e6e:	f7ff ff8b 	bl	8001d88 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b0a      	cmp	r3, #10
 8001e7a:	d90b      	bls.n	8001e94 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0c5      	b.n	8002020 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0e5      	beq.n	8001e6e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0202 	bic.w	r2, r2, #2
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb2:	f7ff ff69 	bl	8001d88 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eb8:	e012      	b.n	8001ee0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eba:	f7ff ff65 	bl	8001d88 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b0a      	cmp	r3, #10
 8001ec6:	d90b      	bls.n	8001ee0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e09f      	b.n	8002020 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e5      	bne.n	8001eba <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7e1b      	ldrb	r3, [r3, #24]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e5b      	ldrb	r3, [r3, #25]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e007      	b.n	8001f42 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7e9b      	ldrb	r3, [r3, #26]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0220 	bic.w	r2, r2, #32
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7edb      	ldrb	r3, [r3, #27]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0210 	bic.w	r2, r2, #16
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0210 	orr.w	r2, r2, #16
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7f1b      	ldrb	r3, [r3, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0208 	orr.w	r2, r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0208 	bic.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7f5b      	ldrb	r3, [r3, #29]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d108      	bne.n	8001fda <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0204 	orr.w	r2, r2, #4
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e007      	b.n	8001fea <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0204 	bic.w	r2, r2, #4
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08000161 	.word	0x08000161
 800202c:	080029dd 	.word	0x080029dd
 8002030:	080029ef 	.word	0x080029ef
 8002034:	08002a01 	.word	0x08002a01
 8002038:	08002971 	.word	0x08002971
 800203c:	08002983 	.word	0x08002983
 8002040:	08002995 	.word	0x08002995
 8002044:	080029a7 	.word	0x080029a7
 8002048:	080029b9 	.word	0x080029b9
 800204c:	080029cb 	.word	0x080029cb
 8002050:	08002a13 	.word	0x08002a13
 8002054:	08002a25 	.word	0x08002a25
 8002058:	08002a37 	.word	0x08002a37
 800205c:	08000c15 	.word	0x08000c15

08002060 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002076:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d003      	beq.n	8002086 <HAL_CAN_ConfigFilter+0x26>
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b02      	cmp	r3, #2
 8002082:	f040 80aa 	bne.w	80021da <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2201      	movs	r2, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	401a      	ands	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d123      	bne.n	8002108 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3248      	adds	r2, #72	@ 0x48
 80020e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020fe:	6979      	ldr	r1, [r7, #20]
 8002100:	3348      	adds	r3, #72	@ 0x48
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d122      	bne.n	8002156 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002130:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3248      	adds	r2, #72	@ 0x48
 8002136:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800214a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	3348      	adds	r3, #72	@ 0x48
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	401a      	ands	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002170:	e007      	b.n	8002182 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	431a      	orrs	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	401a      	ands	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800219c:	e007      	b.n	80021ae <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021cc:	f023 0201 	bic.w	r2, r3, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e006      	b.n	80021e8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d12e      	bne.n	8002264 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800221e:	f7ff fdb3 	bl	8001d88 <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002224:	e012      	b.n	800224c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002226:	f7ff fdaf 	bl	8001d88 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b0a      	cmp	r3, #10
 8002232:	d90b      	bls.n	800224c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2205      	movs	r2, #5
 8002244:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e012      	b.n	8002272 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e5      	bne.n	8002226 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e006      	b.n	8002272 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d133      	bne.n	80022f6 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800229e:	f7ff fd73 	bl	8001d88 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022a4:	e012      	b.n	80022cc <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a6:	f7ff fd6f 	bl	8001d88 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	d90b      	bls.n	80022cc <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e01b      	b.n	8002304 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0e5      	beq.n	80022a6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0202 	bic.w	r2, r2, #2
 80022e8:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e006      	b.n	8002304 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002320:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d003      	beq.n	8002330 <HAL_CAN_GetRxMessage+0x24>
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b02      	cmp	r3, #2
 800232c:	f040 8103 	bne.w	8002536 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10e      	bne.n	8002354 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d116      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f7      	b.n	8002544 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0e8      	b.n	8002544 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	331b      	adds	r3, #27
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0204 	and.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10c      	bne.n	80023aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	331b      	adds	r3, #27
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e00b      	b.n	80023c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	331b      	adds	r3, #27
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	4413      	add	r3, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	331b      	adds	r3, #27
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0202 	and.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2208      	movs	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	e00b      	b.n	8002410 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	331b      	adds	r3, #27
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	4413      	add	r3, r2
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	331b      	adds	r3, #27
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	3304      	adds	r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	331b      	adds	r3, #27
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0a1a      	lsrs	r2, r3, #8
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4413      	add	r3, r2
 800247a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0c1a      	lsrs	r2, r3, #16
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	3302      	adds	r3, #2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	4413      	add	r3, r2
 8002494:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0e1a      	lsrs	r2, r3, #24
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3303      	adds	r3, #3
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3304      	adds	r3, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0a1a      	lsrs	r2, r3, #8
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	3305      	adds	r3, #5
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4413      	add	r3, r2
 80024e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0c1a      	lsrs	r2, r3, #16
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3306      	adds	r3, #6
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e1a      	lsrs	r2, r3, #24
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	3307      	adds	r3, #7
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	e007      	b.n	8002532 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e006      	b.n	8002544 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d10f      	bne.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e005      	b.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d002      	beq.n	80025ba <HAL_CAN_ActivateNotification+0x1e>
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d109      	bne.n	80025ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e006      	b.n	80025dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b08a      	sub	sp, #40	@ 0x28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8083 	beq.w	8002734 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d025      	beq.n	8002684 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e017      	b.n	8002684 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
 8002666:	e00d      	b.n	8002684 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
 800267a:	e003      	b.n	8002684 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d026      	beq.n	80026dc <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002696:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
 80026aa:	e017      	b.n	80026dc <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026be:	e00d      	b.n	80026dc <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d2:	e003      	b.n	80026dc <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d026      	beq.n	8002734 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e017      	b.n	8002734 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
 8002716:	e00d      	b.n	8002734 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
 800272a:	e003      	b.n	8002734 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2210      	movs	r2, #16
 8002756:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2208      	movs	r2, #8
 8002772:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00c      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2208      	movs	r2, #8
 80027da:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2210      	movs	r2, #16
 800281e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d07b      	beq.n	800294e <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d072      	beq.n	8002946 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d043      	beq.n	8002946 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03e      	beq.n	8002946 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ce:	2b60      	cmp	r3, #96	@ 0x60
 80028d0:	d02b      	beq.n	800292a <HAL_CAN_IRQHandler+0x344>
 80028d2:	2b60      	cmp	r3, #96	@ 0x60
 80028d4:	d82e      	bhi.n	8002934 <HAL_CAN_IRQHandler+0x34e>
 80028d6:	2b50      	cmp	r3, #80	@ 0x50
 80028d8:	d022      	beq.n	8002920 <HAL_CAN_IRQHandler+0x33a>
 80028da:	2b50      	cmp	r3, #80	@ 0x50
 80028dc:	d82a      	bhi.n	8002934 <HAL_CAN_IRQHandler+0x34e>
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d019      	beq.n	8002916 <HAL_CAN_IRQHandler+0x330>
 80028e2:	2b40      	cmp	r3, #64	@ 0x40
 80028e4:	d826      	bhi.n	8002934 <HAL_CAN_IRQHandler+0x34e>
 80028e6:	2b30      	cmp	r3, #48	@ 0x30
 80028e8:	d010      	beq.n	800290c <HAL_CAN_IRQHandler+0x326>
 80028ea:	2b30      	cmp	r3, #48	@ 0x30
 80028ec:	d822      	bhi.n	8002934 <HAL_CAN_IRQHandler+0x34e>
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d002      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x312>
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d005      	beq.n	8002902 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028f6:	e01d      	b.n	8002934 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002900:	e019      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800290a:	e014      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002914:	e00f      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800291e:	e00a      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002928:	e005      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002932:	e000      	b.n	8002936 <HAL_CAN_IRQHandler+0x350>
            break;
 8002934:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002944:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2204      	movs	r2, #4
 800294c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4906      	ldr	r1, [pc, #24]	@ (8002ae0 <__NVIC_EnableIRQ+0x34>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db12      	blt.n	8002b1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	490a      	ldr	r1, [pc, #40]	@ (8002b28 <__NVIC_DisableIRQ+0x44>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b10:	f3bf 8f4f 	dsb	sy
}
 8002b14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b16:	f3bf 8f6f 	isb	sy
}
 8002b1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	@ (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	@ (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	@ 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c08:	f7ff ff90 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff09 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff1e 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff90 	bl	8002b80 <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5f 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff11 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff1f 	bl	8002ae4 <__NVIC_DisableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff94 	bl	8002be4 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_FLASH_Program+0xd8>)
 8002ce4:	7e1b      	ldrb	r3, [r3, #24]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_FLASH_Program+0x26>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e054      	b.n	8002d98 <HAL_FLASH_Program+0xd0>
 8002cee:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <HAL_FLASH_Program+0xd8>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cf4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cf8:	f000 f898 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d144      	bne.n	8002d90 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	757b      	strb	r3, [r7, #21]
 8002d10:	e007      	b.n	8002d22 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d102      	bne.n	8002d1e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	757b      	strb	r3, [r7, #21]
 8002d1c:	e001      	b.n	8002d22 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	75bb      	strb	r3, [r7, #22]
 8002d26:	e02d      	b.n	8002d84 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d28:	7dbb      	ldrb	r3, [r7, #22]
 8002d2a:	005a      	lsls	r2, r3, #1
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	eb02 0c03 	add.w	ip, r2, r3
 8002d32:	7dbb      	ldrb	r3, [r7, #22]
 8002d34:	0119      	lsls	r1, r3, #4
 8002d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d3a:	f1c1 0620 	rsb	r6, r1, #32
 8002d3e:	f1a1 0020 	sub.w	r0, r1, #32
 8002d42:	fa22 f401 	lsr.w	r4, r2, r1
 8002d46:	fa03 f606 	lsl.w	r6, r3, r6
 8002d4a:	4334      	orrs	r4, r6
 8002d4c:	fa23 f000 	lsr.w	r0, r3, r0
 8002d50:	4304      	orrs	r4, r0
 8002d52:	fa23 f501 	lsr.w	r5, r3, r1
 8002d56:	b2a3      	uxth	r3, r4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4660      	mov	r0, ip
 8002d5c:	f000 f84a 	bl	8002df4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d60:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d64:	f000 f862 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_FLASH_Program+0xdc>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <HAL_FLASH_Program+0xdc>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002d7e:	7dbb      	ldrb	r3, [r7, #22]
 8002d80:	3301      	adds	r3, #1
 8002d82:	75bb      	strb	r3, [r7, #22]
 8002d84:	7dba      	ldrb	r2, [r7, #22]
 8002d86:	7d7b      	ldrb	r3, [r7, #21]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3cd      	bcc.n	8002d28 <HAL_FLASH_Program+0x60>
 8002d8c:	e000      	b.n	8002d90 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d90:	4b03      	ldr	r3, [pc, #12]	@ (8002da0 <HAL_FLASH_Program+0xd8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	761a      	strb	r2, [r3, #24]

  return status;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da0:	20000af8 	.word	0x20000af8
 8002da4:	40022000 	.word	0x40022000

08002da8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_FLASH_Unlock+0x40>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_FLASH_Unlock+0x40>)
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_FLASH_Unlock+0x44>)
 8002dc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002dc4:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <HAL_FLASH_Unlock+0x40>)
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_FLASH_Unlock+0x48>)
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_FLASH_Unlock+0x40>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002dda:	79fb      	ldrb	r3, [r7, #7]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	45670123 	.word	0x45670123
 8002df0:	cdef89ab 	.word	0xcdef89ab

08002df4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e00:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <FLASH_Program_HalfWord+0x30>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e06:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <FLASH_Program_HalfWord+0x34>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <FLASH_Program_HalfWord+0x34>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	887a      	ldrh	r2, [r7, #2]
 8002e16:	801a      	strh	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000af8 	.word	0x20000af8
 8002e28:	40022000 	.word	0x40022000

08002e2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7fe ffa8 	bl	8001d88 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e3a:	e010      	b.n	8002e5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e42:	d00c      	beq.n	8002e5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <FLASH_WaitForLastOperation+0x2e>
 8002e4a:	f7fe ff9d 	bl	8001d88 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d201      	bcs.n	8002e5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e025      	b.n	8002eaa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e8      	bne.n	8002e3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e76:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e78:	2220      	movs	r2, #32
 8002e7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e94:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <FLASH_WaitForLastOperation+0x88>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ea0:	f000 f80a 	bl	8002eb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ec2:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ece:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002ed8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002eee:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002ef8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	4a0f      	ldr	r2, [pc, #60]	@ (8002f54 <FLASH_SetErrorCode+0x9c>)
 8002f18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f240 1201 	movw	r2, #257	@ 0x101
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d106      	bne.n	8002f3e <FLASH_SetErrorCode+0x86>
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	61d3      	str	r3, [r2, #28]
}  
 8002f3c:	e002      	b.n	8002f44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <FLASH_SetErrorCode+0x98>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60d3      	str	r3, [r2, #12]
}  
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40022000 	.word	0x40022000
 8002f54:	20000af8 	.word	0x20000af8

08002f58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <HAL_FLASHEx_Erase+0xd0>)
 8002f6c:	7e1b      	ldrb	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_FLASHEx_Erase+0x1e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e053      	b.n	800301e <HAL_FLASHEx_Erase+0xc6>
 8002f76:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <HAL_FLASHEx_Erase+0xd0>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d116      	bne.n	8002fb2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f84:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f88:	f7ff ff50 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d141      	bne.n	8003016 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 f84c 	bl	8003030 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f9c:	f7ff ff46 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6113      	str	r3, [r2, #16]
 8002fb0:	e031      	b.n	8003016 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fb2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fb6:	f7ff ff39 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d12a      	bne.n	8003016 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fc6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	e019      	b.n	8003004 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	f000 f849 	bl	8003068 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fd6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fda:	f7ff ff27 	bl	8002e2c <FLASH_WaitForLastOperation>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	601a      	str	r2, [r3, #0]
            break;
 8002ffa:	e00c      	b.n	8003016 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003002:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	029a      	lsls	r2, r3, #10
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4413      	add	r3, r2
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d3dc      	bcc.n	8002fd0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <HAL_FLASHEx_Erase+0xd0>)
 8003018:	2200      	movs	r2, #0
 800301a:	761a      	strb	r2, [r3, #24]

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000af8 	.word	0x20000af8
 800302c:	40022000 	.word	0x40022000

08003030 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <FLASH_MassErase+0x30>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <FLASH_MassErase+0x34>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <FLASH_MassErase+0x34>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <FLASH_MassErase+0x34>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <FLASH_MassErase+0x34>)
 8003050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003054:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000af8 	.word	0x20000af8
 8003064:	40022000 	.word	0x40022000

08003068 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <FLASH_PageErase+0x38>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <FLASH_PageErase+0x3c>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4a0a      	ldr	r2, [pc, #40]	@ (80030a4 <FLASH_PageErase+0x3c>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <FLASH_PageErase+0x3c>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <FLASH_PageErase+0x3c>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <FLASH_PageErase+0x3c>)
 800308e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003092:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000af8 	.word	0x20000af8
 80030a4:	40022000 	.word	0x40022000

080030a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b08b      	sub	sp, #44	@ 0x2c
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ba:	e161      	b.n	8003380 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030bc:	2201      	movs	r2, #1
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 8150 	bne.w	800337a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a97      	ldr	r2, [pc, #604]	@ (800333c <HAL_GPIO_Init+0x294>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d05e      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
 80030e4:	4a95      	ldr	r2, [pc, #596]	@ (800333c <HAL_GPIO_Init+0x294>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d875      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 80030ea:	4a95      	ldr	r2, [pc, #596]	@ (8003340 <HAL_GPIO_Init+0x298>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d058      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
 80030f0:	4a93      	ldr	r2, [pc, #588]	@ (8003340 <HAL_GPIO_Init+0x298>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d86f      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 80030f6:	4a93      	ldr	r2, [pc, #588]	@ (8003344 <HAL_GPIO_Init+0x29c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d052      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
 80030fc:	4a91      	ldr	r2, [pc, #580]	@ (8003344 <HAL_GPIO_Init+0x29c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d869      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 8003102:	4a91      	ldr	r2, [pc, #580]	@ (8003348 <HAL_GPIO_Init+0x2a0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04c      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
 8003108:	4a8f      	ldr	r2, [pc, #572]	@ (8003348 <HAL_GPIO_Init+0x2a0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d863      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 800310e:	4a8f      	ldr	r2, [pc, #572]	@ (800334c <HAL_GPIO_Init+0x2a4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d046      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
 8003114:	4a8d      	ldr	r2, [pc, #564]	@ (800334c <HAL_GPIO_Init+0x2a4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d85d      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 800311a:	2b12      	cmp	r3, #18
 800311c:	d82a      	bhi.n	8003174 <HAL_GPIO_Init+0xcc>
 800311e:	2b12      	cmp	r3, #18
 8003120:	d859      	bhi.n	80031d6 <HAL_GPIO_Init+0x12e>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_GPIO_Init+0x80>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	080031a3 	.word	0x080031a3
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800318f 	.word	0x0800318f
 8003134:	080031d1 	.word	0x080031d1
 8003138:	080031d7 	.word	0x080031d7
 800313c:	080031d7 	.word	0x080031d7
 8003140:	080031d7 	.word	0x080031d7
 8003144:	080031d7 	.word	0x080031d7
 8003148:	080031d7 	.word	0x080031d7
 800314c:	080031d7 	.word	0x080031d7
 8003150:	080031d7 	.word	0x080031d7
 8003154:	080031d7 	.word	0x080031d7
 8003158:	080031d7 	.word	0x080031d7
 800315c:	080031d7 	.word	0x080031d7
 8003160:	080031d7 	.word	0x080031d7
 8003164:	080031d7 	.word	0x080031d7
 8003168:	080031d7 	.word	0x080031d7
 800316c:	08003185 	.word	0x08003185
 8003170:	08003199 	.word	0x08003199
 8003174:	4a76      	ldr	r2, [pc, #472]	@ (8003350 <HAL_GPIO_Init+0x2a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800317a:	e02c      	b.n	80031d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	623b      	str	r3, [r7, #32]
          break;
 8003182:	e029      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	3304      	adds	r3, #4
 800318a:	623b      	str	r3, [r7, #32]
          break;
 800318c:	e024      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	3308      	adds	r3, #8
 8003194:	623b      	str	r3, [r7, #32]
          break;
 8003196:	e01f      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	330c      	adds	r3, #12
 800319e:	623b      	str	r3, [r7, #32]
          break;
 80031a0:	e01a      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031aa:	2304      	movs	r3, #4
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e013      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b8:	2308      	movs	r3, #8
 80031ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	611a      	str	r2, [r3, #16]
          break;
 80031c2:	e009      	b.n	80031d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c4:	2308      	movs	r3, #8
 80031c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	615a      	str	r2, [r3, #20]
          break;
 80031ce:	e003      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
          break;
 80031d4:	e000      	b.n	80031d8 <HAL_GPIO_Init+0x130>
          break;
 80031d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2bff      	cmp	r3, #255	@ 0xff
 80031dc:	d801      	bhi.n	80031e2 <HAL_GPIO_Init+0x13a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	e001      	b.n	80031e6 <HAL_GPIO_Init+0x13e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2bff      	cmp	r3, #255	@ 0xff
 80031ec:	d802      	bhi.n	80031f4 <HAL_GPIO_Init+0x14c>
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	e002      	b.n	80031fa <HAL_GPIO_Init+0x152>
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	3b08      	subs	r3, #8
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	210f      	movs	r1, #15
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	6a39      	ldr	r1, [r7, #32]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	431a      	orrs	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80a9 	beq.w	800337a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003228:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x2ac>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	4a49      	ldr	r2, [pc, #292]	@ (8003354 <HAL_GPIO_Init+0x2ac>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6193      	str	r3, [r2, #24]
 8003234:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_GPIO_Init+0x2ac>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003240:	4a45      	ldr	r2, [pc, #276]	@ (8003358 <HAL_GPIO_Init+0x2b0>)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	220f      	movs	r2, #15
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3d      	ldr	r2, [pc, #244]	@ (800335c <HAL_GPIO_Init+0x2b4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00d      	beq.n	8003288 <HAL_GPIO_Init+0x1e0>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3c      	ldr	r2, [pc, #240]	@ (8003360 <HAL_GPIO_Init+0x2b8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <HAL_GPIO_Init+0x1dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3b      	ldr	r2, [pc, #236]	@ (8003364 <HAL_GPIO_Init+0x2bc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_GPIO_Init+0x1d8>
 800327c:	2302      	movs	r3, #2
 800327e:	e004      	b.n	800328a <HAL_GPIO_Init+0x1e2>
 8003280:	2303      	movs	r3, #3
 8003282:	e002      	b.n	800328a <HAL_GPIO_Init+0x1e2>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_GPIO_Init+0x1e2>
 8003288:	2300      	movs	r3, #0
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329a:	492f      	ldr	r1, [pc, #188]	@ (8003358 <HAL_GPIO_Init+0x2b0>)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	492b      	ldr	r1, [pc, #172]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c2:	4b29      	ldr	r3, [pc, #164]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4927      	ldr	r1, [pc, #156]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032dc:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4921      	ldr	r1, [pc, #132]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	491d      	ldr	r1, [pc, #116]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003304:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4917      	ldr	r1, [pc, #92]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003312:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	43db      	mvns	r3, r3
 800331a:	4913      	ldr	r1, [pc, #76]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 800331c:	4013      	ands	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01f      	beq.n	800336c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	490d      	ldr	r1, [pc, #52]	@ (8003368 <HAL_GPIO_Init+0x2c0>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e01f      	b.n	800337a <HAL_GPIO_Init+0x2d2>
 800333a:	bf00      	nop
 800333c:	10320000 	.word	0x10320000
 8003340:	10310000 	.word	0x10310000
 8003344:	10220000 	.word	0x10220000
 8003348:	10210000 	.word	0x10210000
 800334c:	10120000 	.word	0x10120000
 8003350:	10110000 	.word	0x10110000
 8003354:	40021000 	.word	0x40021000
 8003358:	40010000 	.word	0x40010000
 800335c:	40010800 	.word	0x40010800
 8003360:	40010c00 	.word	0x40010c00
 8003364:	40011000 	.word	0x40011000
 8003368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_GPIO_Init+0x2f4>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	43db      	mvns	r3, r3
 8003374:	4909      	ldr	r1, [pc, #36]	@ (800339c <HAL_GPIO_Init+0x2f4>)
 8003376:	4013      	ands	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	3301      	adds	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f ae96 	bne.w	80030bc <HAL_GPIO_Init+0x14>
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	372c      	adds	r7, #44	@ 0x2c
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40010400 	.word	0x40010400

080033a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80033ae:	e094      	b.n	80034da <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8087 	beq.w	80034d4 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80033c6:	4a4b      	ldr	r2, [pc, #300]	@ (80034f4 <HAL_GPIO_DeInit+0x154>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a43      	ldr	r2, [pc, #268]	@ (80034f8 <HAL_GPIO_DeInit+0x158>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00d      	beq.n	800340c <HAL_GPIO_DeInit+0x6c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a42      	ldr	r2, [pc, #264]	@ (80034fc <HAL_GPIO_DeInit+0x15c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <HAL_GPIO_DeInit+0x68>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a41      	ldr	r2, [pc, #260]	@ (8003500 <HAL_GPIO_DeInit+0x160>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_GPIO_DeInit+0x64>
 8003400:	2302      	movs	r3, #2
 8003402:	e004      	b.n	800340e <HAL_GPIO_DeInit+0x6e>
 8003404:	2303      	movs	r3, #3
 8003406:	e002      	b.n	800340e <HAL_GPIO_DeInit+0x6e>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_GPIO_DeInit+0x6e>
 800340c:	2300      	movs	r3, #0
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	429a      	cmp	r2, r3
 800341c:	d132      	bne.n	8003484 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800341e:	4b39      	ldr	r3, [pc, #228]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	43db      	mvns	r3, r3
 8003426:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 8003428:	4013      	ands	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800342c:	4b35      	ldr	r3, [pc, #212]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	43db      	mvns	r3, r3
 8003434:	4933      	ldr	r1, [pc, #204]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 8003436:	4013      	ands	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800343a:	4b32      	ldr	r3, [pc, #200]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	43db      	mvns	r3, r3
 8003442:	4930      	ldr	r1, [pc, #192]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 8003444:	4013      	ands	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003448:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	43db      	mvns	r3, r3
 8003450:	492c      	ldr	r1, [pc, #176]	@ (8003504 <HAL_GPIO_DeInit+0x164>)
 8003452:	4013      	ands	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003466:	4a23      	ldr	r2, [pc, #140]	@ (80034f4 <HAL_GPIO_DeInit+0x154>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	481f      	ldr	r0, [pc, #124]	@ (80034f4 <HAL_GPIO_DeInit+0x154>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	400a      	ands	r2, r1
 800347e:	3302      	adds	r3, #2
 8003480:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2bff      	cmp	r3, #255	@ 0xff
 8003488:	d801      	bhi.n	800348e <HAL_GPIO_DeInit+0xee>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	e001      	b.n	8003492 <HAL_GPIO_DeInit+0xf2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2bff      	cmp	r3, #255	@ 0xff
 8003498:	d802      	bhi.n	80034a0 <HAL_GPIO_DeInit+0x100>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_DeInit+0x106>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3b08      	subs	r3, #8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	210f      	movs	r1, #15
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	2104      	movs	r1, #4
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f af64 	bne.w	80033b0 <HAL_GPIO_DeInit+0x10>
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010800 	.word	0x40010800
 80034fc:	40010c00 	.word	0x40010c00
 8003500:	40011000 	.word	0x40011000
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_PWR_EnterSLEEPMode+0x34>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_PWR_EnterSLEEPMode+0x34>)
 800354a:	f023 0304 	bic.w	r3, r3, #4
 800354e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003556:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003558:	e002      	b.n	8003560 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800355a:	bf40      	sev
    __WFE();
 800355c:	bf20      	wfe
    __WFE();
 800355e:	bf20      	wfe
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e272      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8087 	beq.w	800369e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003590:	4b92      	ldr	r3, [pc, #584]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800359c:	4b8f      	ldr	r3, [pc, #572]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d112      	bne.n	80035ce <HAL_RCC_OscConfig+0x5e>
 80035a8:	4b8c      	ldr	r3, [pc, #560]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d10b      	bne.n	80035ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b6:	4b89      	ldr	r3, [pc, #548]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d06c      	beq.n	800369c <HAL_RCC_OscConfig+0x12c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d168      	bne.n	800369c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e24c      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x76>
 80035d8:	4b80      	ldr	r3, [pc, #512]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7f      	ldr	r2, [pc, #508]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	e02e      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b7b      	ldr	r3, [pc, #492]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7a      	ldr	r2, [pc, #488]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b78      	ldr	r3, [pc, #480]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a77      	ldr	r2, [pc, #476]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e01d      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0xbc>
 8003612:	4b72      	ldr	r3, [pc, #456]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a71      	ldr	r2, [pc, #452]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0xd4>
 800362c:	4b6b      	ldr	r3, [pc, #428]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6a      	ldr	r2, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b68      	ldr	r3, [pc, #416]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a67      	ldr	r2, [pc, #412]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 800363e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003642:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fb9c 	bl	8001d88 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7fe fb98 	bl	8001d88 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	@ 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e200      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0xe4>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fb88 	bl	8001d88 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe fb84 	bl	8001d88 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1ec      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x10c>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d063      	beq.n	8003772 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036aa:	4b4c      	ldr	r3, [pc, #304]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036b6:	4b49      	ldr	r3, [pc, #292]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d11c      	bne.n	80036fc <HAL_RCC_OscConfig+0x18c>
 80036c2:	4b46      	ldr	r3, [pc, #280]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d116      	bne.n	80036fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	4b43      	ldr	r3, [pc, #268]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x176>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1c0      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4939      	ldr	r1, [pc, #228]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	e03a      	b.n	8003772 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003704:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fb3d 	bl	8001d88 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003712:	f7fe fb39 	bl	8001d88 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1a1      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	4b2d      	ldr	r3, [pc, #180]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b2a      	ldr	r3, [pc, #168]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4927      	ldr	r1, [pc, #156]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
 8003744:	e015      	b.n	8003772 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003746:	4b26      	ldr	r3, [pc, #152]	@ (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fb1c 	bl	8001d88 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003754:	f7fe fb18 	bl	8001d88 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e180      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03a      	beq.n	80037f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d019      	beq.n	80037ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003786:	4b17      	ldr	r3, [pc, #92]	@ (80037e4 <HAL_RCC_OscConfig+0x274>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fe fafc 	bl	8001d88 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fe faf8 	bl	8001d88 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e160      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <HAL_RCC_OscConfig+0x26c>)
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037b2:	2001      	movs	r0, #1
 80037b4:	f000 face 	bl	8003d54 <RCC_Delay>
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_RCC_OscConfig+0x274>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fe fae2 	bl	8001d88 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c6:	e00f      	b.n	80037e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c8:	f7fe fade 	bl	8001d88 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e146      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	42420000 	.word	0x42420000
 80037e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b92      	ldr	r3, [pc, #584]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e9      	bne.n	80037c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a6 	beq.w	800394e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b8b      	ldr	r3, [pc, #556]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	4a87      	ldr	r2, [pc, #540]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381c:	61d3      	str	r3, [r2, #28]
 800381e:	4b85      	ldr	r3, [pc, #532]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b82      	ldr	r3, [pc, #520]	@ (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe fa9f 	bl	8001d88 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe fa9b 	bl	8001d88 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	@ 0x64
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e103      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <HAL_RCC_OscConfig+0x4c8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x312>
 8003874:	4b6f      	ldr	r3, [pc, #444]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4a6e      	ldr	r2, [pc, #440]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6213      	str	r3, [r2, #32]
 8003880:	e02d      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x334>
 800388a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a69      	ldr	r2, [pc, #420]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a66      	ldr	r2, [pc, #408]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	e01c      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x356>
 80038ac:	4b61      	ldr	r3, [pc, #388]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a60      	ldr	r2, [pc, #384]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	e00b      	b.n	80038de <HAL_RCC_OscConfig+0x36e>
 80038c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6213      	str	r3, [r2, #32]
 80038d2:	4b58      	ldr	r3, [pc, #352]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a57      	ldr	r2, [pc, #348]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d015      	beq.n	8003912 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fa4f 	bl	8001d88 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fa4b 	bl	8001d88 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0b1      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b4b      	ldr	r3, [pc, #300]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ee      	beq.n	80038ee <HAL_RCC_OscConfig+0x37e>
 8003910:	e014      	b.n	800393c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003912:	f7fe fa39 	bl	8001d88 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fa35 	bl	8001d88 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e09b      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	4b40      	ldr	r3, [pc, #256]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a3b      	ldr	r2, [pc, #236]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8087 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d061      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d146      	bne.n	80039fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b33      	ldr	r3, [pc, #204]	@ (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fe fa09 	bl	8001d88 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7fe fa05 	bl	8001d88 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e06d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398c:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d108      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039a2:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4921      	ldr	r1, [pc, #132]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a19      	ldr	r1, [r3, #32]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	430b      	orrs	r3, r1
 80039c6:	491b      	ldr	r1, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe f9d9 	bl	8001d88 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe f9d5 	bl	8001d88 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x46a>
 80039f8:	e035      	b.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe f9c2 	bl	8001d88 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe f9be 	bl	8001d88 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e026      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x498>
 8003a26:	e01e      	b.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e019      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_OscConfig+0x500>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d0      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d910      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b67      	ldr	r3, [pc, #412]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4965      	ldr	r1, [pc, #404]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ada:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a52      	ldr	r2, [pc, #328]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003af2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d040      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d115      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b41      	ldr	r3, [pc, #260]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e073      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3d      	ldr	r3, [pc, #244]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4936      	ldr	r1, [pc, #216]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fe f910 	bl	8001d88 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe f90c 	bl	8001d88 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e053      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d210      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	4922      	ldr	r1, [pc, #136]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bee:	4b12      	ldr	r3, [pc, #72]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	@ (8003c40 <HAL_RCC_ClockConfig+0x1cc>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <HAL_RCC_ClockConfig+0x1d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe f86e 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	08007ab4 	.word	0x08007ab4
 8003c40:	20000000 	.word	0x20000000
 8003c44:	20000004 	.word	0x20000004

08003c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c62:	4b1e      	ldr	r3, [pc, #120]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x30>
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x36>
 8003c76:	e027      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c78:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c7a:	613b      	str	r3, [r7, #16]
      break;
 8003c7c:	e027      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	0c9b      	lsrs	r3, r3, #18
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	4a17      	ldr	r2, [pc, #92]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c88:	5cd3      	ldrb	r3, [r2, r3]
 8003c8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c96:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0c5b      	lsrs	r3, r3, #17
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	4a11      	ldr	r2, [pc, #68]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ca2:	5cd3      	ldrb	r3, [r2, r3]
 8003ca4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003caa:	fb03 f202 	mul.w	r2, r3, r2
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0c      	ldr	r2, [pc, #48]	@ (8003cec <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	613b      	str	r3, [r7, #16]
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cca:	613b      	str	r3, [r7, #16]
      break;
 8003ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cce:	693b      	ldr	r3, [r7, #16]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	007a1200 	.word	0x007a1200
 8003ce4:	08007acc 	.word	0x08007acc
 8003ce8:	08007adc 	.word	0x08007adc
 8003cec:	003d0900 	.word	0x003d0900

08003cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf4:	4b02      	ldr	r3, [pc, #8]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff2 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4903      	ldr	r1, [pc, #12]	@ (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40021000 	.word	0x40021000
 8003d28:	08007ac4 	.word	0x08007ac4

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d30:	f7ff ffde 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	0adb      	lsrs	r3, r3, #11
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	@ (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	08007ac4 	.word	0x08007ac4

08003d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <RCC_Delay+0x34>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <RCC_Delay+0x38>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a5b      	lsrs	r3, r3, #9
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d70:	bf00      	nop
  }
  while (Delay --);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f9      	bne.n	8003d70 <RCC_Delay+0x1c>
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e042      	b.n	8003e28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd ff12 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	@ 0x24
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f971 	bl	80040bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	@ 0x28
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d175      	bne.n	8003f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_UART_Transmit+0x2c>
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e06e      	b.n	8003f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	@ 0x21
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6e:	f7fd ff8b 	bl	8001d88 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e88:	d108      	bne.n	8003e9c <HAL_UART_Transmit+0x6c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e003      	b.n	8003ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ea4:	e02e      	b.n	8003f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	@ 0x80
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f848 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e03a      	b.n	8003f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	e007      	b.n	8003ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1cb      	bne.n	8003ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	2140      	movs	r1, #64	@ 0x40
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f814 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	e03b      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f5e:	d037      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fd ff12 	bl	8001d88 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	6a3a      	ldr	r2, [r7, #32]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e03a      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d023      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d020      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d01d      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d116      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f81d 	bl	8003ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e00f      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d0b4      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b095      	sub	sp, #84	@ 0x54
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004020:	643a      	str	r2, [r7, #64]	@ 0x40
 8004022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004026:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d119      	bne.n	80040a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	647b      	str	r3, [r7, #68]	@ 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004090:	61ba      	str	r2, [r7, #24]
 8004092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040b2:	bf00      	nop
 80040b4:	3754      	adds	r7, #84	@ 0x54
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040f6:	f023 030c 	bic.w	r3, r3, #12
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	430b      	orrs	r3, r1
 8004102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <UART_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff fe02 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	e002      	b.n	8004132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7ff fdea 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	4a22      	ldr	r2, [pc, #136]	@ (80041d4 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	0119      	lsls	r1, r3, #4
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <UART_SetConfig+0x118>)
 800416a:	fba3 0302 	umull	r0, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2064      	movs	r0, #100	@ 0x64
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	@ 0x32
 800417c:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <UART_SetConfig+0x118>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004188:	4419      	add	r1, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	@ 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	@ 0x32
 80041b4:	4a07      	ldr	r2, [pc, #28]	@ (80041d4 <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	440a      	add	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013800 	.word	0x40013800
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ea:	2b84      	cmp	r3, #132	@ 0x84
 80041ec:	d005      	beq.n	80041fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	3303      	adds	r3, #3
 80041f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800420c:	f3ef 8305 	mrs	r3, IPSR
 8004210:	607b      	str	r3, [r7, #4]
  return(result);
 8004212:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800422c:	f001 fce6 	bl	8005bfc <vTaskStartScheduler>
  
  return osOK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	bd80      	pop	{r7, pc}

08004236 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004238:	b089      	sub	sp, #36	@ 0x24
 800423a:	af04      	add	r7, sp, #16
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <osThreadCreate+0x54>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685c      	ldr	r4, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691e      	ldr	r6, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ffb8 	bl	80041d8 <makeFreeRtosPriority>
 8004268:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004272:	9202      	str	r2, [sp, #8]
 8004274:	9301      	str	r3, [sp, #4]
 8004276:	9100      	str	r1, [sp, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4632      	mov	r2, r6
 800427c:	4629      	mov	r1, r5
 800427e:	4620      	mov	r0, r4
 8004280:	f001 fad6 	bl	8005830 <xTaskCreateStatic>
 8004284:	4603      	mov	r3, r0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e01c      	b.n	80042c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685c      	ldr	r4, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004296:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff9a 	bl	80041d8 <makeFreeRtosPriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f107 030c 	add.w	r3, r7, #12
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	9200      	str	r2, [sp, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4632      	mov	r2, r6
 80042b2:	4629      	mov	r1, r5
 80042b4:	4620      	mov	r0, r4
 80042b6:	f001 fb1b 	bl	80058f0 <xTaskCreate>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d001      	beq.n	80042c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <osDelay+0x16>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	e000      	b.n	80042e6 <osDelay+0x18>
 80042e4:	2301      	movs	r3, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 fc52 	bl	8005b90 <vTaskDelay>
  
  return osOK;
 80042ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	460b      	mov	r3, r1
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d013      	beq.n	8004336 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <osTimerCreate+0x20>
 8004314:	2101      	movs	r1, #1
 8004316:	e000      	b.n	800431a <osTimerCreate+0x22>
 8004318:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004322:	9201      	str	r2, [sp, #4]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	460a      	mov	r2, r1
 800432a:	2101      	movs	r1, #1
 800432c:	480b      	ldr	r0, [pc, #44]	@ (800435c <osTimerCreate+0x64>)
 800432e:	f002 fa3a 	bl	80067a6 <xTimerCreateStatic>
 8004332:	4603      	mov	r3, r0
 8004334:	e00e      	b.n	8004354 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004336:	7afb      	ldrb	r3, [r7, #11]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <osTimerCreate+0x48>
 800433c:	2201      	movs	r2, #1
 800433e:	e000      	b.n	8004342 <osTimerCreate+0x4a>
 8004340:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2101      	movs	r1, #1
 800434c:	4803      	ldr	r0, [pc, #12]	@ (800435c <osTimerCreate+0x64>)
 800434e:	f002 fa09 	bl	8006764 <xTimerCreate>
 8004352:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	08007988 	.word	0x08007988

08004360 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <osTimerStart+0x20>
    ticks = 1;
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8004380:	f7ff ff41 	bl	8004206 <inHandlerMode>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01a      	beq.n	80043c0 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	2200      	movs	r2, #0
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	2109      	movs	r1, #9
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f002 fa82 	bl	80068a0 <xTimerGenericCommand>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d002      	beq.n	80043a8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80043a2:	23ff      	movs	r3, #255	@ 0xff
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e018      	b.n	80043da <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <osTimerStart+0x7a>
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <osTimerStart+0x84>)
 80043b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	e00c      	b.n	80043da <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	2104      	movs	r1, #4
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f002 fa68 	bl	80068a0 <xTimerGenericCommand>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <osTimerStart+0x7a>
      result = osErrorOS;
 80043d6:	23ff      	movs	r3, #255	@ 0xff
 80043d8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80043da:	697b      	ldr	r3, [r7, #20]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80043f8:	f7ff ff05 	bl	8004206 <inHandlerMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d019      	beq.n	8004436 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	2200      	movs	r2, #0
 8004408:	9200      	str	r2, [sp, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2108      	movs	r1, #8
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f002 fa46 	bl	80068a0 <xTimerGenericCommand>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <osTimerStop+0x36>
      return osErrorOS;
 800441a:	23ff      	movs	r3, #255	@ 0xff
 800441c:	e019      	b.n	8004452 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <osTimerStop+0x68>
 8004424:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <osTimerStop+0x74>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	e00c      	b.n	8004450 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	2200      	movs	r2, #0
 800443e:	2103      	movs	r1, #3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f002 fa2d 	bl	80068a0 <xTimerGenericCommand>
 8004446:	4603      	mov	r3, r0
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <osTimerStop+0x68>
      result = osErrorOS;
 800444c:	23ff      	movs	r3, #255	@ 0xff
 800444e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000ed04 	.word	0xe000ed04

08004460 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b085      	sub	sp, #20
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <osMessageCreate+0x36>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2400      	movs	r4, #0
 800448c:	9400      	str	r4, [sp, #0]
 800448e:	f000 fd09 	bl	8004ea4 <xQueueGenericCreateStatic>
 8004492:	4603      	mov	r3, r0
 8004494:	e008      	b.n	80044a8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	4619      	mov	r1, r3
 80044a2:	f000 fd7c 	bl	8004f9e <xQueueGenericCreate>
 80044a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}

080044b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044bc:	f001 fc0e 	bl	8005cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004634 <pvPortMalloc+0x184>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044c8:	f000 f924 	bl	8004714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004638 <pvPortMalloc+0x188>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 8095 	bne.w	8004604 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01e      	beq.n	800451e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044e0:	2208      	movs	r2, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f023 0307 	bic.w	r3, r3, #7
 80044f8:	3308      	adds	r3, #8
 80044fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	e7fd      	b.n	800451a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d06f      	beq.n	8004604 <pvPortMalloc+0x154>
 8004524:	4b45      	ldr	r3, [pc, #276]	@ (800463c <pvPortMalloc+0x18c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d86a      	bhi.n	8004604 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800452e:	4b44      	ldr	r3, [pc, #272]	@ (8004640 <pvPortMalloc+0x190>)
 8004530:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004532:	4b43      	ldr	r3, [pc, #268]	@ (8004640 <pvPortMalloc+0x190>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004538:	e004      	b.n	8004544 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d903      	bls.n	8004556 <pvPortMalloc+0xa6>
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f1      	bne.n	800453a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004556:	4b37      	ldr	r3, [pc, #220]	@ (8004634 <pvPortMalloc+0x184>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455c:	429a      	cmp	r2, r3
 800455e:	d051      	beq.n	8004604 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2208      	movs	r2, #8
 8004566:	4413      	add	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad2      	subs	r2, r2, r3
 800457a:	2308      	movs	r3, #8
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	d920      	bls.n	80045c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <pvPortMalloc+0xfc>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045be:	69b8      	ldr	r0, [r7, #24]
 80045c0:	f000 f90a 	bl	80047d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <pvPortMalloc+0x18c>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	4a1b      	ldr	r2, [pc, #108]	@ (800463c <pvPortMalloc+0x18c>)
 80045d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045d2:	4b1a      	ldr	r3, [pc, #104]	@ (800463c <pvPortMalloc+0x18c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <pvPortMalloc+0x194>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d203      	bcs.n	80045e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045de:	4b17      	ldr	r3, [pc, #92]	@ (800463c <pvPortMalloc+0x18c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <pvPortMalloc+0x194>)
 80045e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <pvPortMalloc+0x188>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045fa:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <pvPortMalloc+0x198>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	4a11      	ldr	r2, [pc, #68]	@ (8004648 <pvPortMalloc+0x198>)
 8004602:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004604:	f001 fb78 	bl	8005cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <pvPortMalloc+0x17a>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60fb      	str	r3, [r7, #12]
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	e7fd      	b.n	8004626 <pvPortMalloc+0x176>
	return pvReturn;
 800462a:	69fb      	ldr	r3, [r7, #28]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	@ 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20001720 	.word	0x20001720
 8004638:	20001734 	.word	0x20001734
 800463c:	20001724 	.word	0x20001724
 8004640:	20001718 	.word	0x20001718
 8004644:	20001728 	.word	0x20001728
 8004648:	2000172c 	.word	0x2000172c

0800464c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04f      	beq.n	80046fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800465e:	2308      	movs	r3, #8
 8004660:	425b      	negs	r3, r3
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <vPortFree+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <vPortFree+0x46>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	60fb      	str	r3, [r7, #12]
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	e7fd      	b.n	800468e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <vPortFree+0x66>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	60bb      	str	r3, [r7, #8]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <vPortFree+0xbc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01e      	beq.n	80046fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11a      	bne.n	80046fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <vPortFree+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046d8:	f001 fb00 	bl	8005cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <vPortFree+0xc0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <vPortFree+0xc0>)
 80046e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f000 f874 	bl	80047d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046f0:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <vPortFree+0xc4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a06      	ldr	r2, [pc, #24]	@ (8004710 <vPortFree+0xc4>)
 80046f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046fa:	f001 fafd 	bl	8005cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20001734 	.word	0x20001734
 800470c:	20001724 	.word	0x20001724
 8004710:	20001730 	.word	0x20001730

08004714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800471a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800471e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004720:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <prvHeapInit+0xac>)
 8004722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3307      	adds	r3, #7
 8004732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0307 	bic.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	4a1f      	ldr	r2, [pc, #124]	@ (80047c0 <prvHeapInit+0xac>)
 8004744:	4413      	add	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <prvHeapInit+0xb0>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004752:	4b1c      	ldr	r3, [pc, #112]	@ (80047c4 <prvHeapInit+0xb0>)
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4413      	add	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004760:	2208      	movs	r2, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <prvHeapInit+0xb4>)
 8004774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004776:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <prvHeapInit+0xb4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <prvHeapInit+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	1ad2      	subs	r2, r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004794:	4b0c      	ldr	r3, [pc, #48]	@ (80047c8 <prvHeapInit+0xb4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <prvHeapInit+0xb8>)
 80047a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a09      	ldr	r2, [pc, #36]	@ (80047d0 <prvHeapInit+0xbc>)
 80047aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <prvHeapInit+0xc0>)
 80047ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000b18 	.word	0x20000b18
 80047c4:	20001718 	.word	0x20001718
 80047c8:	20001720 	.word	0x20001720
 80047cc:	20001728 	.word	0x20001728
 80047d0:	20001724 	.word	0x20001724
 80047d4:	20001734 	.word	0x20001734

080047d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047e0:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <prvInsertBlockIntoFreeList+0xa8>)
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <prvInsertBlockIntoFreeList+0x14>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d8f7      	bhi.n	80047e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d108      	bne.n	800481a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d118      	bne.n	8004860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b14      	ldr	r3, [pc, #80]	@ (8004884 <prvInsertBlockIntoFreeList+0xac>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d00d      	beq.n	8004856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e008      	b.n	8004868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <prvInsertBlockIntoFreeList+0xac>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e003      	b.n	8004868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d002      	beq.n	8004876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	20001718 	.word	0x20001718
 8004884:	20001720 	.word	0x20001720

08004888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 0208 	add.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f103 0208 	add.w	r2, r3, #8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f103 0208 	add.w	r2, r3, #8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800493a:	d103      	bne.n	8004944 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e00c      	b.n	800495e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3308      	adds	r3, #8
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e002      	b.n	8004952 <vListInsert+0x2e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d2f6      	bcs.n	800494c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d103      	bne.n	80049c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr
	...

080049e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b04      	subs	r3, #4
 80049f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3b04      	subs	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a18:	4a08      	ldr	r2, [pc, #32]	@ (8004a3c <pxPortInitialiseStack+0x54>)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3b14      	subs	r3, #20
 8004a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3b20      	subs	r3, #32
 8004a2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	08004a41 	.word	0x08004a41

08004a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a4a:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <prvTaskExitError+0x54>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a52:	d00b      	beq.n	8004a6c <prvTaskExitError+0x2c>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60fb      	str	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <prvTaskExitError+0x28>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60bb      	str	r3, [r7, #8]
}
 8004a7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a80:	bf00      	nop
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0fc      	beq.n	8004a82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	2000000c 	.word	0x2000000c
	...

08004aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <pxCurrentTCBConst2>)
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	6808      	ldr	r0, [r1, #0]
 8004aa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aaa:	f380 8809 	msr	PSP, r0
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8811 	msr	BASEPRI, r0
 8004aba:	f04e 0e0d 	orr.w	lr, lr, #13
 8004abe:	4770      	bx	lr

08004ac0 <pxCurrentTCBConst2>:
 8004ac0:	20001780 	.word	0x20001780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ac8:	4806      	ldr	r0, [pc, #24]	@ (8004ae4 <prvPortStartFirstTask+0x1c>)
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f380 8808 	msr	MSP, r0
 8004ad2:	b662      	cpsie	i
 8004ad4:	b661      	cpsie	f
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	df00      	svc	0
 8004ae0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed08 	.word	0xe000ed08

08004ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aee:	4b32      	ldr	r3, [pc, #200]	@ (8004bb8 <xPortStartScheduler+0xd0>)
 8004af0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	22ff      	movs	r2, #255	@ 0xff
 8004afe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b2a      	ldr	r3, [pc, #168]	@ (8004bbc <xPortStartScheduler+0xd4>)
 8004b14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b18:	2207      	movs	r2, #7
 8004b1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b1c:	e009      	b.n	8004b32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004b1e:	4b28      	ldr	r3, [pc, #160]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4a26      	ldr	r2, [pc, #152]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d0ef      	beq.n	8004b1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d00b      	beq.n	8004b62 <xPortStartScheduler+0x7a>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b62:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b6c:	4b14      	ldr	r3, [pc, #80]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b74:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <xPortStartScheduler+0xd8>)
 8004b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <xPortStartScheduler+0xdc>)
 8004b92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b98:	f000 f8b8 	bl	8004d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <xPortStartScheduler+0xe0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba2:	f7ff ff91 	bl	8004ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ba6:	f001 fa0d 	bl	8005fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8004baa:	f7ff ff49 	bl	8004a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000e400 	.word	0xe000e400
 8004bbc:	20001738 	.word	0x20001738
 8004bc0:	2000173c 	.word	0x2000173c
 8004bc4:	e000ed20 	.word	0xe000ed20
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	607b      	str	r3, [r7, #4]
}
 8004be4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004bee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <vPortEnterCritical+0x58>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d110      	bne.n	8004c1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <vPortEnterCritical+0x5c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <vPortEnterCritical+0x4e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	603b      	str	r3, [r7, #0]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <vPortEnterCritical+0x4a>
	}
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	2000000c 	.word	0x2000000c
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <vPortExitCritical+0x26>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vPortExitCritical+0x50>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <vPortExitCritical+0x44>
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c9a:	f380 8811 	msr	BASEPRI, r0
 8004c9e:	f001 f991 	bl	8005fc4 <vTaskSwitchContext>
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cb6:	f380 8809 	msr	PSP, r0
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	4770      	bx	lr

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	20001780 	.word	0x20001780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f001 f8b5 	bl	8005e50 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <vPortSetupTimerInterrupt+0x30>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	4a08      	ldr	r2, [pc, #32]	@ (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d2e:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <vPortSetupTimerInterrupt+0x30>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	e000e010 	.word	0xe000e010
 8004d40:	e000e018 	.word	0xe000e018
 8004d44:	20000000 	.word	0x20000000
 8004d48:	10624dd3 	.word	0x10624dd3
 8004d4c:	e000e014 	.word	0xe000e014

08004d50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d56:	f3ef 8305 	mrs	r3, IPSR
 8004d5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d915      	bls.n	8004d8e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d62:	4a17      	ldr	r2, [pc, #92]	@ (8004dc0 <vPortValidateInterruptPriority+0x70>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d6c:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <vPortValidateInterruptPriority+0x74>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	7afa      	ldrb	r2, [r7, #11]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d20b      	bcs.n	8004d8e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	607b      	str	r3, [r7, #4]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <vPortValidateInterruptPriority+0x78>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <vPortValidateInterruptPriority+0x7c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90b      	bls.n	8004db6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	603b      	str	r3, [r7, #0]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <vPortValidateInterruptPriority+0x62>
	}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	e000e3f0 	.word	0xe000e3f0
 8004dc4:	20001738 	.word	0x20001738
 8004dc8:	e000ed0c 	.word	0xe000ed0c
 8004dcc:	2000173c 	.word	0x2000173c

08004dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <xQueueGenericReset+0x2c>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60bb      	str	r3, [r7, #8]
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004dfc:	f7ff fee6 	bl	8004bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	441a      	add	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	22ff      	movs	r2, #255	@ 0xff
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	22ff      	movs	r2, #255	@ 0xff
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d114      	bne.n	8004e7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01a      	beq.n	8004e90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3310      	adds	r3, #16
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 f964 	bl	800612c <xTaskRemoveFromEventList>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <xQueueGenericReset+0xd0>)
 8004e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	e009      	b.n	8004e90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fd01 	bl	8004888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3324      	adds	r3, #36	@ 0x24
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fcfc 	bl	8004888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e90:	f7ff fecc 	bl	8004c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	@ 0x38
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <xQueueGenericCreateStatic+0x56>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xQueueGenericCreateStatic+0x5a>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericCreateStatic+0x5c>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <xQueueGenericCreateStatic+0x84>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueGenericCreateStatic+0x88>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueGenericCreateStatic+0x8a>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fb      	str	r3, [r7, #28]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f4a:	2348      	movs	r3, #72	@ 0x48
 8004f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b48      	cmp	r3, #72	@ 0x48
 8004f52:	d00b      	beq.n	8004f6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	61bb      	str	r3, [r7, #24]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f840 	bl	8005014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3730      	adds	r7, #48	@ 0x30
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	@ 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xQueueGenericCreate+0x2c>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	613b      	str	r3, [r7, #16]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3348      	adds	r3, #72	@ 0x48
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fa69 	bl	80044b0 <pvPortMalloc>
 8004fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3348      	adds	r3, #72	@ 0x48
 8004fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff8:	79fa      	ldrb	r2, [r7, #7]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f805 	bl	8005014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800500a:	69bb      	ldr	r3, [r7, #24]
	}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005042:	2101      	movs	r1, #1
 8005044:	69b8      	ldr	r0, [r7, #24]
 8005046:	f7ff fec3 	bl	8004dd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	@ 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005062:	2300      	movs	r3, #0
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <xQueueGenericSend+0x34>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	e7fd      	b.n	8005084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <xQueueGenericSend+0x42>
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <xQueueGenericSend+0x46>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <xQueueGenericSend+0x48>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <xQueueGenericSend+0x64>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d103      	bne.n	80050c6 <xQueueGenericSend+0x72>
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <xQueueGenericSend+0x76>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <xQueueGenericSend+0x78>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xQueueGenericSend+0x94>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	623b      	str	r3, [r7, #32]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e8:	f001 f9e6 	bl	80064b8 <xTaskGetSchedulerState>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <xQueueGenericSend+0xa4>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <xQueueGenericSend+0xa8>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <xQueueGenericSend+0xaa>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <xQueueGenericSend+0xc6>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	61fb      	str	r3, [r7, #28]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800511a:	f7ff fd57 	bl	8004bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <xQueueGenericSend+0xdc>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d129      	bne.n	8005184 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005136:	f000 fa0f 	bl	8005558 <prvCopyDataToQueue>
 800513a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	3324      	adds	r3, #36	@ 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ffef 	bl	800612c <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005154:	4b3f      	ldr	r3, [pc, #252]	@ (8005254 <xQueueGenericSend+0x200>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	e00a      	b.n	800517c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800516c:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <xQueueGenericSend+0x200>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800517c:	f7ff fd56 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8005180:	2301      	movs	r3, #1
 8005182:	e063      	b.n	800524c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800518a:	f7ff fd4f 	bl	8004c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800518e:	2300      	movs	r3, #0
 8005190:	e05c      	b.n	800524c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4618      	mov	r0, r3
 800519e:	f001 f829 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051a6:	f7ff fd41 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051aa:	f000 fd97 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ae:	f7ff fd0d 	bl	8004bcc <vPortEnterCritical>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051be:	d103      	bne.n	80051c8 <xQueueGenericSend+0x174>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051d4:	d103      	bne.n	80051de <xQueueGenericSend+0x18a>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051de:	f7ff fd25 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051e2:	1d3a      	adds	r2, r7, #4
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 f818 	bl	8006220 <xTaskCheckForTimeOut>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d124      	bne.n	8005240 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f8:	f000 faa6 	bl	8005748 <prvIsQueueFull>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	3310      	adds	r3, #16
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f000 ff3c 	bl	8006088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005212:	f000 fa31 	bl	8005678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005216:	f000 fd6f 	bl	8005cf8 <xTaskResumeAll>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f af7c 	bne.w	800511a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <xQueueGenericSend+0x200>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	e772      	b.n	800511a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005236:	f000 fa1f 	bl	8005678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800523a:	f000 fd5d 	bl	8005cf8 <xTaskResumeAll>
 800523e:	e76c      	b.n	800511a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005242:	f000 fa19 	bl	8005678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005246:	f000 fd57 	bl	8005cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800524a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800524c:	4618      	mov	r0, r3
 800524e:	3738      	adds	r7, #56	@ 0x38
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b090      	sub	sp, #64	@ 0x40
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <xQueueGenericSendFromISR+0x3e>
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <xQueueGenericSendFromISR+0x42>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <xQueueGenericSendFromISR+0x44>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d103      	bne.n	80052c6 <xQueueGenericSendFromISR+0x6e>
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <xQueueGenericSendFromISR+0x72>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <xQueueGenericSendFromISR+0x74>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	623b      	str	r3, [r7, #32]
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052e8:	f7ff fd32 	bl	8004d50 <vPortValidateInterruptPriority>
	__asm volatile
 80052ec:	f3ef 8211 	mrs	r2, BASEPRI
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61fa      	str	r2, [r7, #28]
 8005302:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005304:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <xQueueGenericSendFromISR+0xc2>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d12f      	bne.n	800537a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005320:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005330:	f000 f912 	bl	8005558 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005334:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800533c:	d112      	bne.n	8005364 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	3324      	adds	r3, #36	@ 0x24
 800534a:	4618      	mov	r0, r3
 800534c:	f000 feee 	bl	800612c <xTaskRemoveFromEventList>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e007      	b.n	8005374 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005364:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005368:	3301      	adds	r3, #1
 800536a:	b2db      	uxtb	r3, r3
 800536c:	b25a      	sxtb	r2, r3
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005374:	2301      	movs	r3, #1
 8005376:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005378:	e001      	b.n	800537e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800537a:	2300      	movs	r3, #0
 800537c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f383 8811 	msr	BASEPRI, r3
}
 8005388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800538a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800538c:	4618      	mov	r0, r3
 800538e:	3740      	adds	r7, #64	@ 0x40
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	@ 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xQueueReceive+0x32>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	623b      	str	r3, [r7, #32]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d103      	bne.n	80053d4 <xQueueReceive+0x40>
 80053cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <xQueueReceive+0x44>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <xQueueReceive+0x46>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <xQueueReceive+0x62>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61fb      	str	r3, [r7, #28]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053f6:	f001 f85f 	bl	80064b8 <xTaskGetSchedulerState>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <xQueueReceive+0x72>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <xQueueReceive+0x76>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <xQueueReceive+0x78>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <xQueueReceive+0x94>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61bb      	str	r3, [r7, #24]
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005428:	f7ff fbd0 	bl	8004bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01f      	beq.n	8005478 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800543c:	f000 f8f6 	bl	800562c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1e5a      	subs	r2, r3, #1
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	3310      	adds	r3, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe69 	bl	800612c <xTaskRemoveFromEventList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005460:	4b3c      	ldr	r3, [pc, #240]	@ (8005554 <xQueueReceive+0x1c0>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005470:	f7ff fbdc 	bl	8004c2c <vPortExitCritical>
				return pdPASS;
 8005474:	2301      	movs	r3, #1
 8005476:	e069      	b.n	800554c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800547e:	f7ff fbd5 	bl	8004c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005482:	2300      	movs	r3, #0
 8005484:	e062      	b.n	800554c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800548c:	f107 0310 	add.w	r3, r7, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f000 feaf 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005496:	2301      	movs	r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800549a:	f7ff fbc7 	bl	8004c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800549e:	f000 fc1d 	bl	8005cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054a2:	f7ff fb93 	bl	8004bcc <vPortEnterCritical>
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054b2:	d103      	bne.n	80054bc <xQueueReceive+0x128>
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054c2:	b25b      	sxtb	r3, r3
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c8:	d103      	bne.n	80054d2 <xQueueReceive+0x13e>
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d2:	f7ff fbab 	bl	8004c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d6:	1d3a      	adds	r2, r7, #4
 80054d8:	f107 0310 	add.w	r3, r7, #16
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fe9e 	bl	8006220 <xTaskCheckForTimeOut>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d123      	bne.n	8005532 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ec:	f000 f916 	bl	800571c <prvIsQueueEmpty>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d017      	beq.n	8005526 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	3324      	adds	r3, #36	@ 0x24
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fdc2 	bl	8006088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005506:	f000 f8b7 	bl	8005678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800550a:	f000 fbf5 	bl	8005cf8 <xTaskResumeAll>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d189      	bne.n	8005428 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005514:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <xQueueReceive+0x1c0>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	e780      	b.n	8005428 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005528:	f000 f8a6 	bl	8005678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800552c:	f000 fbe4 	bl	8005cf8 <xTaskResumeAll>
 8005530:	e77a      	b.n	8005428 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005534:	f000 f8a0 	bl	8005678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005538:	f000 fbde 	bl	8005cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800553c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553e:	f000 f8ed 	bl	800571c <prvIsQueueEmpty>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	f43f af6f 	beq.w	8005428 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800554a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800554c:	4618      	mov	r0, r3
 800554e:	3730      	adds	r7, #48	@ 0x30
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d14d      	bne.n	800561a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 ffb6 	bl	80064f4 <xTaskPriorityDisinherit>
 8005588:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	e043      	b.n	800561a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d119      	bne.n	80055cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6858      	ldr	r0, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	461a      	mov	r2, r3
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	f001 fd18 	bl	8006fd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d32b      	bcc.n	800561a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e026      	b.n	800561a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68d8      	ldr	r0, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	461a      	mov	r2, r3
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	f001 fcfe 	bl	8006fd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	425b      	negs	r3, r3
 80055e6:	441a      	add	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d207      	bcs.n	8005608 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	425b      	negs	r3, r3
 8005602:	441a      	add	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d105      	bne.n	800561a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3b01      	subs	r3, #1
 8005618:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005622:	697b      	ldr	r3, [r7, #20]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	441a      	add	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d303      	bcc.n	8005660 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68d9      	ldr	r1, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	461a      	mov	r2, r3
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	f001 fcb4 	bl	8006fd8 <memcpy>
	}
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005680:	f7ff faa4 	bl	8004bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800568a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800568c:	e011      	b.n	80056b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005692:	2b00      	cmp	r3, #0
 8005694:	d012      	beq.n	80056bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	@ 0x24
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fd46 	bl	800612c <xTaskRemoveFromEventList>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056a6:	f000 fe1f 	bl	80062e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dce9      	bgt.n	800568e <prvUnlockQueue+0x16>
 80056ba:	e000      	b.n	80056be <prvUnlockQueue+0x46>
					break;
 80056bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	22ff      	movs	r2, #255	@ 0xff
 80056c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056c6:	f7ff fab1 	bl	8004c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ca:	f7ff fa7f 	bl	8004bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d6:	e011      	b.n	80056fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d012      	beq.n	8005706 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3310      	adds	r3, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fd21 	bl	800612c <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056f0:	f000 fdfa 	bl	80062e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005700:	2b00      	cmp	r3, #0
 8005702:	dce9      	bgt.n	80056d8 <prvUnlockQueue+0x60>
 8005704:	e000      	b.n	8005708 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005706:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	22ff      	movs	r2, #255	@ 0xff
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005710:	f7ff fa8c 	bl	8004c2c <vPortExitCritical>
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005724:	f7ff fa52 	bl	8004bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e001      	b.n	800573a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800573a:	f7ff fa77 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005750:	f7ff fa3c 	bl	8004bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	429a      	cmp	r2, r3
 800575e:	d102      	bne.n	8005766 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e001      	b.n	800576a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800576a:	f7ff fa5f 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 800576e:	68fb      	ldr	r3, [r7, #12]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e014      	b.n	80057b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005788:	4a0e      	ldr	r2, [pc, #56]	@ (80057c4 <vQueueAddToRegistry+0x4c>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005794:	490b      	ldr	r1, [pc, #44]	@ (80057c4 <vQueueAddToRegistry+0x4c>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <vQueueAddToRegistry+0x4c>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057aa:	e006      	b.n	80057ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b07      	cmp	r3, #7
 80057b6:	d9e7      	bls.n	8005788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	20001740 	.word	0x20001740

080057c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057d8:	f7ff f9f8 	bl	8004bcc <vPortEnterCritical>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057e8:	d103      	bne.n	80057f2 <vQueueWaitForMessageRestricted+0x2a>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057f8:	b25b      	sxtb	r3, r3
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057fe:	d103      	bne.n	8005808 <vQueueWaitForMessageRestricted+0x40>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005808:	f7ff fa10 	bl	8004c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3324      	adds	r3, #36	@ 0x24
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fc59 	bl	80060d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005822:	6978      	ldr	r0, [r7, #20]
 8005824:	f7ff ff28 	bl	8005678 <prvUnlockQueue>
	}
 8005828:	bf00      	nop
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	@ 0x38
 8005834:	af04      	add	r7, sp, #16
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	623b      	str	r3, [r7, #32]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	61fb      	str	r3, [r7, #28]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800587a:	23a0      	movs	r3, #160	@ 0xa0
 800587c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2ba0      	cmp	r3, #160	@ 0xa0
 8005882:	d00b      	beq.n	800589c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61bb      	str	r3, [r7, #24]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800589c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01e      	beq.n	80058e2 <xTaskCreateStatic+0xb2>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01b      	beq.n	80058e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058bc:	2300      	movs	r3, #0
 80058be:	9303      	str	r3, [sp, #12]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	9302      	str	r3, [sp, #8]
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f851 	bl	800597c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058dc:	f000 f8ee 	bl	8005abc <prvAddNewTaskToReadyList>
 80058e0:	e001      	b.n	80058e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058e6:	697b      	ldr	r3, [r7, #20]
	}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	@ 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	@ 0x30
 80058f4:	af04      	add	r7, sp, #16
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fdd3 	bl	80044b0 <pvPortMalloc>
 800590a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005912:	20a0      	movs	r0, #160	@ 0xa0
 8005914:	f7fe fdcc 	bl	80044b0 <pvPortMalloc>
 8005918:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
 8005926:	e005      	b.n	8005934 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005928:	6978      	ldr	r0, [r7, #20]
 800592a:	f7fe fe8f 	bl	800464c <vPortFree>
 800592e:	e001      	b.n	8005934 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	2300      	movs	r3, #0
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f80f 	bl	800597c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800595e:	69f8      	ldr	r0, [r7, #28]
 8005960:	f000 f8ac 	bl	8005abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005964:	2301      	movs	r3, #1
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e002      	b.n	8005970 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800596e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005970:	69bb      	ldr	r3, [r7, #24]
	}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005994:	3b01      	subs	r3, #1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	617b      	str	r3, [r7, #20]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01f      	beq.n	8005a0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e012      	b.n	80059f8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	7819      	ldrb	r1, [r3, #0]
 80059da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	3334      	adds	r3, #52	@ 0x34
 80059e2:	460a      	mov	r2, r1
 80059e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d006      	beq.n	8005a00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b0f      	cmp	r3, #15
 80059fc:	d9e9      	bls.n	80059d2 <prvInitialiseNewTask+0x56>
 80059fe:	e000      	b.n	8005a02 <prvInitialiseNewTask+0x86>
			{
				break;
 8005a00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a0a:	e003      	b.n	8005a14 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d901      	bls.n	8005a1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a1a:	2306      	movs	r3, #6
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe ff46 	bl	80048c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe ff41 	bl	80048c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	f1c3 0207 	rsb	r2, r3, #7
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	334c      	adds	r3, #76	@ 0x4c
 8005a6e:	224c      	movs	r2, #76	@ 0x4c
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fa26 	bl	8006ec4 <memset>
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab0 <prvInitialiseNewTask+0x134>)
 8005a7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab4 <prvInitialiseNewTask+0x138>)
 8005a82:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab8 <prvInitialiseNewTask+0x13c>)
 8005a88:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	69b8      	ldr	r0, [r7, #24]
 8005a90:	f7fe ffaa 	bl	80049e8 <pxPortInitialiseStack>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3720      	adds	r7, #32
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200019a8 	.word	0x200019a8
 8005ab4:	20001a10 	.word	0x20001a10
 8005ab8:	20001a78 	.word	0x20001a78

08005abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ac4:	f7ff f882 	bl	8004bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b74 <prvAddNewTaskToReadyList+0xb8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	4a29      	ldr	r2, [pc, #164]	@ (8005b74 <prvAddNewTaskToReadyList+0xb8>)
 8005ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ad2:	4b29      	ldr	r3, [pc, #164]	@ (8005b78 <prvAddNewTaskToReadyList+0xbc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ada:	4a27      	ldr	r2, [pc, #156]	@ (8005b78 <prvAddNewTaskToReadyList+0xbc>)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae0:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <prvAddNewTaskToReadyList+0xb8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d110      	bne.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ae8:	f000 fc22 	bl	8006330 <prvInitialiseTaskLists>
 8005aec:	e00d      	b.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aee:	4b23      	ldr	r3, [pc, #140]	@ (8005b7c <prvAddNewTaskToReadyList+0xc0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005af6:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <prvAddNewTaskToReadyList+0xbc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d802      	bhi.n	8005b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b04:	4a1c      	ldr	r2, [pc, #112]	@ (8005b78 <prvAddNewTaskToReadyList+0xbc>)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <prvAddNewTaskToReadyList+0xc4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a1b      	ldr	r2, [pc, #108]	@ (8005b80 <prvAddNewTaskToReadyList+0xc4>)
 8005b12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	2201      	movs	r2, #1
 8005b1a:	409a      	lsls	r2, r3
 8005b1c:	4b19      	ldr	r3, [pc, #100]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	4a18      	ldr	r2, [pc, #96]	@ (8005b84 <prvAddNewTaskToReadyList+0xc8>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a15      	ldr	r2, [pc, #84]	@ (8005b88 <prvAddNewTaskToReadyList+0xcc>)
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe fece 	bl	80048de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b42:	f7ff f873 	bl	8004c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <prvAddNewTaskToReadyList+0xc0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <prvAddNewTaskToReadyList+0xbc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d207      	bcs.n	8005b6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <prvAddNewTaskToReadyList+0xd0>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20001880 	.word	0x20001880
 8005b78:	20001780 	.word	0x20001780
 8005b7c:	2000188c 	.word	0x2000188c
 8005b80:	2000189c 	.word	0x2000189c
 8005b84:	20001888 	.word	0x20001888
 8005b88:	20001784 	.word	0x20001784
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ba2:	4b14      	ldr	r3, [pc, #80]	@ (8005bf4 <vTaskDelay+0x64>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <vTaskDelay+0x32>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60bb      	str	r3, [r7, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bc2:	f000 f88b 	bl	8005cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fd1b 	bl	8006604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bce:	f000 f893 	bl	8005cf8 <xTaskResumeAll>
 8005bd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d107      	bne.n	8005bea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bda:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <vTaskDelay+0x68>)
 8005bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200018a8 	.word	0x200018a8
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c0a:	463a      	mov	r2, r7
 8005c0c:	1d39      	adds	r1, r7, #4
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fb fcc8 	bl	80015a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	9202      	str	r2, [sp, #8]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	2300      	movs	r3, #0
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	2300      	movs	r3, #0
 8005c28:	460a      	mov	r2, r1
 8005c2a:	4924      	ldr	r1, [pc, #144]	@ (8005cbc <vTaskStartScheduler+0xc0>)
 8005c2c:	4824      	ldr	r0, [pc, #144]	@ (8005cc0 <vTaskStartScheduler+0xc4>)
 8005c2e:	f7ff fdff 	bl	8005830 <xTaskCreateStatic>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a23      	ldr	r2, [pc, #140]	@ (8005cc4 <vTaskStartScheduler+0xc8>)
 8005c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c38:	4b22      	ldr	r3, [pc, #136]	@ (8005cc4 <vTaskStartScheduler+0xc8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e001      	b.n	8005c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d102      	bne.n	8005c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c50:	f000 fd3e 	bl	80066d0 <xTimerCreateTimerTask>
 8005c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d11b      	bne.n	8005c94 <vTaskStartScheduler+0x98>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	613b      	str	r3, [r7, #16]
}
 8005c6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c70:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <vTaskStartScheduler+0xcc>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	334c      	adds	r3, #76	@ 0x4c
 8005c76:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <vTaskStartScheduler+0xd0>)
 8005c78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c7a:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <vTaskStartScheduler+0xd4>)
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <vTaskStartScheduler+0xd8>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c88:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <vTaskStartScheduler+0xdc>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c8e:	f7fe ff2b 	bl	8004ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c92:	e00f      	b.n	8005cb4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c9a:	d10b      	bne.n	8005cb4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <vTaskStartScheduler+0xb4>
}
 8005cb4:	bf00      	nop
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	0800798c 	.word	0x0800798c
 8005cc0:	08006301 	.word	0x08006301
 8005cc4:	200018a4 	.word	0x200018a4
 8005cc8:	20001780 	.word	0x20001780
 8005ccc:	20000010 	.word	0x20000010
 8005cd0:	200018a0 	.word	0x200018a0
 8005cd4:	2000188c 	.word	0x2000188c
 8005cd8:	20001884 	.word	0x20001884

08005cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a03      	ldr	r2, [pc, #12]	@ (8005cf4 <vTaskSuspendAll+0x18>)
 8005ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	200018a8 	.word	0x200018a8

08005cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d06:	4b42      	ldr	r3, [pc, #264]	@ (8005e10 <xTaskResumeAll+0x118>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10b      	bne.n	8005d26 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	e7fd      	b.n	8005d22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d26:	f7fe ff51 	bl	8004bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d2a:	4b39      	ldr	r3, [pc, #228]	@ (8005e10 <xTaskResumeAll+0x118>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4a37      	ldr	r2, [pc, #220]	@ (8005e10 <xTaskResumeAll+0x118>)
 8005d32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d34:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <xTaskResumeAll+0x118>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d161      	bne.n	8005e00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d3c:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <xTaskResumeAll+0x11c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05d      	beq.n	8005e00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d44:	e02e      	b.n	8005da4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d46:	4b34      	ldr	r3, [pc, #208]	@ (8005e18 <xTaskResumeAll+0x120>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3318      	adds	r3, #24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fe1e 	bl	8004994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe fe19 	bl	8004994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	2201      	movs	r2, #1
 8005d68:	409a      	lsls	r2, r3
 8005d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e1c <xTaskResumeAll+0x124>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	4a2a      	ldr	r2, [pc, #168]	@ (8005e1c <xTaskResumeAll+0x124>)
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4a27      	ldr	r2, [pc, #156]	@ (8005e20 <xTaskResumeAll+0x128>)
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fe fda7 	bl	80048de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d94:	4b23      	ldr	r3, [pc, #140]	@ (8005e24 <xTaskResumeAll+0x12c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d9e:	4b22      	ldr	r3, [pc, #136]	@ (8005e28 <xTaskResumeAll+0x130>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e18 <xTaskResumeAll+0x120>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1cc      	bne.n	8005d46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005db2:	f000 fb61 	bl	8006478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005db6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e2c <xTaskResumeAll+0x134>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f000 f845 	bl	8005e50 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005dcc:	4b16      	ldr	r3, [pc, #88]	@ (8005e28 <xTaskResumeAll+0x130>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f1      	bne.n	8005dc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005dde:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <xTaskResumeAll+0x134>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005de4:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <xTaskResumeAll+0x130>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005df0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e30 <xTaskResumeAll+0x138>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e00:	f7fe ff14 	bl	8004c2c <vPortExitCritical>

	return xAlreadyYielded;
 8005e04:	68bb      	ldr	r3, [r7, #8]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200018a8 	.word	0x200018a8
 8005e14:	20001880 	.word	0x20001880
 8005e18:	20001840 	.word	0x20001840
 8005e1c:	20001888 	.word	0x20001888
 8005e20:	20001784 	.word	0x20001784
 8005e24:	20001780 	.word	0x20001780
 8005e28:	20001894 	.word	0x20001894
 8005e2c:	20001890 	.word	0x20001890
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e3a:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <xTaskGetTickCount+0x18>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e40:	687b      	ldr	r3, [r7, #4]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr
 8005e4c:	20001884 	.word	0x20001884

08005e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f98 <xTaskIncrementTick+0x148>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 808f 	bne.w	8005f82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e64:	4b4d      	ldr	r3, [pc, #308]	@ (8005f9c <xTaskIncrementTick+0x14c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8005f9c <xTaskIncrementTick+0x14c>)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d121      	bne.n	8005ebc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e78:	4b49      	ldr	r3, [pc, #292]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	603b      	str	r3, [r7, #0]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTaskIncrementTick+0x46>
 8005e9a:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	4b40      	ldr	r3, [pc, #256]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa4 <xTaskIncrementTick+0x154>)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa8 <xTaskIncrementTick+0x158>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa8 <xTaskIncrementTick+0x158>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	f000 fade 	bl	8006478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fac <xTaskIncrementTick+0x15c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d348      	bcc.n	8005f58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec6:	4b36      	ldr	r3, [pc, #216]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed0:	4b36      	ldr	r3, [pc, #216]	@ (8005fac <xTaskIncrementTick+0x15c>)
 8005ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ed6:	601a      	str	r2, [r3, #0]
					break;
 8005ed8:	e03e      	b.n	8005f58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eda:	4b31      	ldr	r3, [pc, #196]	@ (8005fa0 <xTaskIncrementTick+0x150>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d203      	bcs.n	8005efa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <xTaskIncrementTick+0x15c>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ef8:	e02e      	b.n	8005f58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fd48 	bl	8004994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fd3f 	bl	8004994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <xTaskIncrementTick+0x160>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	4a22      	ldr	r2, [pc, #136]	@ (8005fb0 <xTaskIncrementTick+0x160>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb4 <xTaskIncrementTick+0x164>)
 8005f36:	441a      	add	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fe fccd 	bl	80048de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f48:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb8 <xTaskIncrementTick+0x168>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d3b9      	bcc.n	8005ec6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f56:	e7b6      	b.n	8005ec6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f58:	4b17      	ldr	r3, [pc, #92]	@ (8005fb8 <xTaskIncrementTick+0x168>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5e:	4915      	ldr	r1, [pc, #84]	@ (8005fb4 <xTaskIncrementTick+0x164>)
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d901      	bls.n	8005f74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f74:	4b11      	ldr	r3, [pc, #68]	@ (8005fbc <xTaskIncrementTick+0x16c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e004      	b.n	8005f8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f82:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc0 <xTaskIncrementTick+0x170>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a0d      	ldr	r2, [pc, #52]	@ (8005fc0 <xTaskIncrementTick+0x170>)
 8005f8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f8c:	697b      	ldr	r3, [r7, #20]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200018a8 	.word	0x200018a8
 8005f9c:	20001884 	.word	0x20001884
 8005fa0:	20001838 	.word	0x20001838
 8005fa4:	2000183c 	.word	0x2000183c
 8005fa8:	20001898 	.word	0x20001898
 8005fac:	200018a0 	.word	0x200018a0
 8005fb0:	20001888 	.word	0x20001888
 8005fb4:	20001784 	.word	0x20001784
 8005fb8:	20001780 	.word	0x20001780
 8005fbc:	20001894 	.word	0x20001894
 8005fc0:	20001890 	.word	0x20001890

08005fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fca:	4b29      	ldr	r3, [pc, #164]	@ (8006070 <vTaskSwitchContext+0xac>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fd2:	4b28      	ldr	r3, [pc, #160]	@ (8006074 <vTaskSwitchContext+0xb0>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fd8:	e045      	b.n	8006066 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005fda:	4b26      	ldr	r3, [pc, #152]	@ (8006074 <vTaskSwitchContext+0xb0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe0:	4b25      	ldr	r3, [pc, #148]	@ (8006078 <vTaskSwitchContext+0xb4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	fab3 f383 	clz	r3, r3
 8005fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	f1c3 031f 	rsb	r3, r3, #31
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	4921      	ldr	r1, [pc, #132]	@ (800607c <vTaskSwitchContext+0xb8>)
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <vTaskSwitchContext+0x5e>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	607b      	str	r3, [r7, #4]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <vTaskSwitchContext+0x5a>
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a13      	ldr	r2, [pc, #76]	@ (800607c <vTaskSwitchContext+0xb8>)
 800602e:	4413      	add	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	3308      	adds	r3, #8
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <vTaskSwitchContext+0x8e>
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <vTaskSwitchContext+0xbc>)
 800605a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800605c:	4b08      	ldr	r3, [pc, #32]	@ (8006080 <vTaskSwitchContext+0xbc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	334c      	adds	r3, #76	@ 0x4c
 8006062:	4a08      	ldr	r2, [pc, #32]	@ (8006084 <vTaskSwitchContext+0xc0>)
 8006064:	6013      	str	r3, [r2, #0]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr
 8006070:	200018a8 	.word	0x200018a8
 8006074:	20001894 	.word	0x20001894
 8006078:	20001888 	.word	0x20001888
 800607c:	20001784 	.word	0x20001784
 8006080:	20001780 	.word	0x20001780
 8006084:	20000010 	.word	0x20000010

08006088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	e7fd      	b.n	80060ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <vTaskPlaceOnEventList+0x48>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fe fc33 	bl	8004924 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	6838      	ldr	r0, [r7, #0]
 80060c2:	f000 fa9f 	bl	8006604 <prvAddCurrentTaskToDelayedList>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20001780 	.word	0x20001780

080060d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	617b      	str	r3, [r7, #20]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <vTaskPlaceOnEventListRestricted+0x54>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3318      	adds	r3, #24
 8006104:	4619      	mov	r1, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7fe fbe9 	bl	80048de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006116:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	68b8      	ldr	r0, [r7, #8]
 800611c:	f000 fa72 	bl	8006604 <prvAddCurrentTaskToDelayedList>
	}
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20001780 	.word	0x20001780

0800612c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10b      	bne.n	800615a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	e7fd      	b.n	8006156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3318      	adds	r3, #24
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fc18 	bl	8004994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006164:	4b1d      	ldr	r3, [pc, #116]	@ (80061dc <xTaskRemoveFromEventList+0xb0>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11c      	bne.n	80061a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3304      	adds	r3, #4
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fc0f 	bl	8004994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	2201      	movs	r2, #1
 800617c:	409a      	lsls	r2, r3
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <xTaskRemoveFromEventList+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <xTaskRemoveFromEventList+0xb4>)
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4a13      	ldr	r2, [pc, #76]	@ (80061e4 <xTaskRemoveFromEventList+0xb8>)
 8006196:	441a      	add	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fb9d 	bl	80048de <vListInsertEnd>
 80061a4:	e005      	b.n	80061b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3318      	adds	r3, #24
 80061aa:	4619      	mov	r1, r3
 80061ac:	480e      	ldr	r0, [pc, #56]	@ (80061e8 <xTaskRemoveFromEventList+0xbc>)
 80061ae:	f7fe fb96 	bl	80048de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <xTaskRemoveFromEventList+0xc0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d905      	bls.n	80061cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <xTaskRemoveFromEventList+0xc4>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200018a8 	.word	0x200018a8
 80061e0:	20001888 	.word	0x20001888
 80061e4:	20001784 	.word	0x20001784
 80061e8:	20001840 	.word	0x20001840
 80061ec:	20001780 	.word	0x20001780
 80061f0:	20001894 	.word	0x20001894

080061f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <vTaskInternalSetTimeOutState+0x24>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <vTaskInternalSetTimeOutState+0x28>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20001898 	.word	0x20001898
 800621c:	20001884 	.word	0x20001884

08006220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10b      	bne.n	8006248 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60fb      	str	r3, [r7, #12]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006266:	f7fe fcb1 	bl	8004bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800626a:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <xTaskCheckForTimeOut+0xc0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006282:	d102      	bne.n	800628a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	e023      	b.n	80062d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b15      	ldr	r3, [pc, #84]	@ (80062e4 <xTaskCheckForTimeOut+0xc4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d007      	beq.n	80062a6 <xTaskCheckForTimeOut+0x86>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	429a      	cmp	r2, r3
 800629e:	d302      	bcc.n	80062a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e015      	b.n	80062d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d20b      	bcs.n	80062c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff99 	bl	80061f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e004      	b.n	80062d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062d2:	f7fe fcab 	bl	8004c2c <vPortExitCritical>

	return xReturn;
 80062d6:	69fb      	ldr	r3, [r7, #28]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20001884 	.word	0x20001884
 80062e4:	20001898 	.word	0x20001898

080062e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062ec:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <vTaskMissedYield+0x14>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20001894 	.word	0x20001894

08006300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006308:	f000 f852 	bl	80063b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <prvIdleTask+0x28>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d9f9      	bls.n	8006308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006314:	4b05      	ldr	r3, [pc, #20]	@ (800632c <prvIdleTask+0x2c>)
 8006316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006324:	e7f0      	b.n	8006308 <prvIdleTask+0x8>
 8006326:	bf00      	nop
 8006328:	20001784 	.word	0x20001784
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006336:	2300      	movs	r3, #0
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e00c      	b.n	8006356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <prvInitialiseTaskLists+0x60>)
 8006348:	4413      	add	r3, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fa9c 	bl	8004888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b06      	cmp	r3, #6
 800635a:	d9ef      	bls.n	800633c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800635c:	480d      	ldr	r0, [pc, #52]	@ (8006394 <prvInitialiseTaskLists+0x64>)
 800635e:	f7fe fa93 	bl	8004888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006362:	480d      	ldr	r0, [pc, #52]	@ (8006398 <prvInitialiseTaskLists+0x68>)
 8006364:	f7fe fa90 	bl	8004888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006368:	480c      	ldr	r0, [pc, #48]	@ (800639c <prvInitialiseTaskLists+0x6c>)
 800636a:	f7fe fa8d 	bl	8004888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800636e:	480c      	ldr	r0, [pc, #48]	@ (80063a0 <prvInitialiseTaskLists+0x70>)
 8006370:	f7fe fa8a 	bl	8004888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006374:	480b      	ldr	r0, [pc, #44]	@ (80063a4 <prvInitialiseTaskLists+0x74>)
 8006376:	f7fe fa87 	bl	8004888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800637a:	4b0b      	ldr	r3, [pc, #44]	@ (80063a8 <prvInitialiseTaskLists+0x78>)
 800637c:	4a05      	ldr	r2, [pc, #20]	@ (8006394 <prvInitialiseTaskLists+0x64>)
 800637e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006380:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <prvInitialiseTaskLists+0x7c>)
 8006382:	4a05      	ldr	r2, [pc, #20]	@ (8006398 <prvInitialiseTaskLists+0x68>)
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20001784 	.word	0x20001784
 8006394:	20001810 	.word	0x20001810
 8006398:	20001824 	.word	0x20001824
 800639c:	20001840 	.word	0x20001840
 80063a0:	20001854 	.word	0x20001854
 80063a4:	2000186c 	.word	0x2000186c
 80063a8:	20001838 	.word	0x20001838
 80063ac:	2000183c 	.word	0x2000183c

080063b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b6:	e019      	b.n	80063ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063b8:	f7fe fc08 	bl	8004bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063bc:	4b10      	ldr	r3, [pc, #64]	@ (8006400 <prvCheckTasksWaitingTermination+0x50>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fae3 	bl	8004994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <prvCheckTasksWaitingTermination+0x54>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006404 <prvCheckTasksWaitingTermination+0x54>)
 80063d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a0a      	ldr	r2, [pc, #40]	@ (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063e2:	f7fe fc23 	bl	8004c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f810 	bl	800640c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <prvCheckTasksWaitingTermination+0x58>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e1      	bne.n	80063b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20001854 	.word	0x20001854
 8006404:	20001880 	.word	0x20001880
 8006408:	20001868 	.word	0x20001868

0800640c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	334c      	adds	r3, #76	@ 0x4c
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fd5b 	bl	8006ed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe f90d 	bl	800464c <vPortFree>
				vPortFree( pxTCB );
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe f90a 	bl	800464c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006438:	e019      	b.n	800646e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006440:	2b01      	cmp	r3, #1
 8006442:	d103      	bne.n	800644c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fe f901 	bl	800464c <vPortFree>
	}
 800644a:	e010      	b.n	800646e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006452:	2b02      	cmp	r3, #2
 8006454:	d00b      	beq.n	800646e <prvDeleteTCB+0x62>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <prvDeleteTCB+0x5e>
	}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647e:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <prvResetNextTaskUnblockTime+0x38>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <prvResetNextTaskUnblockTime+0x3c>)
 800648a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006490:	e008      	b.n	80064a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <prvResetNextTaskUnblockTime+0x38>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4a04      	ldr	r2, [pc, #16]	@ (80064b4 <prvResetNextTaskUnblockTime+0x3c>)
 80064a2:	6013      	str	r3, [r2, #0]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	20001838 	.word	0x20001838
 80064b4:	200018a0 	.word	0x200018a0

080064b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <xTaskGetSchedulerState+0x34>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064c6:	2301      	movs	r3, #1
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	e008      	b.n	80064de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064cc:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <xTaskGetSchedulerState+0x38>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064d4:	2302      	movs	r3, #2
 80064d6:	607b      	str	r3, [r7, #4]
 80064d8:	e001      	b.n	80064de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064de:	687b      	ldr	r3, [r7, #4]
	}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	2000188c 	.word	0x2000188c
 80064f0:	200018a8 	.word	0x200018a8

080064f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d070      	beq.n	80065ec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800650a:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <xTaskPriorityDisinherit+0x104>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	d00b      	beq.n	800652c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60bb      	str	r3, [r7, #8]
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	429a      	cmp	r2, r3
 8006560:	d044      	beq.n	80065ec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006566:	2b00      	cmp	r3, #0
 8006568:	d140      	bne.n	80065ec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3304      	adds	r3, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fa10 	bl	8004994 <uxListRemove>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d115      	bne.n	80065a6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800657e:	491f      	ldr	r1, [pc, #124]	@ (80065fc <xTaskPriorityDisinherit+0x108>)
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xTaskPriorityDisinherit+0xb2>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43da      	mvns	r2, r3
 800659c:	4b18      	ldr	r3, [pc, #96]	@ (8006600 <xTaskPriorityDisinherit+0x10c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4013      	ands	r3, r2
 80065a2:	4a17      	ldr	r2, [pc, #92]	@ (8006600 <xTaskPriorityDisinherit+0x10c>)
 80065a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	f1c3 0207 	rsb	r2, r3, #7
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	2201      	movs	r2, #1
 80065c0:	409a      	lsls	r2, r3
 80065c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <xTaskPriorityDisinherit+0x10c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006600 <xTaskPriorityDisinherit+0x10c>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <xTaskPriorityDisinherit+0x108>)
 80065da:	441a      	add	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe f97b 	bl	80048de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065ec:	697b      	ldr	r3, [r7, #20]
	}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20001780 	.word	0x20001780
 80065fc:	20001784 	.word	0x20001784
 8006600:	20001888 	.word	0x20001888

08006604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800660e:	4b29      	ldr	r3, [pc, #164]	@ (80066b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006614:	4b28      	ldr	r3, [pc, #160]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe f9ba 	bl	8004994 <uxListRemove>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006626:	4b24      	ldr	r3, [pc, #144]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	2201      	movs	r2, #1
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43da      	mvns	r2, r3
 8006634:	4b21      	ldr	r3, [pc, #132]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4013      	ands	r3, r2
 800663a:	4a20      	ldr	r2, [pc, #128]	@ (80066bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800663c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006644:	d10a      	bne.n	800665c <prvAddCurrentTaskToDelayedList+0x58>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800664c:	4b1a      	ldr	r3, [pc, #104]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3304      	adds	r3, #4
 8006652:	4619      	mov	r1, r3
 8006654:	481a      	ldr	r0, [pc, #104]	@ (80066c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006656:	f7fe f942 	bl	80048de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800665a:	e026      	b.n	80066aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006664:	4b14      	ldr	r3, [pc, #80]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	429a      	cmp	r2, r3
 8006672:	d209      	bcs.n	8006688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006674:	4b13      	ldr	r3, [pc, #76]	@ (80066c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b0f      	ldr	r3, [pc, #60]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fe f94f 	bl	8004924 <vListInsert>
}
 8006686:	e010      	b.n	80066aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006688:	4b0f      	ldr	r3, [pc, #60]	@ (80066c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe f945 	bl	8004924 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800669a:	4b0c      	ldr	r3, [pc, #48]	@ (80066cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d202      	bcs.n	80066aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066a4:	4a09      	ldr	r2, [pc, #36]	@ (80066cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001884 	.word	0x20001884
 80066b8:	20001780 	.word	0x20001780
 80066bc:	20001888 	.word	0x20001888
 80066c0:	2000186c 	.word	0x2000186c
 80066c4:	2000183c 	.word	0x2000183c
 80066c8:	20001838 	.word	0x20001838
 80066cc:	200018a0 	.word	0x200018a0

080066d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08a      	sub	sp, #40	@ 0x28
 80066d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066da:	f000 fb93 	bl	8006e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066de:	4b1d      	ldr	r3, [pc, #116]	@ (8006754 <xTimerCreateTimerTask+0x84>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d021      	beq.n	800672a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066ee:	1d3a      	adds	r2, r7, #4
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fa ff6d 	bl	80015d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	9202      	str	r2, [sp, #8]
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	2302      	movs	r3, #2
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2300      	movs	r3, #0
 800670e:	460a      	mov	r2, r1
 8006710:	4911      	ldr	r1, [pc, #68]	@ (8006758 <xTimerCreateTimerTask+0x88>)
 8006712:	4812      	ldr	r0, [pc, #72]	@ (800675c <xTimerCreateTimerTask+0x8c>)
 8006714:	f7ff f88c 	bl	8005830 <xTaskCreateStatic>
 8006718:	4603      	mov	r3, r0
 800671a:	4a11      	ldr	r2, [pc, #68]	@ (8006760 <xTimerCreateTimerTask+0x90>)
 800671c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <xTimerCreateTimerTask+0x90>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200018dc 	.word	0x200018dc
 8006758:	08007994 	.word	0x08007994
 800675c:	080069d9 	.word	0x080069d9
 8006760:	200018e0 	.word	0x200018e0

08006764 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006772:	2028      	movs	r0, #40	@ 0x28
 8006774:	f7fd fe9c 	bl	80044b0 <pvPortMalloc>
 8006778:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f845 	bl	8006826 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800679c:	697b      	ldr	r3, [r7, #20]
	}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08a      	sub	sp, #40	@ 0x28
 80067aa:	af02      	add	r7, sp, #8
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80067b4:	2328      	movs	r3, #40	@ 0x28
 80067b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b28      	cmp	r3, #40	@ 0x28
 80067bc:	d00b      	beq.n	80067d6 <xTimerCreateStatic+0x30>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61bb      	str	r3, [r7, #24]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <xTimerCreateStatic+0x50>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	617b      	str	r3, [r7, #20]
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	e7fd      	b.n	80067f2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00d      	beq.n	800681c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f805 	bl	8006826 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800681c:	69fb      	ldr	r3, [r7, #28]
	}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	617b      	str	r3, [r7, #20]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01e      	beq.n	8006896 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006858:	f000 fad4 	bl	8006e04 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe f824 	bl	80048c6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d008      	beq.n	8006896 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800688a:	f043 0304 	orr.w	r3, r3, #4
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	@ 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068d0:	4b19      	ldr	r3, [pc, #100]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d02a      	beq.n	800692e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	dc18      	bgt.n	800691c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ea:	f7ff fde5 	bl	80064b8 <xTaskGetSchedulerState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d109      	bne.n	8006908 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f107 0114 	add.w	r1, r7, #20
 80068fc:	2300      	movs	r3, #0
 80068fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006900:	f7fe fba8 	bl	8005054 <xQueueGenericSend>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24
 8006906:	e012      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006908:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <xTimerGenericCommand+0x98>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	f107 0114 	add.w	r1, r7, #20
 8006910:	2300      	movs	r3, #0
 8006912:	2200      	movs	r2, #0
 8006914:	f7fe fb9e 	bl	8005054 <xQueueGenericSend>
 8006918:	6278      	str	r0, [r7, #36]	@ 0x24
 800691a:	e008      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <xTimerGenericCommand+0x98>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	f107 0114 	add.w	r1, r7, #20
 8006924:	2300      	movs	r3, #0
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	f7fe fc96 	bl	8005258 <xQueueGenericSendFromISR>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006930:	4618      	mov	r0, r3
 8006932:	3728      	adds	r7, #40	@ 0x28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	200018dc 	.word	0x200018dc

0800693c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006946:	4b23      	ldr	r3, [pc, #140]	@ (80069d4 <prvProcessExpiredTimer+0x98>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3304      	adds	r3, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f81d 	bl	8004994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	18d1      	adds	r1, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f000 f8d3 	bl	8006b20 <prvInsertTimerInActiveList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	2100      	movs	r1, #0
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7ff ff88 	bl	80068a0 <xTimerGenericCommand>
 8006990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d114      	bne.n	80069c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	4798      	blx	r3
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200018d4 	.word	0x200018d4

080069d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069e0:	f107 0308 	add.w	r3, r7, #8
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f859 	bl	8006a9c <prvGetNextExpireTime>
 80069ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4619      	mov	r1, r3
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f805 	bl	8006a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069f6:	f000 f8d5 	bl	8006ba4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069fa:	bf00      	nop
 80069fc:	e7f0      	b.n	80069e0 <prvTimerTask+0x8>
	...

08006a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a0a:	f7ff f967 	bl	8005cdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f864 	bl	8006ae0 <prvSampleTimeNow>
 8006a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d130      	bne.n	8006a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d806      	bhi.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a2e:	f7ff f963 	bl	8005cf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff81 	bl	800693c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a3a:	e024      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a42:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <prvProcessTimerOrBlockTask+0x90>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <prvProcessTimerOrBlockTask+0x50>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x52>
 8006a50:	2300      	movs	r3, #0
 8006a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a54:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <prvProcessTimerOrBlockTask+0x94>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7fe feb1 	bl	80057c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a66:	f7ff f947 	bl	8005cf8 <xTaskResumeAll>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a70:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <prvProcessTimerOrBlockTask+0x98>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
}
 8006a80:	e001      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a82:	f7ff f939 	bl	8005cf8 <xTaskResumeAll>
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200018d8 	.word	0x200018d8
 8006a94:	200018dc 	.word	0x200018dc
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <prvGetNextExpireTime+0x40>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <prvGetNextExpireTime+0x16>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	e000      	b.n	8006ab4 <prvGetNextExpireTime+0x18>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac0:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <prvGetNextExpireTime+0x40>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	200018d4 	.word	0x200018d4

08006ae0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ae8:	f7ff f9a4 	bl	8005e34 <xTaskGetTickCount>
 8006aec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <prvSampleTimeNow+0x3c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d205      	bcs.n	8006b04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006af8:	f000 f91e 	bl	8006d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e002      	b.n	8006b0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b0a:	4a04      	ldr	r2, [pc, #16]	@ (8006b1c <prvSampleTimeNow+0x3c>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200018e4 	.word	0x200018e4

08006b20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d812      	bhi.n	8006b6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d302      	bcc.n	8006b5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e01b      	b.n	8006b92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <prvInsertTimerInActiveList+0x7c>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fd fedd 	bl	8004924 <vListInsert>
 8006b6a:	e012      	b.n	8006b92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d206      	bcs.n	8006b82 <prvInsertTimerInActiveList+0x62>
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d302      	bcc.n	8006b82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e007      	b.n	8006b92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b82:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <prvInsertTimerInActiveList+0x80>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7fd fec9 	bl	8004924 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b92:	697b      	ldr	r3, [r7, #20]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	200018d8 	.word	0x200018d8
 8006ba0:	200018d4 	.word	0x200018d4

08006ba4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08c      	sub	sp, #48	@ 0x30
 8006ba8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006baa:	e0b2      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f2c0 80af 	blt.w	8006d12 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d004      	beq.n	8006bca <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fd fee5 	bl	8004994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff87 	bl	8006ae0 <prvSampleTimeNow>
 8006bd2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b09      	cmp	r3, #9
 8006bd8:	f200 8098 	bhi.w	8006d0c <prvProcessReceivedCommands+0x168>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <prvProcessReceivedCommands+0x40>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c0d 	.word	0x08006c0d
 8006bf0:	08006c83 	.word	0x08006c83
 8006bf4:	08006c97 	.word	0x08006c97
 8006bf8:	08006ce3 	.word	0x08006ce3
 8006bfc:	08006c0d 	.word	0x08006c0d
 8006c00:	08006c0d 	.word	0x08006c0d
 8006c04:	08006c83 	.word	0x08006c83
 8006c08:	08006c97 	.word	0x08006c97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	18d1      	adds	r1, r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c2c:	f7ff ff78 	bl	8006b20 <prvInsertTimerInActiveList>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d06c      	beq.n	8006d10 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d061      	beq.n	8006d10 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	441a      	add	r2, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c5e:	f7ff fe1f 	bl	80068a0 <xTimerGenericCommand>
 8006c62:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d152      	bne.n	8006d10 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	61bb      	str	r3, [r7, #24]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006c94:	e03d      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	18d1      	adds	r1, r2, r3
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cdc:	f7ff ff20 	bl	8006b20 <prvInsertTimerInActiveList>
					break;
 8006ce0:	e017      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8006cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cf2:	f7fd fcab 	bl	800464c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cf6:	e00c      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8006d0a:	e002      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8006d0c:	bf00      	nop
 8006d0e:	e000      	b.n	8006d12 <prvProcessReceivedCommands+0x16e>
					break;
 8006d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d12:	4b08      	ldr	r3, [pc, #32]	@ (8006d34 <prvProcessReceivedCommands+0x190>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f107 0108 	add.w	r1, r7, #8
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fb39 	bl	8005394 <xQueueReceive>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f af41 	bne.w	8006bac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	3728      	adds	r7, #40	@ 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	200018dc 	.word	0x200018dc

08006d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d3e:	e049      	b.n	8006dd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d40:	4b2e      	ldr	r3, [pc, #184]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fd fe1b 	bl	8004994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02f      	beq.n	8006dd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d90e      	bls.n	8006da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d92:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fd fdc1 	bl	8004924 <vListInsert>
 8006da2:	e017      	b.n	8006dd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006da4:	2300      	movs	r3, #0
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2300      	movs	r3, #0
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	2100      	movs	r1, #0
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff fd76 	bl	80068a0 <xTimerGenericCommand>
 8006db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	603b      	str	r3, [r7, #0]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd4:	4b09      	ldr	r3, [pc, #36]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1b0      	bne.n	8006d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dde:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006de4:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <prvSwitchTimerLists+0xc8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <prvSwitchTimerLists+0xc4>)
 8006dea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dec:	4a04      	ldr	r2, [pc, #16]	@ (8006e00 <prvSwitchTimerLists+0xc8>)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6013      	str	r3, [r2, #0]
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200018d4 	.word	0x200018d4
 8006e00:	200018d8 	.word	0x200018d8

08006e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e0a:	f7fd fedf 	bl	8004bcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e0e:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d120      	bne.n	8006e58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e16:	4814      	ldr	r0, [pc, #80]	@ (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e18:	f7fd fd36 	bl	8004888 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e1c:	4813      	ldr	r0, [pc, #76]	@ (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e1e:	f7fd fd33 	bl	8004888 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e22:	4b13      	ldr	r3, [pc, #76]	@ (8006e70 <prvCheckForValidListAndQueue+0x6c>)
 8006e24:	4a10      	ldr	r2, [pc, #64]	@ (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e28:	4b12      	ldr	r3, [pc, #72]	@ (8006e74 <prvCheckForValidListAndQueue+0x70>)
 8006e2a:	4a10      	ldr	r2, [pc, #64]	@ (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	4b11      	ldr	r3, [pc, #68]	@ (8006e78 <prvCheckForValidListAndQueue+0x74>)
 8006e34:	4a11      	ldr	r2, [pc, #68]	@ (8006e7c <prvCheckForValidListAndQueue+0x78>)
 8006e36:	210c      	movs	r1, #12
 8006e38:	200a      	movs	r0, #10
 8006e3a:	f7fe f833 	bl	8004ea4 <xQueueGenericCreateStatic>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4a08      	ldr	r2, [pc, #32]	@ (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e44:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <prvCheckForValidListAndQueue+0x60>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	490b      	ldr	r1, [pc, #44]	@ (8006e80 <prvCheckForValidListAndQueue+0x7c>)
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fc90 	bl	8005778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e58:	f7fd fee8 	bl	8004c2c <vPortExitCritical>
}
 8006e5c:	bf00      	nop
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200018dc 	.word	0x200018dc
 8006e68:	200018ac 	.word	0x200018ac
 8006e6c:	200018c0 	.word	0x200018c0
 8006e70:	200018d4 	.word	0x200018d4
 8006e74:	200018d8 	.word	0x200018d8
 8006e78:	20001960 	.word	0x20001960
 8006e7c:	200018e8 	.word	0x200018e8
 8006e80:	0800799c 	.word	0x0800799c

08006e84 <siprintf>:
 8006e84:	b40e      	push	{r1, r2, r3}
 8006e86:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e8a:	b500      	push	{lr}
 8006e8c:	b09c      	sub	sp, #112	@ 0x70
 8006e8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	9006      	str	r0, [sp, #24]
 8006e94:	9107      	str	r1, [sp, #28]
 8006e96:	9104      	str	r1, [sp, #16]
 8006e98:	4808      	ldr	r0, [pc, #32]	@ (8006ebc <siprintf+0x38>)
 8006e9a:	4909      	ldr	r1, [pc, #36]	@ (8006ec0 <siprintf+0x3c>)
 8006e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea0:	9105      	str	r1, [sp, #20]
 8006ea2:	6800      	ldr	r0, [r0, #0]
 8006ea4:	a902      	add	r1, sp, #8
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	f000 f9f6 	bl	8007298 <_svfiprintf_r>
 8006eac:	2200      	movs	r2, #0
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	b01c      	add	sp, #112	@ 0x70
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	b003      	add	sp, #12
 8006eba:	4770      	bx	lr
 8006ebc:	20000010 	.word	0x20000010
 8006ec0:	ffff0208 	.word	0xffff0208

08006ec4 <memset>:
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4402      	add	r2, r0
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d100      	bne.n	8006ece <memset+0xa>
 8006ecc:	4770      	bx	lr
 8006ece:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed2:	e7f9      	b.n	8006ec8 <memset+0x4>

08006ed4 <_reclaim_reent>:
 8006ed4:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <_reclaim_reent+0xa8>)
 8006ed6:	b570      	push	{r4, r5, r6, lr}
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4604      	mov	r4, r0
 8006edc:	4283      	cmp	r3, r0
 8006ede:	d04b      	beq.n	8006f78 <_reclaim_reent+0xa4>
 8006ee0:	69c3      	ldr	r3, [r0, #28]
 8006ee2:	b1ab      	cbz	r3, 8006f10 <_reclaim_reent+0x3c>
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	b16b      	cbz	r3, 8006f04 <_reclaim_reent+0x30>
 8006ee8:	2500      	movs	r5, #0
 8006eea:	69e3      	ldr	r3, [r4, #28]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	5959      	ldr	r1, [r3, r5]
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	d13b      	bne.n	8006f6c <_reclaim_reent+0x98>
 8006ef4:	3504      	adds	r5, #4
 8006ef6:	2d80      	cmp	r5, #128	@ 0x80
 8006ef8:	d1f7      	bne.n	8006eea <_reclaim_reent+0x16>
 8006efa:	69e3      	ldr	r3, [r4, #28]
 8006efc:	4620      	mov	r0, r4
 8006efe:	68d9      	ldr	r1, [r3, #12]
 8006f00:	f000 f878 	bl	8006ff4 <_free_r>
 8006f04:	69e3      	ldr	r3, [r4, #28]
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	b111      	cbz	r1, 8006f10 <_reclaim_reent+0x3c>
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f872 	bl	8006ff4 <_free_r>
 8006f10:	6961      	ldr	r1, [r4, #20]
 8006f12:	b111      	cbz	r1, 8006f1a <_reclaim_reent+0x46>
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f86d 	bl	8006ff4 <_free_r>
 8006f1a:	69e1      	ldr	r1, [r4, #28]
 8006f1c:	b111      	cbz	r1, 8006f24 <_reclaim_reent+0x50>
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f868 	bl	8006ff4 <_free_r>
 8006f24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f26:	b111      	cbz	r1, 8006f2e <_reclaim_reent+0x5a>
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f863 	bl	8006ff4 <_free_r>
 8006f2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f30:	b111      	cbz	r1, 8006f38 <_reclaim_reent+0x64>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f85e 	bl	8006ff4 <_free_r>
 8006f38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x6e>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f859 	bl	8006ff4 <_free_r>
 8006f42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f44:	b111      	cbz	r1, 8006f4c <_reclaim_reent+0x78>
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 f854 	bl	8006ff4 <_free_r>
 8006f4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f4e:	b111      	cbz	r1, 8006f56 <_reclaim_reent+0x82>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 f84f 	bl	8006ff4 <_free_r>
 8006f56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f58:	b111      	cbz	r1, 8006f60 <_reclaim_reent+0x8c>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f84a 	bl	8006ff4 <_free_r>
 8006f60:	6a23      	ldr	r3, [r4, #32]
 8006f62:	b14b      	cbz	r3, 8006f78 <_reclaim_reent+0xa4>
 8006f64:	4620      	mov	r0, r4
 8006f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f6a:	4718      	bx	r3
 8006f6c:	680e      	ldr	r6, [r1, #0]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f840 	bl	8006ff4 <_free_r>
 8006f74:	4631      	mov	r1, r6
 8006f76:	e7bb      	b.n	8006ef0 <_reclaim_reent+0x1c>
 8006f78:	bd70      	pop	{r4, r5, r6, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000010 	.word	0x20000010

08006f80 <__errno>:
 8006f80:	4b01      	ldr	r3, [pc, #4]	@ (8006f88 <__errno+0x8>)
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000010 	.word	0x20000010

08006f8c <__libc_init_array>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	2600      	movs	r6, #0
 8006f90:	4d0c      	ldr	r5, [pc, #48]	@ (8006fc4 <__libc_init_array+0x38>)
 8006f92:	4c0d      	ldr	r4, [pc, #52]	@ (8006fc8 <__libc_init_array+0x3c>)
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	42a6      	cmp	r6, r4
 8006f9a:	d109      	bne.n	8006fb0 <__libc_init_array+0x24>
 8006f9c:	f000 fc78 	bl	8007890 <_init>
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	4d0a      	ldr	r5, [pc, #40]	@ (8006fcc <__libc_init_array+0x40>)
 8006fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8006fd0 <__libc_init_array+0x44>)
 8006fa6:	1b64      	subs	r4, r4, r5
 8006fa8:	10a4      	asrs	r4, r4, #2
 8006faa:	42a6      	cmp	r6, r4
 8006fac:	d105      	bne.n	8006fba <__libc_init_array+0x2e>
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb4:	4798      	blx	r3
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	e7ee      	b.n	8006f98 <__libc_init_array+0xc>
 8006fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbe:	4798      	blx	r3
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	e7f2      	b.n	8006faa <__libc_init_array+0x1e>
 8006fc4:	08007b1c 	.word	0x08007b1c
 8006fc8:	08007b1c 	.word	0x08007b1c
 8006fcc:	08007b1c 	.word	0x08007b1c
 8006fd0:	08007b20 	.word	0x08007b20

08006fd4 <__retarget_lock_acquire_recursive>:
 8006fd4:	4770      	bx	lr

08006fd6 <__retarget_lock_release_recursive>:
 8006fd6:	4770      	bx	lr

08006fd8 <memcpy>:
 8006fd8:	440a      	add	r2, r1
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006fe0:	d100      	bne.n	8006fe4 <memcpy+0xc>
 8006fe2:	4770      	bx	lr
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fea:	4291      	cmp	r1, r2
 8006fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff0:	d1f9      	bne.n	8006fe6 <memcpy+0xe>
 8006ff2:	bd10      	pop	{r4, pc}

08006ff4 <_free_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d040      	beq.n	800707e <_free_r+0x8a>
 8006ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007000:	1f0c      	subs	r4, r1, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfb8      	it	lt
 8007006:	18e4      	addlt	r4, r4, r3
 8007008:	f000 f8de 	bl	80071c8 <__malloc_lock>
 800700c:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <_free_r+0x8c>)
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	b933      	cbnz	r3, 8007020 <_free_r+0x2c>
 8007012:	6063      	str	r3, [r4, #4]
 8007014:	6014      	str	r4, [r2, #0]
 8007016:	4628      	mov	r0, r5
 8007018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701c:	f000 b8da 	b.w	80071d4 <__malloc_unlock>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d908      	bls.n	8007036 <_free_r+0x42>
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	1821      	adds	r1, r4, r0
 8007028:	428b      	cmp	r3, r1
 800702a:	bf01      	itttt	eq
 800702c:	6819      	ldreq	r1, [r3, #0]
 800702e:	685b      	ldreq	r3, [r3, #4]
 8007030:	1809      	addeq	r1, r1, r0
 8007032:	6021      	streq	r1, [r4, #0]
 8007034:	e7ed      	b.n	8007012 <_free_r+0x1e>
 8007036:	461a      	mov	r2, r3
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b10b      	cbz	r3, 8007040 <_free_r+0x4c>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d9fa      	bls.n	8007036 <_free_r+0x42>
 8007040:	6811      	ldr	r1, [r2, #0]
 8007042:	1850      	adds	r0, r2, r1
 8007044:	42a0      	cmp	r0, r4
 8007046:	d10b      	bne.n	8007060 <_free_r+0x6c>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	4401      	add	r1, r0
 800704c:	1850      	adds	r0, r2, r1
 800704e:	4283      	cmp	r3, r0
 8007050:	6011      	str	r1, [r2, #0]
 8007052:	d1e0      	bne.n	8007016 <_free_r+0x22>
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4408      	add	r0, r1
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	6053      	str	r3, [r2, #4]
 800705e:	e7da      	b.n	8007016 <_free_r+0x22>
 8007060:	d902      	bls.n	8007068 <_free_r+0x74>
 8007062:	230c      	movs	r3, #12
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	e7d6      	b.n	8007016 <_free_r+0x22>
 8007068:	6820      	ldr	r0, [r4, #0]
 800706a:	1821      	adds	r1, r4, r0
 800706c:	428b      	cmp	r3, r1
 800706e:	bf01      	itttt	eq
 8007070:	6819      	ldreq	r1, [r3, #0]
 8007072:	685b      	ldreq	r3, [r3, #4]
 8007074:	1809      	addeq	r1, r1, r0
 8007076:	6021      	streq	r1, [r4, #0]
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	6054      	str	r4, [r2, #4]
 800707c:	e7cb      	b.n	8007016 <_free_r+0x22>
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20001aec 	.word	0x20001aec

08007084 <sbrk_aligned>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4e0f      	ldr	r6, [pc, #60]	@ (80070c4 <sbrk_aligned+0x40>)
 8007088:	460c      	mov	r4, r1
 800708a:	6831      	ldr	r1, [r6, #0]
 800708c:	4605      	mov	r5, r0
 800708e:	b911      	cbnz	r1, 8007096 <sbrk_aligned+0x12>
 8007090:	f000 fbaa 	bl	80077e8 <_sbrk_r>
 8007094:	6030      	str	r0, [r6, #0]
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f000 fba5 	bl	80077e8 <_sbrk_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	d103      	bne.n	80070aa <sbrk_aligned+0x26>
 80070a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070a6:	4620      	mov	r0, r4
 80070a8:	bd70      	pop	{r4, r5, r6, pc}
 80070aa:	1cc4      	adds	r4, r0, #3
 80070ac:	f024 0403 	bic.w	r4, r4, #3
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d0f8      	beq.n	80070a6 <sbrk_aligned+0x22>
 80070b4:	1a21      	subs	r1, r4, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fb96 	bl	80077e8 <_sbrk_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d1f2      	bne.n	80070a6 <sbrk_aligned+0x22>
 80070c0:	e7ef      	b.n	80070a2 <sbrk_aligned+0x1e>
 80070c2:	bf00      	nop
 80070c4:	20001ae8 	.word	0x20001ae8

080070c8 <_malloc_r>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	1ccd      	adds	r5, r1, #3
 80070ce:	f025 0503 	bic.w	r5, r5, #3
 80070d2:	3508      	adds	r5, #8
 80070d4:	2d0c      	cmp	r5, #12
 80070d6:	bf38      	it	cc
 80070d8:	250c      	movcc	r5, #12
 80070da:	2d00      	cmp	r5, #0
 80070dc:	4606      	mov	r6, r0
 80070de:	db01      	blt.n	80070e4 <_malloc_r+0x1c>
 80070e0:	42a9      	cmp	r1, r5
 80070e2:	d904      	bls.n	80070ee <_malloc_r+0x26>
 80070e4:	230c      	movs	r3, #12
 80070e6:	6033      	str	r3, [r6, #0]
 80070e8:	2000      	movs	r0, #0
 80070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071c4 <_malloc_r+0xfc>
 80070f2:	f000 f869 	bl	80071c8 <__malloc_lock>
 80070f6:	f8d8 3000 	ldr.w	r3, [r8]
 80070fa:	461c      	mov	r4, r3
 80070fc:	bb44      	cbnz	r4, 8007150 <_malloc_r+0x88>
 80070fe:	4629      	mov	r1, r5
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff ffbf 	bl	8007084 <sbrk_aligned>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	4604      	mov	r4, r0
 800710a:	d158      	bne.n	80071be <_malloc_r+0xf6>
 800710c:	f8d8 4000 	ldr.w	r4, [r8]
 8007110:	4627      	mov	r7, r4
 8007112:	2f00      	cmp	r7, #0
 8007114:	d143      	bne.n	800719e <_malloc_r+0xd6>
 8007116:	2c00      	cmp	r4, #0
 8007118:	d04b      	beq.n	80071b2 <_malloc_r+0xea>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4639      	mov	r1, r7
 800711e:	4630      	mov	r0, r6
 8007120:	eb04 0903 	add.w	r9, r4, r3
 8007124:	f000 fb60 	bl	80077e8 <_sbrk_r>
 8007128:	4581      	cmp	r9, r0
 800712a:	d142      	bne.n	80071b2 <_malloc_r+0xea>
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	4630      	mov	r0, r6
 8007130:	1a6d      	subs	r5, r5, r1
 8007132:	4629      	mov	r1, r5
 8007134:	f7ff ffa6 	bl	8007084 <sbrk_aligned>
 8007138:	3001      	adds	r0, #1
 800713a:	d03a      	beq.n	80071b2 <_malloc_r+0xea>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	442b      	add	r3, r5
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	f8d8 3000 	ldr.w	r3, [r8]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	bb62      	cbnz	r2, 80071a4 <_malloc_r+0xdc>
 800714a:	f8c8 7000 	str.w	r7, [r8]
 800714e:	e00f      	b.n	8007170 <_malloc_r+0xa8>
 8007150:	6822      	ldr	r2, [r4, #0]
 8007152:	1b52      	subs	r2, r2, r5
 8007154:	d420      	bmi.n	8007198 <_malloc_r+0xd0>
 8007156:	2a0b      	cmp	r2, #11
 8007158:	d917      	bls.n	800718a <_malloc_r+0xc2>
 800715a:	1961      	adds	r1, r4, r5
 800715c:	42a3      	cmp	r3, r4
 800715e:	6025      	str	r5, [r4, #0]
 8007160:	bf18      	it	ne
 8007162:	6059      	strne	r1, [r3, #4]
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	bf08      	it	eq
 8007168:	f8c8 1000 	streq.w	r1, [r8]
 800716c:	5162      	str	r2, [r4, r5]
 800716e:	604b      	str	r3, [r1, #4]
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f82f 	bl	80071d4 <__malloc_unlock>
 8007176:	f104 000b 	add.w	r0, r4, #11
 800717a:	1d23      	adds	r3, r4, #4
 800717c:	f020 0007 	bic.w	r0, r0, #7
 8007180:	1ac2      	subs	r2, r0, r3
 8007182:	bf1c      	itt	ne
 8007184:	1a1b      	subne	r3, r3, r0
 8007186:	50a3      	strne	r3, [r4, r2]
 8007188:	e7af      	b.n	80070ea <_malloc_r+0x22>
 800718a:	6862      	ldr	r2, [r4, #4]
 800718c:	42a3      	cmp	r3, r4
 800718e:	bf0c      	ite	eq
 8007190:	f8c8 2000 	streq.w	r2, [r8]
 8007194:	605a      	strne	r2, [r3, #4]
 8007196:	e7eb      	b.n	8007170 <_malloc_r+0xa8>
 8007198:	4623      	mov	r3, r4
 800719a:	6864      	ldr	r4, [r4, #4]
 800719c:	e7ae      	b.n	80070fc <_malloc_r+0x34>
 800719e:	463c      	mov	r4, r7
 80071a0:	687f      	ldr	r7, [r7, #4]
 80071a2:	e7b6      	b.n	8007112 <_malloc_r+0x4a>
 80071a4:	461a      	mov	r2, r3
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d1fb      	bne.n	80071a4 <_malloc_r+0xdc>
 80071ac:	2300      	movs	r3, #0
 80071ae:	6053      	str	r3, [r2, #4]
 80071b0:	e7de      	b.n	8007170 <_malloc_r+0xa8>
 80071b2:	230c      	movs	r3, #12
 80071b4:	4630      	mov	r0, r6
 80071b6:	6033      	str	r3, [r6, #0]
 80071b8:	f000 f80c 	bl	80071d4 <__malloc_unlock>
 80071bc:	e794      	b.n	80070e8 <_malloc_r+0x20>
 80071be:	6005      	str	r5, [r0, #0]
 80071c0:	e7d6      	b.n	8007170 <_malloc_r+0xa8>
 80071c2:	bf00      	nop
 80071c4:	20001aec 	.word	0x20001aec

080071c8 <__malloc_lock>:
 80071c8:	4801      	ldr	r0, [pc, #4]	@ (80071d0 <__malloc_lock+0x8>)
 80071ca:	f7ff bf03 	b.w	8006fd4 <__retarget_lock_acquire_recursive>
 80071ce:	bf00      	nop
 80071d0:	20001ae4 	.word	0x20001ae4

080071d4 <__malloc_unlock>:
 80071d4:	4801      	ldr	r0, [pc, #4]	@ (80071dc <__malloc_unlock+0x8>)
 80071d6:	f7ff befe 	b.w	8006fd6 <__retarget_lock_release_recursive>
 80071da:	bf00      	nop
 80071dc:	20001ae4 	.word	0x20001ae4

080071e0 <__ssputs_r>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	461f      	mov	r7, r3
 80071e6:	688e      	ldr	r6, [r1, #8]
 80071e8:	4682      	mov	sl, r0
 80071ea:	42be      	cmp	r6, r7
 80071ec:	460c      	mov	r4, r1
 80071ee:	4690      	mov	r8, r2
 80071f0:	680b      	ldr	r3, [r1, #0]
 80071f2:	d82d      	bhi.n	8007250 <__ssputs_r+0x70>
 80071f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071fc:	d026      	beq.n	800724c <__ssputs_r+0x6c>
 80071fe:	6965      	ldr	r5, [r4, #20]
 8007200:	6909      	ldr	r1, [r1, #16]
 8007202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007206:	eba3 0901 	sub.w	r9, r3, r1
 800720a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800720e:	1c7b      	adds	r3, r7, #1
 8007210:	444b      	add	r3, r9
 8007212:	106d      	asrs	r5, r5, #1
 8007214:	429d      	cmp	r5, r3
 8007216:	bf38      	it	cc
 8007218:	461d      	movcc	r5, r3
 800721a:	0553      	lsls	r3, r2, #21
 800721c:	d527      	bpl.n	800726e <__ssputs_r+0x8e>
 800721e:	4629      	mov	r1, r5
 8007220:	f7ff ff52 	bl	80070c8 <_malloc_r>
 8007224:	4606      	mov	r6, r0
 8007226:	b360      	cbz	r0, 8007282 <__ssputs_r+0xa2>
 8007228:	464a      	mov	r2, r9
 800722a:	6921      	ldr	r1, [r4, #16]
 800722c:	f7ff fed4 	bl	8006fd8 <memcpy>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723a:	81a3      	strh	r3, [r4, #12]
 800723c:	6126      	str	r6, [r4, #16]
 800723e:	444e      	add	r6, r9
 8007240:	6026      	str	r6, [r4, #0]
 8007242:	463e      	mov	r6, r7
 8007244:	6165      	str	r5, [r4, #20]
 8007246:	eba5 0509 	sub.w	r5, r5, r9
 800724a:	60a5      	str	r5, [r4, #8]
 800724c:	42be      	cmp	r6, r7
 800724e:	d900      	bls.n	8007252 <__ssputs_r+0x72>
 8007250:	463e      	mov	r6, r7
 8007252:	4632      	mov	r2, r6
 8007254:	4641      	mov	r1, r8
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	f000 faac 	bl	80077b4 <memmove>
 800725c:	2000      	movs	r0, #0
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	1b9b      	subs	r3, r3, r6
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	4433      	add	r3, r6
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726e:	462a      	mov	r2, r5
 8007270:	f000 fad8 	bl	8007824 <_realloc_r>
 8007274:	4606      	mov	r6, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d1e0      	bne.n	800723c <__ssputs_r+0x5c>
 800727a:	4650      	mov	r0, sl
 800727c:	6921      	ldr	r1, [r4, #16]
 800727e:	f7ff feb9 	bl	8006ff4 <_free_r>
 8007282:	230c      	movs	r3, #12
 8007284:	f8ca 3000 	str.w	r3, [sl]
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800728e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	e7e9      	b.n	800726a <__ssputs_r+0x8a>
	...

08007298 <_svfiprintf_r>:
 8007298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	4698      	mov	r8, r3
 800729e:	898b      	ldrh	r3, [r1, #12]
 80072a0:	4607      	mov	r7, r0
 80072a2:	061b      	lsls	r3, r3, #24
 80072a4:	460d      	mov	r5, r1
 80072a6:	4614      	mov	r4, r2
 80072a8:	b09d      	sub	sp, #116	@ 0x74
 80072aa:	d510      	bpl.n	80072ce <_svfiprintf_r+0x36>
 80072ac:	690b      	ldr	r3, [r1, #16]
 80072ae:	b973      	cbnz	r3, 80072ce <_svfiprintf_r+0x36>
 80072b0:	2140      	movs	r1, #64	@ 0x40
 80072b2:	f7ff ff09 	bl	80070c8 <_malloc_r>
 80072b6:	6028      	str	r0, [r5, #0]
 80072b8:	6128      	str	r0, [r5, #16]
 80072ba:	b930      	cbnz	r0, 80072ca <_svfiprintf_r+0x32>
 80072bc:	230c      	movs	r3, #12
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072c4:	b01d      	add	sp, #116	@ 0x74
 80072c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ca:	2340      	movs	r3, #64	@ 0x40
 80072cc:	616b      	str	r3, [r5, #20]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d2:	2320      	movs	r3, #32
 80072d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072d8:	2330      	movs	r3, #48	@ 0x30
 80072da:	f04f 0901 	mov.w	r9, #1
 80072de:	f8cd 800c 	str.w	r8, [sp, #12]
 80072e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800747c <_svfiprintf_r+0x1e4>
 80072e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ea:	4623      	mov	r3, r4
 80072ec:	469a      	mov	sl, r3
 80072ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f2:	b10a      	cbz	r2, 80072f8 <_svfiprintf_r+0x60>
 80072f4:	2a25      	cmp	r2, #37	@ 0x25
 80072f6:	d1f9      	bne.n	80072ec <_svfiprintf_r+0x54>
 80072f8:	ebba 0b04 	subs.w	fp, sl, r4
 80072fc:	d00b      	beq.n	8007316 <_svfiprintf_r+0x7e>
 80072fe:	465b      	mov	r3, fp
 8007300:	4622      	mov	r2, r4
 8007302:	4629      	mov	r1, r5
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ff6b 	bl	80071e0 <__ssputs_r>
 800730a:	3001      	adds	r0, #1
 800730c:	f000 80a7 	beq.w	800745e <_svfiprintf_r+0x1c6>
 8007310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007312:	445a      	add	r2, fp
 8007314:	9209      	str	r2, [sp, #36]	@ 0x24
 8007316:	f89a 3000 	ldrb.w	r3, [sl]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 809f 	beq.w	800745e <_svfiprintf_r+0x1c6>
 8007320:	2300      	movs	r3, #0
 8007322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800732a:	f10a 0a01 	add.w	sl, sl, #1
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	9307      	str	r3, [sp, #28]
 8007332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007336:	931a      	str	r3, [sp, #104]	@ 0x68
 8007338:	4654      	mov	r4, sl
 800733a:	2205      	movs	r2, #5
 800733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007340:	484e      	ldr	r0, [pc, #312]	@ (800747c <_svfiprintf_r+0x1e4>)
 8007342:	f000 fa61 	bl	8007808 <memchr>
 8007346:	9a04      	ldr	r2, [sp, #16]
 8007348:	b9d8      	cbnz	r0, 8007382 <_svfiprintf_r+0xea>
 800734a:	06d0      	lsls	r0, r2, #27
 800734c:	bf44      	itt	mi
 800734e:	2320      	movmi	r3, #32
 8007350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007354:	0711      	lsls	r1, r2, #28
 8007356:	bf44      	itt	mi
 8007358:	232b      	movmi	r3, #43	@ 0x2b
 800735a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800735e:	f89a 3000 	ldrb.w	r3, [sl]
 8007362:	2b2a      	cmp	r3, #42	@ 0x2a
 8007364:	d015      	beq.n	8007392 <_svfiprintf_r+0xfa>
 8007366:	4654      	mov	r4, sl
 8007368:	2000      	movs	r0, #0
 800736a:	f04f 0c0a 	mov.w	ip, #10
 800736e:	9a07      	ldr	r2, [sp, #28]
 8007370:	4621      	mov	r1, r4
 8007372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007376:	3b30      	subs	r3, #48	@ 0x30
 8007378:	2b09      	cmp	r3, #9
 800737a:	d94b      	bls.n	8007414 <_svfiprintf_r+0x17c>
 800737c:	b1b0      	cbz	r0, 80073ac <_svfiprintf_r+0x114>
 800737e:	9207      	str	r2, [sp, #28]
 8007380:	e014      	b.n	80073ac <_svfiprintf_r+0x114>
 8007382:	eba0 0308 	sub.w	r3, r0, r8
 8007386:	fa09 f303 	lsl.w	r3, r9, r3
 800738a:	4313      	orrs	r3, r2
 800738c:	46a2      	mov	sl, r4
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	e7d2      	b.n	8007338 <_svfiprintf_r+0xa0>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	1d19      	adds	r1, r3, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	9103      	str	r1, [sp, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfbb      	ittet	lt
 800739e:	425b      	neglt	r3, r3
 80073a0:	f042 0202 	orrlt.w	r2, r2, #2
 80073a4:	9307      	strge	r3, [sp, #28]
 80073a6:	9307      	strlt	r3, [sp, #28]
 80073a8:	bfb8      	it	lt
 80073aa:	9204      	strlt	r2, [sp, #16]
 80073ac:	7823      	ldrb	r3, [r4, #0]
 80073ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80073b0:	d10a      	bne.n	80073c8 <_svfiprintf_r+0x130>
 80073b2:	7863      	ldrb	r3, [r4, #1]
 80073b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b6:	d132      	bne.n	800741e <_svfiprintf_r+0x186>
 80073b8:	9b03      	ldr	r3, [sp, #12]
 80073ba:	3402      	adds	r4, #2
 80073bc:	1d1a      	adds	r2, r3, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	9203      	str	r2, [sp, #12]
 80073c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007480 <_svfiprintf_r+0x1e8>
 80073cc:	2203      	movs	r2, #3
 80073ce:	4650      	mov	r0, sl
 80073d0:	7821      	ldrb	r1, [r4, #0]
 80073d2:	f000 fa19 	bl	8007808 <memchr>
 80073d6:	b138      	cbz	r0, 80073e8 <_svfiprintf_r+0x150>
 80073d8:	2240      	movs	r2, #64	@ 0x40
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	eba0 000a 	sub.w	r0, r0, sl
 80073e0:	4082      	lsls	r2, r0
 80073e2:	4313      	orrs	r3, r2
 80073e4:	3401      	adds	r4, #1
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ec:	2206      	movs	r2, #6
 80073ee:	4825      	ldr	r0, [pc, #148]	@ (8007484 <_svfiprintf_r+0x1ec>)
 80073f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073f4:	f000 fa08 	bl	8007808 <memchr>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d036      	beq.n	800746a <_svfiprintf_r+0x1d2>
 80073fc:	4b22      	ldr	r3, [pc, #136]	@ (8007488 <_svfiprintf_r+0x1f0>)
 80073fe:	bb1b      	cbnz	r3, 8007448 <_svfiprintf_r+0x1b0>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	3307      	adds	r3, #7
 8007404:	f023 0307 	bic.w	r3, r3, #7
 8007408:	3308      	adds	r3, #8
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	4433      	add	r3, r6
 8007410:	9309      	str	r3, [sp, #36]	@ 0x24
 8007412:	e76a      	b.n	80072ea <_svfiprintf_r+0x52>
 8007414:	460c      	mov	r4, r1
 8007416:	2001      	movs	r0, #1
 8007418:	fb0c 3202 	mla	r2, ip, r2, r3
 800741c:	e7a8      	b.n	8007370 <_svfiprintf_r+0xd8>
 800741e:	2300      	movs	r3, #0
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4619      	mov	r1, r3
 8007426:	3401      	adds	r4, #1
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	4620      	mov	r0, r4
 800742c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007430:	3a30      	subs	r2, #48	@ 0x30
 8007432:	2a09      	cmp	r2, #9
 8007434:	d903      	bls.n	800743e <_svfiprintf_r+0x1a6>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0c6      	beq.n	80073c8 <_svfiprintf_r+0x130>
 800743a:	9105      	str	r1, [sp, #20]
 800743c:	e7c4      	b.n	80073c8 <_svfiprintf_r+0x130>
 800743e:	4604      	mov	r4, r0
 8007440:	2301      	movs	r3, #1
 8007442:	fb0c 2101 	mla	r1, ip, r1, r2
 8007446:	e7f0      	b.n	800742a <_svfiprintf_r+0x192>
 8007448:	ab03      	add	r3, sp, #12
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	462a      	mov	r2, r5
 800744e:	4638      	mov	r0, r7
 8007450:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <_svfiprintf_r+0x1f4>)
 8007452:	a904      	add	r1, sp, #16
 8007454:	f3af 8000 	nop.w
 8007458:	1c42      	adds	r2, r0, #1
 800745a:	4606      	mov	r6, r0
 800745c:	d1d6      	bne.n	800740c <_svfiprintf_r+0x174>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	065b      	lsls	r3, r3, #25
 8007462:	f53f af2d 	bmi.w	80072c0 <_svfiprintf_r+0x28>
 8007466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007468:	e72c      	b.n	80072c4 <_svfiprintf_r+0x2c>
 800746a:	ab03      	add	r3, sp, #12
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	462a      	mov	r2, r5
 8007470:	4638      	mov	r0, r7
 8007472:	4b06      	ldr	r3, [pc, #24]	@ (800748c <_svfiprintf_r+0x1f4>)
 8007474:	a904      	add	r1, sp, #16
 8007476:	f000 f87d 	bl	8007574 <_printf_i>
 800747a:	e7ed      	b.n	8007458 <_svfiprintf_r+0x1c0>
 800747c:	08007ade 	.word	0x08007ade
 8007480:	08007ae4 	.word	0x08007ae4
 8007484:	08007ae8 	.word	0x08007ae8
 8007488:	00000000 	.word	0x00000000
 800748c:	080071e1 	.word	0x080071e1

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4616      	mov	r6, r2
 8007496:	4698      	mov	r8, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	4607      	mov	r7, r0
 800749e:	4293      	cmp	r3, r2
 80074a0:	bfb8      	it	lt
 80074a2:	4613      	movlt	r3, r2
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074aa:	460c      	mov	r4, r1
 80074ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074b0:	b10a      	cbz	r2, 80074b6 <_printf_common+0x26>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	0699      	lsls	r1, r3, #26
 80074ba:	bf42      	ittt	mi
 80074bc:	6833      	ldrmi	r3, [r6, #0]
 80074be:	3302      	addmi	r3, #2
 80074c0:	6033      	strmi	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	f015 0506 	ands.w	r5, r5, #6
 80074c8:	d106      	bne.n	80074d8 <_printf_common+0x48>
 80074ca:	f104 0a19 	add.w	sl, r4, #25
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc2b      	bgt.n	8007530 <_printf_common+0xa0>
 80074d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	3b00      	subs	r3, #0
 80074e0:	bf18      	it	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	0692      	lsls	r2, r2, #26
 80074e6:	d430      	bmi.n	800754a <_printf_common+0xba>
 80074e8:	4641      	mov	r1, r8
 80074ea:	4638      	mov	r0, r7
 80074ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074f0:	47c8      	blx	r9
 80074f2:	3001      	adds	r0, #1
 80074f4:	d023      	beq.n	800753e <_printf_common+0xae>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	f003 0306 	and.w	r3, r3, #6
 80074fe:	2b04      	cmp	r3, #4
 8007500:	bf14      	ite	ne
 8007502:	2500      	movne	r5, #0
 8007504:	6833      	ldreq	r3, [r6, #0]
 8007506:	f04f 0600 	mov.w	r6, #0
 800750a:	bf08      	it	eq
 800750c:	68e5      	ldreq	r5, [r4, #12]
 800750e:	f104 041a 	add.w	r4, r4, #26
 8007512:	bf08      	it	eq
 8007514:	1aed      	subeq	r5, r5, r3
 8007516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800751a:	bf08      	it	eq
 800751c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007520:	4293      	cmp	r3, r2
 8007522:	bfc4      	itt	gt
 8007524:	1a9b      	subgt	r3, r3, r2
 8007526:	18ed      	addgt	r5, r5, r3
 8007528:	42b5      	cmp	r5, r6
 800752a:	d11a      	bne.n	8007562 <_printf_common+0xd2>
 800752c:	2000      	movs	r0, #0
 800752e:	e008      	b.n	8007542 <_printf_common+0xb2>
 8007530:	2301      	movs	r3, #1
 8007532:	4652      	mov	r2, sl
 8007534:	4641      	mov	r1, r8
 8007536:	4638      	mov	r0, r7
 8007538:	47c8      	blx	r9
 800753a:	3001      	adds	r0, #1
 800753c:	d103      	bne.n	8007546 <_printf_common+0xb6>
 800753e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	3501      	adds	r5, #1
 8007548:	e7c1      	b.n	80074ce <_printf_common+0x3e>
 800754a:	2030      	movs	r0, #48	@ 0x30
 800754c:	18e1      	adds	r1, r4, r3
 800754e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007558:	4422      	add	r2, r4
 800755a:	3302      	adds	r3, #2
 800755c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007560:	e7c2      	b.n	80074e8 <_printf_common+0x58>
 8007562:	2301      	movs	r3, #1
 8007564:	4622      	mov	r2, r4
 8007566:	4641      	mov	r1, r8
 8007568:	4638      	mov	r0, r7
 800756a:	47c8      	blx	r9
 800756c:	3001      	adds	r0, #1
 800756e:	d0e6      	beq.n	800753e <_printf_common+0xae>
 8007570:	3601      	adds	r6, #1
 8007572:	e7d9      	b.n	8007528 <_printf_common+0x98>

08007574 <_printf_i>:
 8007574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	7e0f      	ldrb	r7, [r1, #24]
 800757a:	4691      	mov	r9, r2
 800757c:	2f78      	cmp	r7, #120	@ 0x78
 800757e:	4680      	mov	r8, r0
 8007580:	460c      	mov	r4, r1
 8007582:	469a      	mov	sl, r3
 8007584:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800758a:	d807      	bhi.n	800759c <_printf_i+0x28>
 800758c:	2f62      	cmp	r7, #98	@ 0x62
 800758e:	d80a      	bhi.n	80075a6 <_printf_i+0x32>
 8007590:	2f00      	cmp	r7, #0
 8007592:	f000 80d3 	beq.w	800773c <_printf_i+0x1c8>
 8007596:	2f58      	cmp	r7, #88	@ 0x58
 8007598:	f000 80ba 	beq.w	8007710 <_printf_i+0x19c>
 800759c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075a4:	e03a      	b.n	800761c <_printf_i+0xa8>
 80075a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075aa:	2b15      	cmp	r3, #21
 80075ac:	d8f6      	bhi.n	800759c <_printf_i+0x28>
 80075ae:	a101      	add	r1, pc, #4	@ (adr r1, 80075b4 <_printf_i+0x40>)
 80075b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b4:	0800760d 	.word	0x0800760d
 80075b8:	08007621 	.word	0x08007621
 80075bc:	0800759d 	.word	0x0800759d
 80075c0:	0800759d 	.word	0x0800759d
 80075c4:	0800759d 	.word	0x0800759d
 80075c8:	0800759d 	.word	0x0800759d
 80075cc:	08007621 	.word	0x08007621
 80075d0:	0800759d 	.word	0x0800759d
 80075d4:	0800759d 	.word	0x0800759d
 80075d8:	0800759d 	.word	0x0800759d
 80075dc:	0800759d 	.word	0x0800759d
 80075e0:	08007723 	.word	0x08007723
 80075e4:	0800764b 	.word	0x0800764b
 80075e8:	080076dd 	.word	0x080076dd
 80075ec:	0800759d 	.word	0x0800759d
 80075f0:	0800759d 	.word	0x0800759d
 80075f4:	08007745 	.word	0x08007745
 80075f8:	0800759d 	.word	0x0800759d
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	0800759d 	.word	0x0800759d
 8007604:	0800759d 	.word	0x0800759d
 8007608:	080076e5 	.word	0x080076e5
 800760c:	6833      	ldr	r3, [r6, #0]
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6032      	str	r2, [r6, #0]
 8007614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800761c:	2301      	movs	r3, #1
 800761e:	e09e      	b.n	800775e <_printf_i+0x1ea>
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	1d19      	adds	r1, r3, #4
 8007626:	6031      	str	r1, [r6, #0]
 8007628:	0606      	lsls	r6, r0, #24
 800762a:	d501      	bpl.n	8007630 <_printf_i+0xbc>
 800762c:	681d      	ldr	r5, [r3, #0]
 800762e:	e003      	b.n	8007638 <_printf_i+0xc4>
 8007630:	0645      	lsls	r5, r0, #25
 8007632:	d5fb      	bpl.n	800762c <_printf_i+0xb8>
 8007634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007638:	2d00      	cmp	r5, #0
 800763a:	da03      	bge.n	8007644 <_printf_i+0xd0>
 800763c:	232d      	movs	r3, #45	@ 0x2d
 800763e:	426d      	negs	r5, r5
 8007640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007644:	230a      	movs	r3, #10
 8007646:	4859      	ldr	r0, [pc, #356]	@ (80077ac <_printf_i+0x238>)
 8007648:	e011      	b.n	800766e <_printf_i+0xfa>
 800764a:	6821      	ldr	r1, [r4, #0]
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	0608      	lsls	r0, r1, #24
 8007650:	f853 5b04 	ldr.w	r5, [r3], #4
 8007654:	d402      	bmi.n	800765c <_printf_i+0xe8>
 8007656:	0649      	lsls	r1, r1, #25
 8007658:	bf48      	it	mi
 800765a:	b2ad      	uxthmi	r5, r5
 800765c:	2f6f      	cmp	r7, #111	@ 0x6f
 800765e:	6033      	str	r3, [r6, #0]
 8007660:	bf14      	ite	ne
 8007662:	230a      	movne	r3, #10
 8007664:	2308      	moveq	r3, #8
 8007666:	4851      	ldr	r0, [pc, #324]	@ (80077ac <_printf_i+0x238>)
 8007668:	2100      	movs	r1, #0
 800766a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800766e:	6866      	ldr	r6, [r4, #4]
 8007670:	2e00      	cmp	r6, #0
 8007672:	bfa8      	it	ge
 8007674:	6821      	ldrge	r1, [r4, #0]
 8007676:	60a6      	str	r6, [r4, #8]
 8007678:	bfa4      	itt	ge
 800767a:	f021 0104 	bicge.w	r1, r1, #4
 800767e:	6021      	strge	r1, [r4, #0]
 8007680:	b90d      	cbnz	r5, 8007686 <_printf_i+0x112>
 8007682:	2e00      	cmp	r6, #0
 8007684:	d04b      	beq.n	800771e <_printf_i+0x1aa>
 8007686:	4616      	mov	r6, r2
 8007688:	fbb5 f1f3 	udiv	r1, r5, r3
 800768c:	fb03 5711 	mls	r7, r3, r1, r5
 8007690:	5dc7      	ldrb	r7, [r0, r7]
 8007692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007696:	462f      	mov	r7, r5
 8007698:	42bb      	cmp	r3, r7
 800769a:	460d      	mov	r5, r1
 800769c:	d9f4      	bls.n	8007688 <_printf_i+0x114>
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d10b      	bne.n	80076ba <_printf_i+0x146>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	07df      	lsls	r7, r3, #31
 80076a6:	d508      	bpl.n	80076ba <_printf_i+0x146>
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	6861      	ldr	r1, [r4, #4]
 80076ac:	4299      	cmp	r1, r3
 80076ae:	bfde      	ittt	le
 80076b0:	2330      	movle	r3, #48	@ 0x30
 80076b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076ba:	1b92      	subs	r2, r2, r6
 80076bc:	6122      	str	r2, [r4, #16]
 80076be:	464b      	mov	r3, r9
 80076c0:	4621      	mov	r1, r4
 80076c2:	4640      	mov	r0, r8
 80076c4:	f8cd a000 	str.w	sl, [sp]
 80076c8:	aa03      	add	r2, sp, #12
 80076ca:	f7ff fee1 	bl	8007490 <_printf_common>
 80076ce:	3001      	adds	r0, #1
 80076d0:	d14a      	bne.n	8007768 <_printf_i+0x1f4>
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076d6:	b004      	add	sp, #16
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	f043 0320 	orr.w	r3, r3, #32
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	2778      	movs	r7, #120	@ 0x78
 80076e6:	4832      	ldr	r0, [pc, #200]	@ (80077b0 <_printf_i+0x23c>)
 80076e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	6831      	ldr	r1, [r6, #0]
 80076f0:	061f      	lsls	r7, r3, #24
 80076f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80076f6:	d402      	bmi.n	80076fe <_printf_i+0x18a>
 80076f8:	065f      	lsls	r7, r3, #25
 80076fa:	bf48      	it	mi
 80076fc:	b2ad      	uxthmi	r5, r5
 80076fe:	6031      	str	r1, [r6, #0]
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	bf44      	itt	mi
 8007704:	f043 0320 	orrmi.w	r3, r3, #32
 8007708:	6023      	strmi	r3, [r4, #0]
 800770a:	b11d      	cbz	r5, 8007714 <_printf_i+0x1a0>
 800770c:	2310      	movs	r3, #16
 800770e:	e7ab      	b.n	8007668 <_printf_i+0xf4>
 8007710:	4826      	ldr	r0, [pc, #152]	@ (80077ac <_printf_i+0x238>)
 8007712:	e7e9      	b.n	80076e8 <_printf_i+0x174>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	f023 0320 	bic.w	r3, r3, #32
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	e7f6      	b.n	800770c <_printf_i+0x198>
 800771e:	4616      	mov	r6, r2
 8007720:	e7bd      	b.n	800769e <_printf_i+0x12a>
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	6825      	ldr	r5, [r4, #0]
 8007726:	1d18      	adds	r0, r3, #4
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	6030      	str	r0, [r6, #0]
 800772c:	062e      	lsls	r6, r5, #24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	d501      	bpl.n	8007736 <_printf_i+0x1c2>
 8007732:	6019      	str	r1, [r3, #0]
 8007734:	e002      	b.n	800773c <_printf_i+0x1c8>
 8007736:	0668      	lsls	r0, r5, #25
 8007738:	d5fb      	bpl.n	8007732 <_printf_i+0x1be>
 800773a:	8019      	strh	r1, [r3, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	4616      	mov	r6, r2
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	e7bc      	b.n	80076be <_printf_i+0x14a>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	2100      	movs	r1, #0
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	6032      	str	r2, [r6, #0]
 800774c:	681e      	ldr	r6, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	4630      	mov	r0, r6
 8007752:	f000 f859 	bl	8007808 <memchr>
 8007756:	b108      	cbz	r0, 800775c <_printf_i+0x1e8>
 8007758:	1b80      	subs	r0, r0, r6
 800775a:	6060      	str	r0, [r4, #4]
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	2300      	movs	r3, #0
 8007762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007766:	e7aa      	b.n	80076be <_printf_i+0x14a>
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	47d0      	blx	sl
 8007772:	3001      	adds	r0, #1
 8007774:	d0ad      	beq.n	80076d2 <_printf_i+0x15e>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	079b      	lsls	r3, r3, #30
 800777a:	d413      	bmi.n	80077a4 <_printf_i+0x230>
 800777c:	68e0      	ldr	r0, [r4, #12]
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	4298      	cmp	r0, r3
 8007782:	bfb8      	it	lt
 8007784:	4618      	movlt	r0, r3
 8007786:	e7a6      	b.n	80076d6 <_printf_i+0x162>
 8007788:	2301      	movs	r3, #1
 800778a:	4632      	mov	r2, r6
 800778c:	4649      	mov	r1, r9
 800778e:	4640      	mov	r0, r8
 8007790:	47d0      	blx	sl
 8007792:	3001      	adds	r0, #1
 8007794:	d09d      	beq.n	80076d2 <_printf_i+0x15e>
 8007796:	3501      	adds	r5, #1
 8007798:	68e3      	ldr	r3, [r4, #12]
 800779a:	9903      	ldr	r1, [sp, #12]
 800779c:	1a5b      	subs	r3, r3, r1
 800779e:	42ab      	cmp	r3, r5
 80077a0:	dcf2      	bgt.n	8007788 <_printf_i+0x214>
 80077a2:	e7eb      	b.n	800777c <_printf_i+0x208>
 80077a4:	2500      	movs	r5, #0
 80077a6:	f104 0619 	add.w	r6, r4, #25
 80077aa:	e7f5      	b.n	8007798 <_printf_i+0x224>
 80077ac:	08007aef 	.word	0x08007aef
 80077b0:	08007b00 	.word	0x08007b00

080077b4 <memmove>:
 80077b4:	4288      	cmp	r0, r1
 80077b6:	b510      	push	{r4, lr}
 80077b8:	eb01 0402 	add.w	r4, r1, r2
 80077bc:	d902      	bls.n	80077c4 <memmove+0x10>
 80077be:	4284      	cmp	r4, r0
 80077c0:	4623      	mov	r3, r4
 80077c2:	d807      	bhi.n	80077d4 <memmove+0x20>
 80077c4:	1e43      	subs	r3, r0, #1
 80077c6:	42a1      	cmp	r1, r4
 80077c8:	d008      	beq.n	80077dc <memmove+0x28>
 80077ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077d2:	e7f8      	b.n	80077c6 <memmove+0x12>
 80077d4:	4601      	mov	r1, r0
 80077d6:	4402      	add	r2, r0
 80077d8:	428a      	cmp	r2, r1
 80077da:	d100      	bne.n	80077de <memmove+0x2a>
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077e6:	e7f7      	b.n	80077d8 <memmove+0x24>

080077e8 <_sbrk_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d05      	ldr	r5, [pc, #20]	@ (8007804 <_sbrk_r+0x1c>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa f98e 	bl	8001b14 <_sbrk>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_sbrk_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_sbrk_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20001ae0 	.word	0x20001ae0

08007808 <memchr>:
 8007808:	4603      	mov	r3, r0
 800780a:	b510      	push	{r4, lr}
 800780c:	b2c9      	uxtb	r1, r1
 800780e:	4402      	add	r2, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	4618      	mov	r0, r3
 8007814:	d101      	bne.n	800781a <memchr+0x12>
 8007816:	2000      	movs	r0, #0
 8007818:	e003      	b.n	8007822 <memchr+0x1a>
 800781a:	7804      	ldrb	r4, [r0, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	428c      	cmp	r4, r1
 8007820:	d1f6      	bne.n	8007810 <memchr+0x8>
 8007822:	bd10      	pop	{r4, pc}

08007824 <_realloc_r>:
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	4680      	mov	r8, r0
 800782a:	4615      	mov	r5, r2
 800782c:	460c      	mov	r4, r1
 800782e:	b921      	cbnz	r1, 800783a <_realloc_r+0x16>
 8007830:	4611      	mov	r1, r2
 8007832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	f7ff bc47 	b.w	80070c8 <_malloc_r>
 800783a:	b92a      	cbnz	r2, 8007848 <_realloc_r+0x24>
 800783c:	f7ff fbda 	bl	8006ff4 <_free_r>
 8007840:	2400      	movs	r4, #0
 8007842:	4620      	mov	r0, r4
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	f000 f81a 	bl	8007880 <_malloc_usable_size_r>
 800784c:	4285      	cmp	r5, r0
 800784e:	4606      	mov	r6, r0
 8007850:	d802      	bhi.n	8007858 <_realloc_r+0x34>
 8007852:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007856:	d8f4      	bhi.n	8007842 <_realloc_r+0x1e>
 8007858:	4629      	mov	r1, r5
 800785a:	4640      	mov	r0, r8
 800785c:	f7ff fc34 	bl	80070c8 <_malloc_r>
 8007860:	4607      	mov	r7, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	d0ec      	beq.n	8007840 <_realloc_r+0x1c>
 8007866:	42b5      	cmp	r5, r6
 8007868:	462a      	mov	r2, r5
 800786a:	4621      	mov	r1, r4
 800786c:	bf28      	it	cs
 800786e:	4632      	movcs	r2, r6
 8007870:	f7ff fbb2 	bl	8006fd8 <memcpy>
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff fbbc 	bl	8006ff4 <_free_r>
 800787c:	463c      	mov	r4, r7
 800787e:	e7e0      	b.n	8007842 <_realloc_r+0x1e>

08007880 <_malloc_usable_size_r>:
 8007880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007884:	1f18      	subs	r0, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfbc      	itt	lt
 800788a:	580b      	ldrlt	r3, [r1, r0]
 800788c:	18c0      	addlt	r0, r0, r3
 800788e:	4770      	bx	lr

08007890 <_init>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr

0800789c <_fini>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr
