
rvb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a38  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da8  08006da8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db0  08006db0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006db4  08006db4  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006db8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  20000060  08006e18  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab8  08006e18  00008ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014048  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbf  00000000  00000000  0001c0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c88  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7a1  00000000  00000000  000219b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155f8  00000000  00000000  0003c159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d70f  00000000  00000000  00051751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dee60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000deea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e3540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b30 	.word	0x08006b30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006b30 	.word	0x08006b30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//
//////////////////////////////////////////////

extern void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000168:	2014      	movs	r0, #20
 800016a:	f002 f8d6 	bl	800231a <HAL_NVIC_DisableIRQ>
	HAL_ResumeTick();
 800016e:	f001 f967 	bl	8001440 <HAL_ResumeTick>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000172:	4b0b      	ldr	r3, [pc, #44]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 8000178:	4b09      	ldr	r3, [pc, #36]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800017a:	2201      	movs	r2, #1
 800017c:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_WAKEUP;
 800017e:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000180:	2206      	movs	r2, #6
 8000182:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
    xQueueGenericSendFromISR(xQueueAppCAN, &stAppCANMsg, 0,0);
 800018a:	4b06      	ldr	r3, [pc, #24]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800018c:	6818      	ldr	r0, [r3, #0]
 800018e:	2300      	movs	r3, #0
 8000190:	2200      	movs	r2, #0
 8000192:	4903      	ldr	r1, [pc, #12]	@ (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000194:	f004 f9b0 	bl	80044f8 <xQueueGenericSendFromISR>


}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	20000088 	.word	0x20000088

080001a8 <TaskAppCAN_getQueue>:
//              TaskAppCAN_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppCAN_getQueue()
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	return &xQueueAppCAN;
 80001ac:	4b02      	ldr	r3, [pc, #8]	@ (80001b8 <TaskAppCAN_getQueue+0x10>)
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	20000088 	.word	0x20000088

080001bc <TaskAppCAN_Entry>:
//              TaskAppCAN_Entry
//
//
//////////////////////////////////////////////
void TaskAppCAN_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
 80001c4:	6039      	str	r1, [r7, #0]
    xQueueAppCAN = xQueue;
 80001c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000204 <TaskAppCAN_Entry+0x48>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6013      	str	r3, [r2, #0]
    xTimerAppCAN = xTimer;
 80001cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <TaskAppCAN_Entry+0x4c>)
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	6013      	str	r3, [r2, #0]

    hCAN = hGet_CAN_Handler();
 80001d2:	f000 fd07 	bl	8000be4 <hGet_CAN_Handler>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	@ (800020c <TaskAppCAN_Entry+0x50>)
 80001da:	6013      	str	r3, [r2, #0]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 80001e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 80001ee:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <TaskAppCAN_Entry+0x48>)
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	2300      	movs	r3, #0
 80001f4:	2200      	movs	r2, #0
 80001f6:	4906      	ldr	r1, [pc, #24]	@ (8000210 <TaskAppCAN_Entry+0x54>)
 80001f8:	f004 f87c 	bl	80042f4 <xQueueGenericSend>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000088 	.word	0x20000088
 8000208:	2000008c 	.word	0x2000008c
 800020c:	20000098 	.word	0x20000098
 8000210:	2000007c 	.word	0x2000007c

08000214 <TaskAppCAN_Start>:
//              TaskAppCAN_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_Start(sMessageType *psMessage)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800021c:	2301      	movs	r3, #1
 800021e:	73fb      	strb	r3, [r7, #15]

    (void)stHAL_CAN_FilterConfig();
 8000220:	f000 fcea 	bl	8000bf8 <stHAL_CAN_FilterConfig>
    (void)HAL_CAN_Start(hCAN);
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <TaskAppCAN_Start+0x3c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fb26 	bl	800187a <HAL_CAN_Start>

    pstQueueAppSerial  = TaskAppSerial_getQueue();
 800022e:	f000 f9db 	bl	80005e8 <TaskAppSerial_getQueue>
 8000232:	4603      	mov	r3, r0
 8000234:	4a07      	ldr	r2, [pc, #28]	@ (8000254 <TaskAppCAN_Start+0x40>)
 8000236:	6013      	str	r3, [r2, #0]
    pstQueueIO = TaskIO_getQueue();
 8000238:	f000 fb22 	bl	8000880 <TaskIO_getQueue>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <TaskAppCAN_Start+0x44>)
 8000242:	601a      	str	r2, [r3, #0]
    /*u16SizeSerialTxBuffer =  TaskAppSerial_getTxBuffer(&u8SerialTxBuffer);
    pu8SerialTxBuffer = &u8SerialTxBuffer;*/
	return boError;
 8000244:	7bfb      	ldrb	r3, [r7, #15]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000098 	.word	0x20000098
 8000254:	20000090 	.word	0x20000090
 8000258:	20000094 	.word	0x20000094

0800025c <TaskAppCAN_ReceiveEvent>:
//              TaskAppCAN_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_ReceiveEvent(sMessageType *psMessage)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000264:	2301      	movs	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]

    tstFrameCAN *pstFrameCAN = (tstFrameCAN*)(psMessage->pcMessageData);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	60bb      	str	r3, [r7, #8]
        HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
        HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
    	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    }*/

    memset((char*)u8SerialTxBuffer,0x00,sizeof(u8SerialTxBuffer));
 800026e:	2240      	movs	r2, #64	@ 0x40
 8000270:	2100      	movs	r1, #0
 8000272:	4826      	ldr	r0, [pc, #152]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000274:	f005 ff76 	bl	8006164 <memset>
    sprintf((char*)&u8SerialTxBuffer[0],"%8X    ",(uint32_t)pstFrameCAN->u32DID);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4924      	ldr	r1, [pc, #144]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb4>)
 8000280:	4822      	ldr	r0, [pc, #136]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000282:	f005 ff4f 	bl	8006124 <siprintf>
    size_t u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 8000286:	4821      	ldr	r0, [pc, #132]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000288:	f7ff ff62 	bl	8000150 <strlen>
 800028c:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	e012      	b.n	80002ba <TaskAppCAN_ReceiveEvent+0x5e>
    {
    	sprintf((char*)&u8SerialTxBuffer[u16Len],"%02X ",(uint16_t)pstFrameCAN->u8Data[u32]);
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 8000298:	1898      	adds	r0, r3, r2
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	4413      	add	r3, r2
 80002a0:	3308      	adds	r3, #8
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	491b      	ldr	r1, [pc, #108]	@ (8000314 <TaskAppCAN_ReceiveEvent+0xb8>)
 80002a8:	f005 ff3c 	bl	8006124 <siprintf>
    	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002ac:	4817      	ldr	r0, [pc, #92]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	3301      	adds	r3, #1
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d3e7      	bcc.n	8000294 <TaskAppCAN_ReceiveEvent+0x38>
    }
	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002c4:	4811      	ldr	r0, [pc, #68]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002c6:	f7ff ff43 	bl	8000150 <strlen>
 80002ca:	6178      	str	r0, [r7, #20]
	sprintf((char*)&u8SerialTxBuffer[u16Len],"\r\n");
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002d0:	4413      	add	r3, r2
 80002d2:	4911      	ldr	r1, [pc, #68]	@ (8000318 <TaskAppCAN_ReceiveEvent+0xbc>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f005 ff25 	bl	8006124 <siprintf>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPSERIAL;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e8:	2203      	movs	r2, #3
 80002ea:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = (char*)&u8SerialTxBuffer[0];
 80002ec:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002ee:	4a07      	ldr	r2, [pc, #28]	@ (800030c <TaskAppCAN_ReceiveEvent+0xb0>)
 80002f0:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6818      	ldr	r0, [r3, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2200      	movs	r2, #0
 80002fc:	4907      	ldr	r1, [pc, #28]	@ (800031c <TaskAppCAN_ReceiveEvent+0xc0>)
 80002fe:	f003 fff9 	bl	80042f4 <xQueueGenericSend>

	return boError;
 8000302:	7bfb      	ldrb	r3, [r7, #15]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000013c 	.word	0x2000013c
 8000310:	08006b48 	.word	0x08006b48
 8000314:	08006b50 	.word	0x08006b50
 8000318:	08006b58 	.word	0x08006b58
 800031c:	2000007c 	.word	0x2000007c
 8000320:	20000090 	.word	0x20000090

08000324 <TaskAppCAN_TransmitEvent>:
//              TaskAppCAN_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_TransmitEvent(sMessageType *psMessage)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800032c:	2301      	movs	r3, #1
 800032e:	73fb      	strb	r3, [r7, #15]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
    strcpy((char*)pu8SerialTxBuffer,"SURDAO\r\n");
    stAppCANMsg.pcMessageData = (char*)pu8SerialTxBuffer;
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);*/

	return boError;
 8000330:	7bfb      	ldrb	r3, [r7, #15]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <TaskAppCAN_PSEvent>:
//             TaskAppCAN_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_PSEvent(sMessageType *psMessage)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000344:	2301      	movs	r3, #1
 8000346:	73fb      	strb	r3, [r7, #15]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 8000350:	2200      	movs	r2, #0
 8000352:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_PS;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 8000356:	2205      	movs	r2, #5
 8000358:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueIO, &stAppCANMsg, 0,0);
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <TaskAppCAN_PSEvent+0x44>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	2200      	movs	r2, #0
 800036a:	4904      	ldr	r1, [pc, #16]	@ (800037c <TaskAppCAN_PSEvent+0x40>)
 800036c:	f003 ffc2 	bl	80042f4 <xQueueGenericSend>

	return boError;
 8000370:	7bfb      	ldrb	r3, [r7, #15]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000007c 	.word	0x2000007c
 8000380:	20000094 	.word	0x20000094

08000384 <TaskAppCAN_SleepEvent>:
//             TaskAppCAN_SleepEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_SleepEvent(sMessageType *psMessage)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]

	HAL_SuspendTick();
 8000390:	f001 f848 	bl	8001424 <HAL_SuspendTick>
	/*Configure GPIO pin Output Level */

	HAL_CAN_Stop(hCAN);
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <TaskAppCAN_SleepEvent+0x5c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fab2 	bl	8001902 <HAL_CAN_Stop>
	HAL_CAN_MspDeInit(hCAN);
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <TaskAppCAN_SleepEvent+0x5c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fc00 	bl	8000ba8 <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(hCAN);
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <TaskAppCAN_SleepEvent+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fb95 	bl	8000adc <HAL_CAN_MspInit>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003b2:	2014      	movs	r0, #20
 80003b4:	f001 ffa3 	bl	80022fe <HAL_NVIC_EnableIRQ>
	HAL_CAN_Start(hCAN);
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <TaskAppCAN_SleepEvent+0x5c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fa5c 	bl	800187a <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <TaskAppCAN_SleepEvent+0x5c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2102      	movs	r1, #2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fc2b 	bl	8001c24 <HAL_CAN_ActivateNotification>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80003ce:	2101      	movs	r1, #1
 80003d0:	2000      	movs	r0, #0
 80003d2:	f002 fa05 	bl	80027e0 <HAL_PWR_EnterSLEEPMode>

	return boError;
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000098 	.word	0x20000098

080003e4 <TaskAppCAN_WakeUp>:
//             TaskAppCAN_WakeUp
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_WakeUp(sMessageType *psMessage)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]

//	HAL_CAN_Start(hCAN);


    stAppCANMsg.ucSrc = SRC_APPCAN;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_WAKEUP;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 80003fe:	2206      	movs	r2, #6
 8000400:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueIO, &stAppCANMsg, 0,0);
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <TaskAppCAN_WakeUp+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	2200      	movs	r2, #0
 8000412:	490c      	ldr	r1, [pc, #48]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 8000414:	f003 ff6e 	bl	80042f4 <xQueueGenericSend>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000418:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 8000420:	2201      	movs	r2, #1
 8000422:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 8000426:	2201      	movs	r2, #1
 8000428:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 800042a:	4b08      	ldr	r3, [pc, #32]	@ (800044c <TaskAppCAN_WakeUp+0x68>)
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2200      	movs	r2, #0
 8000432:	4904      	ldr	r1, [pc, #16]	@ (8000444 <TaskAppCAN_WakeUp+0x60>)
 8000434:	f003 ff5e 	bl	80042f4 <xQueueGenericSend>

	return boError;
 8000438:	7bfb      	ldrb	r3, [r7, #15]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000007c 	.word	0x2000007c
 8000448:	20000094 	.word	0x20000094
 800044c:	20000088 	.word	0x20000088

08000450 <TaskAppCAN_IgnoreEvent>:
//              TaskAppCAN_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_IgnoreEvent(sMessageType *psMessage)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]

    return(boError);
 800045c:	7bfb      	ldrb	r3, [r7, #15]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <vTaskAppCAN>:
};

/*static uint8_t u8TogglePin = 0;*/

void vTaskAppCAN(void const * argument)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	if( HAL_CAN_GetRxFifoFillLevel(hCAN, CAN_RX_FIFO0) > 0)
 8000470:	4b54      	ldr	r3, [pc, #336]	@ (80005c4 <vTaskAppCAN+0x15c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fbad 	bl	8001bd6 <HAL_CAN_GetRxFifoFillLevel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d066      	beq.n	8000550 <vTaskAppCAN+0xe8>
	{
		u16TimeToSleep = 0;
 8000482:	4b51      	ldr	r3, [pc, #324]	@ (80005c8 <vTaskAppCAN+0x160>)
 8000484:	2200      	movs	r2, #0
 8000486:	801a      	strh	r2, [r3, #0]

		memset(&pRxHeader,0x00,sizeof(CAN_RxHeaderTypeDef));
 8000488:	221c      	movs	r2, #28
 800048a:	2100      	movs	r1, #0
 800048c:	484f      	ldr	r0, [pc, #316]	@ (80005cc <vTaskAppCAN+0x164>)
 800048e:	f005 fe69 	bl	8006164 <memset>
		memset(stFrameRxCAN[u8FifoRxCAN].u8Data,0xFF,sizeof(tstFrameCAN));
 8000492:	4b4f      	ldr	r3, [pc, #316]	@ (80005d0 <vTaskAppCAN+0x168>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	3308      	adds	r3, #8
 800049a:	4a4e      	ldr	r2, [pc, #312]	@ (80005d4 <vTaskAppCAN+0x16c>)
 800049c:	4413      	add	r3, r2
 800049e:	2210      	movs	r2, #16
 80004a0:	21ff      	movs	r1, #255	@ 0xff
 80004a2:	4618      	mov	r0, r3
 80004a4:	f005 fe5e 	bl	8006164 <memset>

		if(HAL_CAN_GetRxMessage(hCAN, CAN_RX_FIFO0,&pRxHeader,stFrameRxCAN[u8FifoRxCAN].u8Data) == HAL_OK)
 80004a8:	4b46      	ldr	r3, [pc, #280]	@ (80005c4 <vTaskAppCAN+0x15c>)
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	4b48      	ldr	r3, [pc, #288]	@ (80005d0 <vTaskAppCAN+0x168>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	3308      	adds	r3, #8
 80004b4:	4a47      	ldr	r2, [pc, #284]	@ (80005d4 <vTaskAppCAN+0x16c>)
 80004b6:	4413      	add	r3, r2
 80004b8:	4a44      	ldr	r2, [pc, #272]	@ (80005cc <vTaskAppCAN+0x164>)
 80004ba:	2100      	movs	r1, #0
 80004bc:	f001 fa6a 	bl	8001994 <HAL_CAN_GetRxMessage>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d165      	bne.n	8000592 <vTaskAppCAN+0x12a>
		{
			stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.StdId;
 80004c6:	4b42      	ldr	r3, [pc, #264]	@ (80005d0 <vTaskAppCAN+0x168>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	4b3f      	ldr	r3, [pc, #252]	@ (80005cc <vTaskAppCAN+0x164>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4940      	ldr	r1, [pc, #256]	@ (80005d4 <vTaskAppCAN+0x16c>)
 80004d2:	0103      	lsls	r3, r0, #4
 80004d4:	440b      	add	r3, r1
 80004d6:	601a      	str	r2, [r3, #0]
			if(pRxHeader.ExtId != 0)
 80004d8:	4b3c      	ldr	r3, [pc, #240]	@ (80005cc <vTaskAppCAN+0x164>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <vTaskAppCAN+0x8a>
			{
				stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.ExtId;
 80004e0:	4b3b      	ldr	r3, [pc, #236]	@ (80005d0 <vTaskAppCAN+0x168>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	4b39      	ldr	r3, [pc, #228]	@ (80005cc <vTaskAppCAN+0x164>)
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	493a      	ldr	r1, [pc, #232]	@ (80005d4 <vTaskAppCAN+0x16c>)
 80004ec:	0103      	lsls	r3, r0, #4
 80004ee:	440b      	add	r3, r1
 80004f0:	601a      	str	r2, [r3, #0]
			}
			stFrameRxCAN[u8FifoRxCAN].u32DLC = pRxHeader.DLC;
 80004f2:	4b37      	ldr	r3, [pc, #220]	@ (80005d0 <vTaskAppCAN+0x168>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	4b34      	ldr	r3, [pc, #208]	@ (80005cc <vTaskAppCAN+0x164>)
 80004fa:	691a      	ldr	r2, [r3, #16]
 80004fc:	4935      	ldr	r1, [pc, #212]	@ (80005d4 <vTaskAppCAN+0x16c>)
 80004fe:	0103      	lsls	r3, r0, #4
 8000500:	440b      	add	r3, r1
 8000502:	3304      	adds	r3, #4
 8000504:	601a      	str	r2, [r3, #0]

			stAppCANMsg.ucSrc = SRC_APPCAN;
 8000506:	4b34      	ldr	r3, [pc, #208]	@ (80005d8 <vTaskAppCAN+0x170>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 800050c:	4b32      	ldr	r3, [pc, #200]	@ (80005d8 <vTaskAppCAN+0x170>)
 800050e:	2201      	movs	r2, #1
 8000510:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_RX;
 8000512:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <vTaskAppCAN+0x170>)
 8000514:	2202      	movs	r2, #2
 8000516:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = (char*)&stFrameRxCAN[u8FifoRxCAN];
 8000518:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <vTaskAppCAN+0x168>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	4a2d      	ldr	r2, [pc, #180]	@ (80005d4 <vTaskAppCAN+0x16c>)
 8000520:	4413      	add	r3, r2
 8000522:	4a2d      	ldr	r2, [pc, #180]	@ (80005d8 <vTaskAppCAN+0x170>)
 8000524:	6053      	str	r3, [r2, #4]
			if(++u8FifoRxCAN >= FIFO_SIZE)
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <vTaskAppCAN+0x168>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <vTaskAppCAN+0x168>)
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <vTaskAppCAN+0x168>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b07      	cmp	r3, #7
 8000538:	d902      	bls.n	8000540 <vTaskAppCAN+0xd8>
			{
				u8FifoRxCAN = 0;
 800053a:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <vTaskAppCAN+0x168>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
			}
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000540:	4b26      	ldr	r3, [pc, #152]	@ (80005dc <vTaskAppCAN+0x174>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2200      	movs	r2, #0
 8000548:	4923      	ldr	r1, [pc, #140]	@ (80005d8 <vTaskAppCAN+0x170>)
 800054a:	f003 fed3 	bl	80042f4 <xQueueGenericSend>
 800054e:	e020      	b.n	8000592 <vTaskAppCAN+0x12a>
		}
	}
	else
	{
		if(++u16TimeToSleep >= 1000)
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <vTaskAppCAN+0x160>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <vTaskAppCAN+0x160>)
 800055a:	801a      	strh	r2, [r3, #0]
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <vTaskAppCAN+0x160>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000564:	d315      	bcc.n	8000592 <vTaskAppCAN+0x12a>
		{
			u16TimeToSleep = 0;
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <vTaskAppCAN+0x160>)
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
			stAppCANMsg.ucSrc = SRC_APPCAN;
 800056c:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <vTaskAppCAN+0x170>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <vTaskAppCAN+0x170>)
 8000574:	2201      	movs	r2, #1
 8000576:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_PS;
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <vTaskAppCAN+0x170>)
 800057a:	2204      	movs	r2, #4
 800057c:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = NULL;
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <vTaskAppCAN+0x170>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <vTaskAppCAN+0x174>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2200      	movs	r2, #0
 800058c:	4912      	ldr	r1, [pc, #72]	@ (80005d8 <vTaskAppCAN+0x170>)
 800058e:	f003 feb1 	bl	80042f4 <xQueueGenericSend>
		}
	}

	if( xQueueReceive(xQueueAppCAN, &stAppCANMsg, 0 ) )
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <vTaskAppCAN+0x174>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	490f      	ldr	r1, [pc, #60]	@ (80005d8 <vTaskAppCAN+0x170>)
 800059a:	4618      	mov	r0, r3
 800059c:	f004 f84a 	bl	8004634 <xQueueReceive>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d00a      	beq.n	80005bc <vTaskAppCAN+0x154>
	{
		(void)eEventHandler ((unsigned char)SRC_APPCAN,gpasTaskAppCAN_StateMachine[ucCurrentStateAppCAN], &ucCurrentStateAppCAN, &stAppCANMsg);
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <vTaskAppCAN+0x178>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <vTaskAppCAN+0x17c>)
 80005ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <vTaskAppCAN+0x170>)
 80005b4:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <vTaskAppCAN+0x178>)
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fd59 	bl	800106e <eEventHandler>
	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000098 	.word	0x20000098
 80005c8:	2000017c 	.word	0x2000017c
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	200000b8 	.word	0x200000b8
 80005d4:	200000bc 	.word	0x200000bc
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	20000088 	.word	0x20000088
 80005e0:	20000084 	.word	0x20000084
 80005e4:	08006ca4 	.word	0x08006ca4

080005e8 <TaskAppSerial_getQueue>:
//              TaskAppSerial_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppSerial_getQueue()
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	return &xQueueAppSerial;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <TaskAppSerial_getQueue+0x10>)
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000180 	.word	0x20000180

080005fc <TaskAppSerial_Entry>:
//
//
//////////////////////////////////////////////

void TaskAppSerial_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    xQueueAppSerial = xQueue;
 8000606:	4a0f      	ldr	r2, [pc, #60]	@ (8000644 <TaskAppSerial_Entry+0x48>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
    xTimerAppSerial = xTimer;
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <TaskAppSerial_Entry+0x4c>)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	6013      	str	r3, [r2, #0]

    hUSART = hGet_USART_Handler();
 8000612:	f000 fe75 	bl	8001300 <hGet_USART_Handler>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <TaskAppSerial_Entry+0x50>)
 800061a:	6013      	str	r3, [r2, #0]

    stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <TaskAppSerial_Entry+0x54>)
 800061e:	2202      	movs	r2, #2
 8000620:	701a      	strb	r2, [r3, #0]
    stAppSerialMsg.ucDest = SRC_APPSERIAL;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <TaskAppSerial_Entry+0x54>)
 8000624:	2202      	movs	r2, #2
 8000626:	705a      	strb	r2, [r3, #1]
    stAppSerialMsg.ucEvent = EVENT_APPSERIAL_INIT;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <TaskAppSerial_Entry+0x54>)
 800062a:	2201      	movs	r2, #1
 800062c:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <TaskAppSerial_Entry+0x48>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	4906      	ldr	r1, [pc, #24]	@ (8000650 <TaskAppSerial_Entry+0x54>)
 8000638:	f003 fe5c 	bl	80042f4 <xQueueGenericSend>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000180 	.word	0x20000180
 8000648:	20000184 	.word	0x20000184
 800064c:	20000190 	.word	0x20000190
 8000650:	20000188 	.word	0x20000188

08000654 <TaskAppSerial_Start>:
//              TaskAppSerial_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_Start(sMessageType *psMessage)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]

	return boError;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <TaskAppSerial_ReceiveEvent>:
//              TaskAppSerial_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_ReceiveEvent(sMessageType *psMessage)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]

	return boError;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <TaskAppSerial_TransmitEvent>:
//              TaskAppSerial_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_TransmitEvent(sMessageType *psMessage)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]

	memset((char*)&stFrameTxUSART[u8FifoTxUSART],0x00,sizeof(tstFrameUSART));
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	01db      	lsls	r3, r3, #7
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <TaskAppSerial_TransmitEvent+0x94>)
 8000698:	4413      	add	r3, r2
 800069a:	2280      	movs	r2, #128	@ 0x80
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fd60 	bl	8006164 <memset>
	memcpy((char*)&stFrameTxUSART[u8FifoTxUSART],psMessage->pcMessageData,strlen(psMessage->pcMessageData));
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	01db      	lsls	r3, r3, #7
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <TaskAppSerial_TransmitEvent+0x94>)
 80006ac:	189c      	adds	r4, r3, r2
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685d      	ldr	r5, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd4a 	bl	8000150 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4629      	mov	r1, r5
 80006c2:	4620      	mov	r0, r4
 80006c4:	f005 fdd8 	bl	8006278 <memcpy>
	(void)HAL_UART_Transmit(hUSART,(uint8_t*)&stFrameTxUSART[u8FifoTxUSART], strlen(psMessage->pcMessageData),5);
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <TaskAppSerial_TransmitEvent+0x98>)
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	01db      	lsls	r3, r3, #7
 80006d2:	4a11      	ldr	r2, [pc, #68]	@ (8000718 <TaskAppSerial_TransmitEvent+0x94>)
 80006d4:	189d      	adds	r5, r3, r2
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fd38 	bl	8000150 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	2305      	movs	r3, #5
 80006e6:	4629      	mov	r1, r5
 80006e8:	4620      	mov	r0, r4
 80006ea:	f002 fcf5 	bl	80030d8 <HAL_UART_Transmit>
	if(++u8FifoTxUSART >= 2)
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d902      	bls.n	8000708 <TaskAppSerial_TransmitEvent+0x84>
	{
		u8FifoTxUSART = 0;
 8000702:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <TaskAppSerial_TransmitEvent+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	}

	return boError;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bdb0      	pop	{r4, r5, r7, pc}
 8000712:	bf00      	nop
 8000714:	20000294 	.word	0x20000294
 8000718:	20000194 	.word	0x20000194
 800071c:	20000190 	.word	0x20000190

08000720 <TaskAppSerial_IgnoreEvent>:
//              TaskAppSerial_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_IgnoreEvent(sMessageType *psMessage)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

    return(boError);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <vTaskAppSerial>:
	gasTaskAppSerial_Initializing,
	gasTaskAppSerial_Running
};

void vTaskAppSerial(void const * argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if( xQueueReceive(xQueueAppSerial, &stAppSerialMsg, 0 ) )
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <vTaskAppSerial+0x3c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2200      	movs	r2, #0
 8000746:	490c      	ldr	r1, [pc, #48]	@ (8000778 <vTaskAppSerial+0x40>)
 8000748:	4618      	mov	r0, r3
 800074a:	f003 ff73 	bl	8004634 <xQueueReceive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00a      	beq.n	800076a <vTaskAppSerial+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_APPSERIAL,gpasTaskAppSerial_StateMachine[ucCurrentStateAppSerial], &ucCurrentStateAppSerial, &stAppSerialMsg);
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <vTaskAppSerial+0x44>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <vTaskAppSerial+0x48>)
 800075c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <vTaskAppSerial+0x40>)
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <vTaskAppSerial+0x44>)
 8000764:	2002      	movs	r0, #2
 8000766:	f000 fc82 	bl	800106e <eEventHandler>
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_TX;
		stAppSerialMsg.pcMessageData = NULL;
		xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
		u16TimeSlice = 0;
	}*/
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000180 	.word	0x20000180
 8000778:	20000188 	.word	0x20000188
 800077c:	2000017e 	.word	0x2000017e
 8000780:	08006cec 	.word	0x08006cec

08000784 <TaskIO_Entry>:
//              TaskIO_Entry
//
//
//////////////////////////////////////////////
void TaskIO_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
    xQueueIO = xQueue;
 800078e:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <TaskIO_Entry+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6013      	str	r3, [r2, #0]
    xTimerIO = xTimer;
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <TaskIO_Entry+0x44>)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	6013      	str	r3, [r2, #0]

    stIOMsg.ucSrc = SRC_IO;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <TaskIO_Entry+0x48>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <TaskIO_Entry+0x48>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_INIT;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <TaskIO_Entry+0x48>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <TaskIO_Entry+0x40>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	2300      	movs	r3, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	4905      	ldr	r1, [pc, #20]	@ (80007cc <TaskIO_Entry+0x48>)
 80007b6:	f003 fd9d 	bl	80042f4 <xQueueGenericSend>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002a4 	.word	0x200002a4
 80007c8:	200002a8 	.word	0x200002a8
 80007cc:	20000298 	.word	0x20000298

080007d0 <TaskIO_Start>:
//              TaskIO_Start
//
//
//////////////////////////////////////////////
unsigned char TaskIO_Start(sMessageType *psMessage)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]

    pstQueueAppCAN  = TaskAppCAN_getQueue();
 80007dc:	f7ff fce4 	bl	80001a8 <TaskAppCAN_getQueue>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <TaskIO_Start+0x80>)
 80007e6:	601a      	str	r2, [r3, #0]

    stIOMsg.ucSrc = SRC_IO;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <TaskIO_Start+0x84>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <TaskIO_Start+0x84>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_NULL;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <TaskIO_Start+0x84>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <TaskIO_Start+0x88>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2200      	movs	r2, #0
 8000802:	4914      	ldr	r1, [pc, #80]	@ (8000854 <TaskIO_Start+0x84>)
 8000804:	f003 fd76 	bl	80042f4 <xQueueGenericSend>

    ulCountPulse = 0;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <TaskIO_Start+0x8c>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOn = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <TaskIO_Start+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOff = 0;
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <TaskIO_Start+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
    ulCountPeriod = 0;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <TaskIO_Start+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]

	ulQtyPulse = 5;	/* 5 pulses*/
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <TaskIO_Start+0x9c>)
 8000822:	2205      	movs	r2, #5
 8000824:	601a      	str	r2, [r3, #0]
	ulTimePulseOn = 2; 	/* 2*50 = 100ms*/
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <TaskIO_Start+0xa0>)
 8000828:	2202      	movs	r2, #2
 800082a:	601a      	str	r2, [r3, #0]
	ulTimePulseOff = 2; 	/* 2*50 = 100ms*/
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <TaskIO_Start+0xa4>)
 800082e:	2202      	movs	r2, #2
 8000830:	601a      	str	r2, [r3, #0]
	ulPeriod = 40; 		/* 20*50 = 1s*/
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <TaskIO_Start+0xa8>)
 8000834:	2228      	movs	r2, #40	@ 0x28
 8000836:	601a      	str	r2, [r3, #0]

    (void)osTimerStart(xTimerIO,50);
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <TaskIO_Start+0xac>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2132      	movs	r1, #50	@ 0x32
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fee2 	bl	8003608 <osTimerStart>
	return boError;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200002cc 	.word	0x200002cc
 8000854:	20000298 	.word	0x20000298
 8000858:	200002a4 	.word	0x200002a4
 800085c:	200002ac 	.word	0x200002ac
 8000860:	200002b0 	.word	0x200002b0
 8000864:	200002b4 	.word	0x200002b4
 8000868:	200002b8 	.word	0x200002b8
 800086c:	200002bc 	.word	0x200002bc
 8000870:	200002c0 	.word	0x200002c0
 8000874:	200002c4 	.word	0x200002c4
 8000878:	200002c8 	.word	0x200002c8
 800087c:	200002a8 	.word	0x200002a8

08000880 <TaskIO_getQueue>:
//              TaskIO_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskIO_getQueue()
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	return &xQueueIO;
 8000884:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <TaskIO_getQueue+0x10>)
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200002a4 	.word	0x200002a4

08000894 <TaskIO_PSEvent>:
//              TaskIO_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_PSEvent(sMessageType *psMessage)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStop(xTimerIO);
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <TaskIO_PSEvent+0x54>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fef3 	bl	8003690 <osTimerStop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b0:	480e      	ldr	r0, [pc, #56]	@ (80008ec <TaskIO_PSEvent+0x58>)
 80008b2:	f001 ff7d 	bl	80027b0 <HAL_GPIO_WritePin>

	stIOMsg.ucSrc = SRC_IO;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <TaskIO_PSEvent+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
	stIOMsg.ucDest = SRC_APPCAN;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <TaskIO_PSEvent+0x5c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	705a      	strb	r2, [r3, #1]
	stIOMsg.ucEvent = EVENT_APPCAN_SLEEP;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <TaskIO_PSEvent+0x5c>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	709a      	strb	r2, [r3, #2]
	stIOMsg.pcMessageData = NULL;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <TaskIO_PSEvent+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppCAN, &stIOMsg, 0,0);
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <TaskIO_PSEvent+0x60>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	2300      	movs	r3, #0
 80008d6:	2200      	movs	r2, #0
 80008d8:	4905      	ldr	r1, [pc, #20]	@ (80008f0 <TaskIO_PSEvent+0x5c>)
 80008da:	f003 fd0b 	bl	80042f4 <xQueueGenericSend>

    return(boError);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200002a8 	.word	0x200002a8
 80008ec:	40011000 	.word	0x40011000
 80008f0:	20000298 	.word	0x20000298
 80008f4:	200002cc 	.word	0x200002cc

080008f8 <TaskIO_WakeupEvent>:
//              TaskIO_WakeupEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_WakeupEvent(sMessageType *psMessage)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStart(xTimerIO,50);
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <TaskIO_WakeupEvent+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2132      	movs	r1, #50	@ 0x32
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fe7c 	bl	8003608 <osTimerStart>

    return(boError);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002a8 	.word	0x200002a8

08000920 <TaskIO_IgnoreEvent>:
//              TaskIO_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_IgnoreEvent(sMessageType *psMessage)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

    return(boError);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <vLocalTimerCallbackIo>:
//              vTimerCallbackIo
//
//
//////////////////////////////////////////////
void vLocalTimerCallbackIo(void const * argument)
 {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	ulCountPeriod++;
 8000940:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <vLocalTimerCallbackIo+0xc4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a2d      	ldr	r2, [pc, #180]	@ (80009fc <vLocalTimerCallbackIo+0xc4>)
 8000948:	6013      	str	r3, [r2, #0]
    if(ulCountPeriod <= ulPeriod)
 800094a:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <vLocalTimerCallbackIo+0xc4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <vLocalTimerCallbackIo+0xc8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d83c      	bhi.n	80009d0 <vLocalTimerCallbackIo+0x98>
    {
    	if(ulCountPulse <= ((ulQtyPulse) * (ulTimePulseOn+ulTimePulseOff)))
 8000956:	4b2b      	ldr	r3, [pc, #172]	@ (8000a04 <vLocalTimerCallbackIo+0xcc>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <vLocalTimerCallbackIo+0xd0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a2a      	ldr	r2, [pc, #168]	@ (8000a0c <vLocalTimerCallbackIo+0xd4>)
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	fb03 f202 	mul.w	r2, r3, r2
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <vLocalTimerCallbackIo+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d341      	bcc.n	80009f4 <vLocalTimerCallbackIo+0xbc>
    	{
			if(ulCountTimePulseOn < ulTimePulseOn)
 8000970:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <vLocalTimerCallbackIo+0xdc>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <vLocalTimerCallbackIo+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d20b      	bcs.n	8000994 <vLocalTimerCallbackIo+0x5c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000982:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <vLocalTimerCallbackIo+0xe0>)
 8000984:	f001 ff14 	bl	80027b0 <HAL_GPIO_WritePin>
				ulCountTimePulseOn++;
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <vLocalTimerCallbackIo+0xdc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a21      	ldr	r2, [pc, #132]	@ (8000a14 <vLocalTimerCallbackIo+0xdc>)
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e017      	b.n	80009c4 <vLocalTimerCallbackIo+0x8c>
			}
			else
			{
				if(ulCountTimePulseOff < ulTimePulseOff )
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <vLocalTimerCallbackIo+0xe4>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <vLocalTimerCallbackIo+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d20b      	bcs.n	80009b8 <vLocalTimerCallbackIo+0x80>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <vLocalTimerCallbackIo+0xe0>)
 80009a8:	f001 ff02 	bl	80027b0 <HAL_GPIO_WritePin>
					ulCountTimePulseOff++;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <vLocalTimerCallbackIo+0xe4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <vLocalTimerCallbackIo+0xe4>)
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e005      	b.n	80009c4 <vLocalTimerCallbackIo+0x8c>
				}
				else
				{
					ulCountTimePulseOn = 0;
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <vLocalTimerCallbackIo+0xdc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
					ulCountTimePulseOff= 0;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <vLocalTimerCallbackIo+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
				}
			}
			ulCountPulse++;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <vLocalTimerCallbackIo+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a11      	ldr	r2, [pc, #68]	@ (8000a10 <vLocalTimerCallbackIo+0xd8>)
 80009cc:	6013      	str	r3, [r2, #0]
      lastStateChangeTime = currentTime;
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledState);
#endif
 }
 80009ce:	e011      	b.n	80009f4 <vLocalTimerCallbackIo+0xbc>
        ulCountPulse = 0;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <vLocalTimerCallbackIo+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOn = 0;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <vLocalTimerCallbackIo+0xdc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOff = 0;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <vLocalTimerCallbackIo+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
        ulCountPeriod = 0;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <vLocalTimerCallbackIo+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <vLocalTimerCallbackIo+0xe0>)
 80009f0:	f001 fede 	bl	80027b0 <HAL_GPIO_WritePin>
 }
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200002b8 	.word	0x200002b8
 8000a00:	200002c8 	.word	0x200002c8
 8000a04:	200002c0 	.word	0x200002c0
 8000a08:	200002c4 	.word	0x200002c4
 8000a0c:	200002bc 	.word	0x200002bc
 8000a10:	200002ac 	.word	0x200002ac
 8000a14:	200002b0 	.word	0x200002b0
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	200002b4 	.word	0x200002b4

08000a20 <vTaskIO>:
	gasTaskIO_Running,
	gasTaskIO_Sleeping
};

void vTaskIO(void const * argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( xQueueIO, &stIOMsg, 0 ) )
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <vTaskIO+0x3c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <vTaskIO+0x40>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fdff 	bl	8004634 <xQueueReceive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00a      	beq.n	8000a52 <vTaskIO+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_IO,gpasTaskIO_StateMachine[ucCurrentStateIO], &ucCurrentStateIO, &stIOMsg);
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <vTaskIO+0x44>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <vTaskIO+0x48>)
 8000a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <vTaskIO+0x40>)
 8000a4a:	4a06      	ldr	r2, [pc, #24]	@ (8000a64 <vTaskIO+0x44>)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fb0e 	bl	800106e <eEventHandler>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200002a4 	.word	0x200002a4
 8000a60:	20000298 	.word	0x20000298
 8000a64:	200002a0 	.word	0x200002a0
 8000a68:	08006d3c 	.word	0x08006d3c

08000a6c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a72:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <MX_CAN_Init+0x6c>)
 8000a74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a84:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000a88:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a8c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a90:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a94:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000a98:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_CAN_Init+0x68>)
 8000ac0:	f000 fccc 	bl	800145c <HAL_CAN_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000aca:	f000 faae 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200002d0 	.word	0x200002d0
 8000ad8:	40006400 	.word	0x40006400

08000adc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a28      	ldr	r2, [pc, #160]	@ (8000b98 <HAL_CAN_MspInit+0xbc>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d148      	bne.n	8000b8e <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b06:	61d3      	str	r3, [r2, #28]
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <HAL_CAN_MspInit+0xc0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4817      	ldr	r0, [pc, #92]	@ (8000ba0 <HAL_CAN_MspInit+0xc4>)
 8000b42:	f001 fc05 	bl	8002350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <HAL_CAN_MspInit+0xc4>)
 8000b5c:	f001 fbf8 	bl	8002350 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <HAL_CAN_MspInit+0xc8>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2105      	movs	r1, #5
 8000b88:	2014      	movs	r0, #20
 8000b8a:	f001 fb9c 	bl	80022c6 <HAL_NVIC_SetPriority>
    /*HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);  */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40006400 	.word	0x40006400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_CAN_MspDeInit+0x30>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10a      	bne.n	8000bd0 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_CAN_MspDeInit+0x34>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_CAN_MspDeInit+0x34>)
 8000bc0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000bc4:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000bc6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_CAN_MspDeInit+0x38>)
 8000bcc:	f001 fd3c 	bl	8002648 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40006400 	.word	0x40006400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <hGet_CAN_Handler>:

/* USER CODE BEGIN 1 */
CAN_HandleTypeDef *hGet_CAN_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	return &hcan;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <hGet_CAN_Handler+0x10>)
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200002d0 	.word	0x200002d0

08000bf8 <stHAL_CAN_FilterConfig>:

HAL_StatusTypeDef stHAL_CAN_FilterConfig(void)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig0 =
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <stHAL_CAN_FilterConfig+0x30>)
 8000c00:	463c      	mov	r4, r7
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c10:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterMode =  /*CAN_FILTERMODE_IDLIST*/CAN_FILTERMODE_IDMASK,
			.FilterScale = CAN_FILTERSCALE_32BIT,
			.SlaveStartFilterBank  = 14
	};

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0);
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <stHAL_CAN_FilterConfig+0x34>)
 8000c1a:	f000 fd65 	bl	80016e8 <HAL_CAN_ConfigFilter>

	return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bdb0      	pop	{r4, r5, r7, pc}
 8000c28:	08006b5c 	.word	0x08006b5c
 8000c2c:	200002d0 	.word	0x200002d0

08000c30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <vApplicationGetIdleTaskMemory+0x28>)
 8000c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000350 	.word	0x20000350
 8000c5c:	200003f0 	.word	0x200003f0

08000c60 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <vApplicationGetTimerTaskMemory+0x2c>)
 8000c70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <vApplicationGetTimerTaskMemory+0x30>)
 8000c76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c7e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200005f0 	.word	0x200005f0
 8000c90:	20000690 	.word	0x20000690

08000c94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b0a4      	sub	sp, #144	@ 0x90
 8000c98:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerIO */
  osTimerDef(TimerIO, vTimerCallbackIo);
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d8c <MX_FREERTOS_Init+0xf8>)
 8000c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  TimerIOHandle = osTimerCreate(osTimer(TimerIO), osTimerPeriodic, NULL);
 8000ca6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000caa:	2200      	movs	r2, #0
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fc76 	bl	80035a0 <osTimerCreate>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <MX_FREERTOS_Init+0xfc>)
 8000cb8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueIO */
  osMessageQDef(QueueIO, 8, sMessageType);
 8000cba:	4b36      	ldr	r3, [pc, #216]	@ (8000d94 <MX_FREERTOS_Init+0x100>)
 8000cbc:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueIOHandle = osMessageCreate(osMessageQ(QueueIO), NULL);
 8000cc6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 fd1b 	bl	8003708 <osMessageCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a30      	ldr	r2, [pc, #192]	@ (8000d98 <MX_FREERTOS_Init+0x104>)
 8000cd6:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppCAN */
  osMessageQDef(QueueAppCAN, 16, sMessageType);
 8000cd8:	4b30      	ldr	r3, [pc, #192]	@ (8000d9c <MX_FREERTOS_Init+0x108>)
 8000cda:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppCANHandle = osMessageCreate(osMessageQ(QueueAppCAN), NULL);
 8000ce4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fd0c 	bl	8003708 <osMessageCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8000da0 <MX_FREERTOS_Init+0x10c>)
 8000cf4:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppSerial */
  osMessageQDef(QueueAppSerial, 16, sMessageType);
 8000cf6:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <MX_FREERTOS_Init+0x108>)
 8000cf8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000cfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppSerialHandle = osMessageCreate(osMessageQ(QueueAppSerial), NULL);
 8000d02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fcfd 	bl	8003708 <osMessageCreate>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a24      	ldr	r2, [pc, #144]	@ (8000da4 <MX_FREERTOS_Init+0x110>)
 8000d12:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskIO */
  osThreadDef(TaskIO, TaskIO_Init, osPriorityIdle, 0, 128);
 8000d14:	4b24      	ldr	r3, [pc, #144]	@ (8000da8 <MX_FREERTOS_Init+0x114>)
 8000d16:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskIOHandle = osThreadCreate(osThread(TaskIO), NULL);
 8000d28:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fbd5 	bl	80034de <osThreadCreate>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a1d      	ldr	r2, [pc, #116]	@ (8000dac <MX_FREERTOS_Init+0x118>)
 8000d38:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppCAN */
  osThreadDef(TaskAppCAN, TaskAppCAN_Init, osPriorityIdle, 0, 128);
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_FREERTOS_Init+0x11c>)
 8000d3c:	f107 0420 	add.w	r4, r7, #32
 8000d40:	461d      	mov	r5, r3
 8000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppCANHandle = osThreadCreate(osThread(TaskAppCAN), NULL);
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fbc2 	bl	80034de <osThreadCreate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <MX_FREERTOS_Init+0x120>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppSerial */
  osThreadDef(TaskAppSerial, TaskAppSerial_Init, osPriorityIdle, 0, 128);
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <MX_FREERTOS_Init+0x124>)
 8000d62:	1d3c      	adds	r4, r7, #4
 8000d64:	461d      	mov	r5, r3
 8000d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppSerialHandle = osThreadCreate(osThread(TaskAppSerial), NULL);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fbb1 	bl	80034de <osThreadCreate>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <MX_FREERTOS_Init+0x128>)
 8000d80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d82:	bf00      	nop
 8000d84:	3790      	adds	r7, #144	@ 0x90
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08000e41 	.word	0x08000e41
 8000d90:	2000034c 	.word	0x2000034c
 8000d94:	08006b84 	.word	0x08006b84
 8000d98:	20000340 	.word	0x20000340
 8000d9c:	08006b94 	.word	0x08006b94
 8000da0:	20000344 	.word	0x20000344
 8000da4:	20000348 	.word	0x20000348
 8000da8:	08006bac 	.word	0x08006bac
 8000dac:	20000334 	.word	0x20000334
 8000db0:	08006bd4 	.word	0x08006bd4
 8000db4:	20000338 	.word	0x20000338
 8000db8:	08006c00 	.word	0x08006c00
 8000dbc:	2000033c 	.word	0x2000033c

08000dc0 <TaskIO_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskIO_Init */
void TaskIO_Init(void const * argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskIO_Init */
  /* Infinite loop */
  TaskIO_Entry(QueueIOHandle,TimerIOHandle);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <TaskIO_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <TaskIO_Init+0x2c>)
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fcd6 	bl	8000784 <TaskIO_Entry>
  for(;;)
  {
    osDelay(50);
 8000dd8:	2032      	movs	r0, #50	@ 0x32
 8000dda:	f002 fbcc 	bl	8003576 <osDelay>
    vTaskIO(argument);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fe1e 	bl	8000a20 <vTaskIO>
    osDelay(50);
 8000de4:	bf00      	nop
 8000de6:	e7f7      	b.n	8000dd8 <TaskIO_Init+0x18>
 8000de8:	20000340 	.word	0x20000340
 8000dec:	2000034c 	.word	0x2000034c

08000df0 <TaskAppCAN_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppCAN_Init */
void TaskAppCAN_Init(void const * argument)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppCAN_Init */
  /* Infinite loop */
  TaskAppCAN_Entry(QueueAppCANHandle,NULL);
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <TaskAppCAN_Init+0x24>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9dc 	bl	80001bc <TaskAppCAN_Entry>
  for(;;)
  {
    osDelay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fbb6 	bl	8003576 <osDelay>
    vTaskAppCAN(argument);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fb2c 	bl	8000468 <vTaskAppCAN>
    osDelay(1);
 8000e10:	bf00      	nop
 8000e12:	e7f7      	b.n	8000e04 <TaskAppCAN_Init+0x14>
 8000e14:	20000344 	.word	0x20000344

08000e18 <TaskAppSerial_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppSerial_Init */
void TaskAppSerial_Init(void const * argument)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppSerial_Init */
  /* Infinite loop */
  TaskAppSerial_Entry(QueueAppSerialHandle,NULL);
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <TaskAppSerial_Init+0x24>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fbe8 	bl	80005fc <TaskAppSerial_Entry>
  for(;;)
  {
    osDelay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f002 fba2 	bl	8003576 <osDelay>
    vTaskAppSerial(argument);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fc80 	bl	8000738 <vTaskAppSerial>
    osDelay(1);
 8000e38:	bf00      	nop
 8000e3a:	e7f7      	b.n	8000e2c <TaskAppSerial_Init+0x14>
 8000e3c:	20000348 	.word	0x20000348

08000e40 <vTimerCallbackIo>:
  /* USER CODE END TaskAppSerial_Init */
}

/* vTimerCallbackIo function */
void vTimerCallbackIo(void const * argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerCallbackIo */
	vLocalTimerCallbackIo(argument);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fd75 	bl	8000938 <vLocalTimerCallbackIo>
  /* USER CODE END vTimerCallbackIo */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a3e      	ldr	r2, [pc, #248]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a38      	ldr	r2, [pc, #224]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a32      	ldr	r2, [pc, #200]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed2:	4827      	ldr	r0, [pc, #156]	@ (8000f70 <MX_GPIO_Init+0x118>)
 8000ed4:	f001 fc6c 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ede:	4825      	ldr	r0, [pc, #148]	@ (8000f74 <MX_GPIO_Init+0x11c>)
 8000ee0:	f001 fc66 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <MX_GPIO_Init+0x118>)
 8000efe:	f001 fa27 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f02:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4817      	ldr	r0, [pc, #92]	@ (8000f70 <MX_GPIO_Init+0x118>)
 8000f14:	f001 fa1c 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f18:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000f1c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000f2a:	f001 fa11 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000f2e:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 8000f32:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	2303      	movs	r3, #3
 8000f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_GPIO_Init+0x11c>)
 8000f40:	f001 fa06 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_GPIO_Init+0x11c>)
 8000f5e:	f001 f9f7 	bl	8002350 <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40010800 	.word	0x40010800

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 f9ee 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f80c 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f7ff ff66 	bl	8000e58 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f8c:	f7ff fd6e 	bl	8000a6c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000f90:	f000 f940 	bl	8001214 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f94:	f7ff fe7e 	bl	8000c94 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f98:	f002 fa9a 	bl	80034d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <main+0x20>

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	@ 0x40
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2228      	movs	r2, #40	@ 0x28
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 f8d8 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fde:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fc15 	bl	8002818 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ff4:	f000 f819 	bl	800102a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe82 	bl	8002d1c <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800101e:	f000 f804 	bl	800102a <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3740      	adds	r7, #64	@ 0x40
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102e:	b672      	cpsid	i
}
 8001030:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001032:	bf00      	nop
 8001034:	e7fd      	b.n	8001032 <Error_Handler+0x8>

08001036 <psSearchEvent>:

#include "state.h"


const sStateMachineType *psSearchEvent (const sStateMachineType *psStateTable,unsigned char ucIncoming)
{
 8001036:	b480      	push	{r7}
 8001038:	b085      	sub	sp, #20
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
    unsigned char ucEvent;

    for (;; psStateTable++)
    {
        ucEvent = psStateTable->ucEvent;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	73fb      	strb	r3, [r7, #15]
        if ((ucEvent != 0)&&(ucEvent != ucIncoming))
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <psSearchEvent+0x20>
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	429a      	cmp	r2, r3
 8001054:	d101      	bne.n	800105a <psSearchEvent+0x24>
        {
           continue;
        }
        return psStateTable;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e004      	b.n	8001064 <psSearchEvent+0x2e>
           continue;
 800105a:	bf00      	nop
    for (;; psStateTable++)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	330c      	adds	r3, #12
 8001060:	607b      	str	r3, [r7, #4]
        ucEvent = psStateTable->ucEvent;
 8001062:	e7ee      	b.n	8001042 <psSearchEvent+0xc>
    }

}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <eEventHandler>:

void eEventHandler (unsigned char ucDest,const sStateMachineType *psStateTable, unsigned char *piState, sMessageType *psMessage)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
    unsigned char eError = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]

    if(ucDest == psMessage->ucDest)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	429a      	cmp	r2, r3
 800108a:	d118      	bne.n	80010be <eEventHandler+0x50>
    {
        psStateTable = psSearchEvent(psStateTable, psMessage->ucEvent);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	4619      	mov	r1, r3
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f7ff ffcf 	bl	8001036 <psSearchEvent>
 8001098:	60b8      	str	r0, [r7, #8]

        eError = (*psStateTable->ActionFun)(psMessage);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	4798      	blx	r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	75fb      	strb	r3, [r7, #23]

        if (eError == 1)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d104      	bne.n	80010b6 <eEventHandler+0x48>
        {
            *piState = psStateTable->ucStateSuccess;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	7a1a      	ldrb	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	701a      	strb	r2, [r3, #0]
        else
        {
            *piState = psStateTable->ucStateFailure;
        }
    }
}
 80010b4:	e003      	b.n	80010be <eEventHandler+0x50>
            *piState = psStateTable->ucStateFailure;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	7a5a      	ldrb	r2, [r3, #9]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_MspInit+0x68>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <HAL_MspInit+0x68>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_MspInit+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_MspInit+0x68>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <HAL_MspInit+0x68>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_MspInit+0x68>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	210f      	movs	r1, #15
 8001102:	f06f 0001 	mvn.w	r0, #1
 8001106:	f001 f8de 	bl	80022c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_MspInit+0x6c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_MspInit+0x6c>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f93c 	bl	80013ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001174:	f004 faf0 	bl	8005758 <xTaskGetSchedulerState>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800117e:	f002 fef3 	bl	8003f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
#if 1
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800118c:	4802      	ldr	r0, [pc, #8]	@ (8001198 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800118e:	f000 fd6e 	bl	8001c6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002d0 	.word	0x200002d0

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f005 f828 	bl	8006220 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20002800 	.word	0x20002800
 80011fc:	00000400 	.word	0x00000400
 8001200:	20000a90 	.word	0x20000a90
 8001204:	20001ab8 	.word	0x20001ab8

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001218:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_USART1_UART_Init+0x48>)
 800121a:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <MX_USART1_UART_Init+0x4c>)
 800121c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_USART1_UART_Init+0x48>)
 8001220:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <MX_USART1_UART_Init+0x50>)
 8001222:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <MX_USART1_UART_Init+0x48>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_USART1_UART_Init+0x48>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <MX_USART1_UART_Init+0x48>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_USART1_UART_Init+0x48>)
 8001238:	220c      	movs	r2, #12
 800123a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <MX_USART1_UART_Init+0x48>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_USART1_UART_Init+0x48>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <MX_USART1_UART_Init+0x48>)
 800124a:	f001 fef5 	bl	8003038 <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001254:	f7ff fee9 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000a94 	.word	0x20000a94
 8001260:	40013800 	.word	0x40013800
 8001264:	001e8480 	.word	0x001e8480

08001268 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <HAL_UART_MspInit+0x8c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d131      	bne.n	80012ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_UART_MspInit+0x90>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	@ (80012fc <HAL_UART_MspInit+0x94>)
 80012ce:	f001 f83f 	bl	8002350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <HAL_UART_MspInit+0x94>)
 80012e8:	f001 f832 	bl	8002350 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010800 	.word	0x40010800

08001300 <hGet_USART_Handler>:
  }
}

/* USER CODE BEGIN 1 */
UART_HandleTypeDef *hGet_USART_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	return &huart1;
 8001304:	4b02      	ldr	r3, [pc, #8]	@ (8001310 <hGet_USART_Handler+0x10>)
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000a94 	.word	0x20000a94

08001314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001314:	f7ff ff78 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480b      	ldr	r0, [pc, #44]	@ (8001348 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800131a:	490c      	ldr	r1, [pc, #48]	@ (800134c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <LoopFillZerobss+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001330:	4c09      	ldr	r4, [pc, #36]	@ (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f004 ff75 	bl	800622c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff fe1b 	bl	8000f7c <main>
  bx lr
 8001346:	4770      	bx	lr
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001350:	08006db8 	.word	0x08006db8
  ldr r2, =_sbss
 8001354:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001358:	20001ab8 	.word	0x20001ab8

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 ff9d 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fea4 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 ffc3 	bl	8002336 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013c8:	f000 ff7d 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	@ (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000008 	.word	0x20000008
 800140c:	20000adc 	.word	0x20000adc

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	@ (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000adc 	.word	0x20000adc

08001424 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <HAL_SuspendTick+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_SuspendTick+0x18>)
 800142e:	f023 0302 	bic.w	r3, r3, #2
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <HAL_ResumeTick+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_ResumeTick+0x18>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e11c      	b.n	80016a8 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d131      	bne.n	80014de <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a8c      	ldr	r2, [pc, #560]	@ (80016b0 <HAL_CAN_Init+0x254>)
 800147e:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a8c      	ldr	r2, [pc, #560]	@ (80016b4 <HAL_CAN_Init+0x258>)
 8001484:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a8b      	ldr	r2, [pc, #556]	@ (80016b8 <HAL_CAN_Init+0x25c>)
 800148a:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a8b      	ldr	r2, [pc, #556]	@ (80016bc <HAL_CAN_Init+0x260>)
 8001490:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a8a      	ldr	r2, [pc, #552]	@ (80016c0 <HAL_CAN_Init+0x264>)
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a8a      	ldr	r2, [pc, #552]	@ (80016c4 <HAL_CAN_Init+0x268>)
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a89      	ldr	r2, [pc, #548]	@ (80016c8 <HAL_CAN_Init+0x26c>)
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a89      	ldr	r2, [pc, #548]	@ (80016cc <HAL_CAN_Init+0x270>)
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a88      	ldr	r2, [pc, #544]	@ (80016d0 <HAL_CAN_Init+0x274>)
 80014ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a88      	ldr	r2, [pc, #544]	@ (80016d4 <HAL_CAN_Init+0x278>)
 80014b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a87      	ldr	r2, [pc, #540]	@ (80016d8 <HAL_CAN_Init+0x27c>)
 80014ba:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a87      	ldr	r2, [pc, #540]	@ (80016dc <HAL_CAN_Init+0x280>)
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a86      	ldr	r2, [pc, #536]	@ (80016e0 <HAL_CAN_Init+0x284>)
 80014c6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a84      	ldr	r2, [pc, #528]	@ (80016e4 <HAL_CAN_Init+0x288>)
 80014d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ee:	f7ff ff8f 	bl	8001410 <HAL_GetTick>
 80014f2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f4:	e012      	b.n	800151c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f6:	f7ff ff8b 	bl	8001410 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b0a      	cmp	r3, #10
 8001502:	d90b      	bls.n	800151c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2205      	movs	r2, #5
 8001514:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0c5      	b.n	80016a8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0e5      	beq.n	80014f6 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0202 	bic.w	r2, r2, #2
 8001538:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153a:	f7ff ff69 	bl	8001410 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001540:	e012      	b.n	8001568 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001542:	f7ff ff65 	bl	8001410 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d90b      	bls.n	8001568 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2205      	movs	r2, #5
 8001560:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e09f      	b.n	80016a8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1e5      	bne.n	8001542 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7e1b      	ldrb	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e007      	b.n	80015a0 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e9b      	ldrb	r3, [r3, #26]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0220 	bic.w	r2, r2, #32
 80015f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7edb      	ldrb	r3, [r3, #27]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0210 	bic.w	r2, r2, #16
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0210 	orr.w	r2, r2, #16
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7f1b      	ldrb	r3, [r3, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0208 	orr.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0208 	bic.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f5b      	ldrb	r3, [r3, #29]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0204 	orr.w	r2, r2, #4
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0204 	bic.w	r2, r2, #4
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	ea42 0103 	orr.w	r1, r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08000161 	.word	0x08000161
 80016b4:	08002065 	.word	0x08002065
 80016b8:	08002077 	.word	0x08002077
 80016bc:	08002089 	.word	0x08002089
 80016c0:	08001ff9 	.word	0x08001ff9
 80016c4:	0800200b 	.word	0x0800200b
 80016c8:	0800201d 	.word	0x0800201d
 80016cc:	0800202f 	.word	0x0800202f
 80016d0:	08002041 	.word	0x08002041
 80016d4:	08002053 	.word	0x08002053
 80016d8:	0800209b 	.word	0x0800209b
 80016dc:	080020ad 	.word	0x080020ad
 80016e0:	080020bf 	.word	0x080020bf
 80016e4:	08000add 	.word	0x08000add

080016e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d003      	beq.n	800170e <HAL_CAN_ConfigFilter+0x26>
 8001706:	7cfb      	ldrb	r3, [r7, #19]
 8001708:	2b02      	cmp	r3, #2
 800170a:	f040 80aa 	bne.w	8001862 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2201      	movs	r2, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d123      	bne.n	8001790 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800176a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3248      	adds	r2, #72	@ 0x48
 8001770:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001784:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001786:	6979      	ldr	r1, [r7, #20]
 8001788:	3348      	adds	r3, #72	@ 0x48
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d122      	bne.n	80017de <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3248      	adds	r2, #72	@ 0x48
 80017be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017d4:	6979      	ldr	r1, [r7, #20]
 80017d6:	3348      	adds	r3, #72	@ 0x48
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	401a      	ands	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017f8:	e007      	b.n	800180a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	431a      	orrs	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001824:	e007      	b.n	8001836 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001854:	f023 0201 	bic.w	r2, r3, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e006      	b.n	8001870 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d12e      	bne.n	80018ec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018a6:	f7ff fdb3 	bl	8001410 <HAL_GetTick>
 80018aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ac:	e012      	b.n	80018d4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ae:	f7ff fdaf 	bl	8001410 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b0a      	cmp	r3, #10
 80018ba:	d90b      	bls.n	80018d4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2205      	movs	r2, #5
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1e5      	bne.n	80018ae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e006      	b.n	80018fa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d133      	bne.n	800197e <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001926:	f7ff fd73 	bl	8001410 <HAL_GetTick>
 800192a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192c:	e012      	b.n	8001954 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800192e:	f7ff fd6f 	bl	8001410 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b0a      	cmp	r3, #10
 800193a:	d90b      	bls.n	8001954 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2205      	movs	r2, #5
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e01b      	b.n	800198c <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0e5      	beq.n	800192e <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0202 	bic.w	r2, r2, #2
 8001970:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e006      	b.n	800198c <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001982:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
  }
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d003      	beq.n	80019b8 <HAL_CAN_GetRxMessage+0x24>
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 8103 	bne.w	8001bbe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10e      	bne.n	80019dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d116      	bne.n	80019fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0f7      	b.n	8001bcc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0e8      	b.n	8001bcc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	331b      	adds	r3, #27
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0204 	and.w	r2, r3, #4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10c      	bne.n	8001a32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	331b      	adds	r3, #27
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0d5b      	lsrs	r3, r3, #21
 8001a28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00b      	b.n	8001a4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	331b      	adds	r3, #27
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	331b      	adds	r3, #27
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0202 	and.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	331b      	adds	r3, #27
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	e00b      	b.n	8001a98 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 020f 	and.w	r2, r3, #15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	331b      	adds	r3, #27
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	331b      	adds	r3, #27
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0a1a      	lsrs	r2, r3, #8
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0c1a      	lsrs	r2, r3, #16
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0e1a      	lsrs	r2, r3, #24
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3303      	adds	r3, #3
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0a1a      	lsrs	r2, r3, #8
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3305      	adds	r3, #5
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0c1a      	lsrs	r2, r3, #16
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3306      	adds	r3, #6
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e1a      	lsrs	r2, r3, #24
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	3307      	adds	r3, #7
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0220 	orr.w	r2, r2, #32
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	e007      	b.n	8001bba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e006      	b.n	8001bcc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d002      	beq.n	8001bf8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d10f      	bne.n	8001c18 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e005      	b.n	8001c18 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <HAL_CAN_ActivateNotification+0x1e>
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d109      	bne.n	8001c56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6959      	ldr	r1, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b08a      	sub	sp, #40	@ 0x28
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8083 	beq.w	8001dbc <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d025      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
 8001cda:	e017      	b.n	8001d0c <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cee:	e00d      	b.n	8001d0c <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d02:	e003      	b.n	8001d0c <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d026      	beq.n	8001d64 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
 8001d32:	e017      	b.n	8001d64 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d46:	e00d      	b.n	8001d64 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	e003      	b.n	8001d64 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d026      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
 8001d8a:	e017      	b.n	8001dbc <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9e:	e00d      	b.n	8001dbc <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db2:	e003      	b.n	8001dbc <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00c      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2210      	movs	r2, #16
 8001e46:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2208      	movs	r2, #8
 8001e62:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d07b      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d072      	beq.n	8001fce <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d043      	beq.n	8001fce <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03e      	beq.n	8001fce <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f56:	2b60      	cmp	r3, #96	@ 0x60
 8001f58:	d02b      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x344>
 8001f5a:	2b60      	cmp	r3, #96	@ 0x60
 8001f5c:	d82e      	bhi.n	8001fbc <HAL_CAN_IRQHandler+0x34e>
 8001f5e:	2b50      	cmp	r3, #80	@ 0x50
 8001f60:	d022      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x33a>
 8001f62:	2b50      	cmp	r3, #80	@ 0x50
 8001f64:	d82a      	bhi.n	8001fbc <HAL_CAN_IRQHandler+0x34e>
 8001f66:	2b40      	cmp	r3, #64	@ 0x40
 8001f68:	d019      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x330>
 8001f6a:	2b40      	cmp	r3, #64	@ 0x40
 8001f6c:	d826      	bhi.n	8001fbc <HAL_CAN_IRQHandler+0x34e>
 8001f6e:	2b30      	cmp	r3, #48	@ 0x30
 8001f70:	d010      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x326>
 8001f72:	2b30      	cmp	r3, #48	@ 0x30
 8001f74:	d822      	bhi.n	8001fbc <HAL_CAN_IRQHandler+0x34e>
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d002      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x312>
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d005      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f7e:	e01d      	b.n	8001fbc <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f88:	e019      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f92:	e014      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	f043 0320 	orr.w	r3, r3, #32
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f9c:	e00f      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fa6:	e00a      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb0:	e005      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fba:	e000      	b.n	8001fbe <HAL_CAN_IRQHandler+0x350>
            break;
 8001fbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001fcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4906      	ldr	r1, [pc, #24]	@ (8002168 <__NVIC_EnableIRQ+0x34>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db12      	blt.n	80021a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <__NVIC_DisableIRQ+0x44>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	3320      	adds	r3, #32
 8002194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002198:	f3bf 8f4f 	dsb	sy
}
 800219c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800219e:	f3bf 8f6f 	isb	sy
}
 80021a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002290:	f7ff ff90 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff09 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff1e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff11 	bl	8002134 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff1f 	bl	800216c <__NVIC_DisableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff94 	bl	800226c <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b08b      	sub	sp, #44	@ 0x2c
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002362:	e161      	b.n	8002628 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002364:	2201      	movs	r2, #1
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8150 	bne.w	8002622 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4a97      	ldr	r2, [pc, #604]	@ (80025e4 <HAL_GPIO_Init+0x294>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05e      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 800238c:	4a95      	ldr	r2, [pc, #596]	@ (80025e4 <HAL_GPIO_Init+0x294>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d875      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 8002392:	4a95      	ldr	r2, [pc, #596]	@ (80025e8 <HAL_GPIO_Init+0x298>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d058      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 8002398:	4a93      	ldr	r2, [pc, #588]	@ (80025e8 <HAL_GPIO_Init+0x298>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d86f      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 800239e:	4a93      	ldr	r2, [pc, #588]	@ (80025ec <HAL_GPIO_Init+0x29c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d052      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023a4:	4a91      	ldr	r2, [pc, #580]	@ (80025ec <HAL_GPIO_Init+0x29c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d869      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023aa:	4a91      	ldr	r2, [pc, #580]	@ (80025f0 <HAL_GPIO_Init+0x2a0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d04c      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023b0:	4a8f      	ldr	r2, [pc, #572]	@ (80025f0 <HAL_GPIO_Init+0x2a0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d863      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023b6:	4a8f      	ldr	r2, [pc, #572]	@ (80025f4 <HAL_GPIO_Init+0x2a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d046      	beq.n	800244a <HAL_GPIO_Init+0xfa>
 80023bc:	4a8d      	ldr	r2, [pc, #564]	@ (80025f4 <HAL_GPIO_Init+0x2a4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d85d      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d82a      	bhi.n	800241c <HAL_GPIO_Init+0xcc>
 80023c6:	2b12      	cmp	r3, #18
 80023c8:	d859      	bhi.n	800247e <HAL_GPIO_Init+0x12e>
 80023ca:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <HAL_GPIO_Init+0x80>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	0800244b 	.word	0x0800244b
 80023d4:	08002425 	.word	0x08002425
 80023d8:	08002437 	.word	0x08002437
 80023dc:	08002479 	.word	0x08002479
 80023e0:	0800247f 	.word	0x0800247f
 80023e4:	0800247f 	.word	0x0800247f
 80023e8:	0800247f 	.word	0x0800247f
 80023ec:	0800247f 	.word	0x0800247f
 80023f0:	0800247f 	.word	0x0800247f
 80023f4:	0800247f 	.word	0x0800247f
 80023f8:	0800247f 	.word	0x0800247f
 80023fc:	0800247f 	.word	0x0800247f
 8002400:	0800247f 	.word	0x0800247f
 8002404:	0800247f 	.word	0x0800247f
 8002408:	0800247f 	.word	0x0800247f
 800240c:	0800247f 	.word	0x0800247f
 8002410:	0800247f 	.word	0x0800247f
 8002414:	0800242d 	.word	0x0800242d
 8002418:	08002441 	.word	0x08002441
 800241c:	4a76      	ldr	r2, [pc, #472]	@ (80025f8 <HAL_GPIO_Init+0x2a8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002422:	e02c      	b.n	800247e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e029      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	3304      	adds	r3, #4
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e024      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	3308      	adds	r3, #8
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e01f      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	330c      	adds	r3, #12
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e01a      	b.n	8002480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002452:	2304      	movs	r3, #4
 8002454:	623b      	str	r3, [r7, #32]
          break;
 8002456:	e013      	b.n	8002480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002460:	2308      	movs	r3, #8
 8002462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	611a      	str	r2, [r3, #16]
          break;
 800246a:	e009      	b.n	8002480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800246c:	2308      	movs	r3, #8
 800246e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	615a      	str	r2, [r3, #20]
          break;
 8002476:	e003      	b.n	8002480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x130>
          break;
 800247e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2bff      	cmp	r3, #255	@ 0xff
 8002484:	d801      	bhi.n	800248a <HAL_GPIO_Init+0x13a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	e001      	b.n	800248e <HAL_GPIO_Init+0x13e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	d802      	bhi.n	800249c <HAL_GPIO_Init+0x14c>
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x152>
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	3b08      	subs	r3, #8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	210f      	movs	r1, #15
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	6a39      	ldr	r1, [r7, #32]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80a9 	beq.w	8002622 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d0:	4b4a      	ldr	r3, [pc, #296]	@ (80025fc <HAL_GPIO_Init+0x2ac>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a49      	ldr	r2, [pc, #292]	@ (80025fc <HAL_GPIO_Init+0x2ac>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_GPIO_Init+0x2ac>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024e8:	4a45      	ldr	r2, [pc, #276]	@ (8002600 <HAL_GPIO_Init+0x2b0>)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3d      	ldr	r2, [pc, #244]	@ (8002604 <HAL_GPIO_Init+0x2b4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00d      	beq.n	8002530 <HAL_GPIO_Init+0x1e0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3c      	ldr	r2, [pc, #240]	@ (8002608 <HAL_GPIO_Init+0x2b8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <HAL_GPIO_Init+0x1dc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3b      	ldr	r2, [pc, #236]	@ (800260c <HAL_GPIO_Init+0x2bc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_GPIO_Init+0x1d8>
 8002524:	2302      	movs	r3, #2
 8002526:	e004      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 8002528:	2303      	movs	r3, #3
 800252a:	e002      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_GPIO_Init+0x1e2>
 8002530:	2300      	movs	r3, #0
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002542:	492f      	ldr	r1, [pc, #188]	@ (8002600 <HAL_GPIO_Init+0x2b0>)
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	492b      	ldr	r1, [pc, #172]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	4927      	ldr	r1, [pc, #156]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b22      	ldr	r3, [pc, #136]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4921      	ldr	r1, [pc, #132]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b1f      	ldr	r3, [pc, #124]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	491d      	ldr	r1, [pc, #116]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4917      	ldr	r1, [pc, #92]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4913      	ldr	r1, [pc, #76]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01f      	beq.n	8002614 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	490d      	ldr	r1, [pc, #52]	@ (8002610 <HAL_GPIO_Init+0x2c0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e01f      	b.n	8002622 <HAL_GPIO_Init+0x2d2>
 80025e2:	bf00      	nop
 80025e4:	10320000 	.word	0x10320000
 80025e8:	10310000 	.word	0x10310000
 80025ec:	10220000 	.word	0x10220000
 80025f0:	10210000 	.word	0x10210000
 80025f4:	10120000 	.word	0x10120000
 80025f8:	10110000 	.word	0x10110000
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010000 	.word	0x40010000
 8002604:	40010800 	.word	0x40010800
 8002608:	40010c00 	.word	0x40010c00
 800260c:	40011000 	.word	0x40011000
 8002610:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002614:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_GPIO_Init+0x2f4>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	43db      	mvns	r3, r3
 800261c:	4909      	ldr	r1, [pc, #36]	@ (8002644 <HAL_GPIO_Init+0x2f4>)
 800261e:	4013      	ands	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	3301      	adds	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	f47f ae96 	bne.w	8002364 <HAL_GPIO_Init+0x14>
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	372c      	adds	r7, #44	@ 0x2c
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002656:	e094      	b.n	8002782 <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8087 	beq.w	800277c <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800266e:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <HAL_GPIO_DeInit+0x154>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a43      	ldr	r2, [pc, #268]	@ (80027a0 <HAL_GPIO_DeInit+0x158>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_DeInit+0x6c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a42      	ldr	r2, [pc, #264]	@ (80027a4 <HAL_GPIO_DeInit+0x15c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_DeInit+0x68>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <HAL_GPIO_DeInit+0x160>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_DeInit+0x64>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_DeInit+0x6e>
 80026ac:	2303      	movs	r3, #3
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_DeInit+0x6e>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_DeInit+0x6e>
 80026b4:	2300      	movs	r3, #0
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d132      	bne.n	800272c <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80026c6:	4b39      	ldr	r3, [pc, #228]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4937      	ldr	r1, [pc, #220]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80026d4:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	43db      	mvns	r3, r3
 80026dc:	4933      	ldr	r1, [pc, #204]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026de:	4013      	ands	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4930      	ldr	r1, [pc, #192]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	492c      	ldr	r1, [pc, #176]	@ (80027ac <HAL_GPIO_DeInit+0x164>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800270e:	4a23      	ldr	r2, [pc, #140]	@ (800279c <HAL_GPIO_DeInit+0x154>)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	43da      	mvns	r2, r3
 800271e:	481f      	ldr	r0, [pc, #124]	@ (800279c <HAL_GPIO_DeInit+0x154>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	400a      	ands	r2, r1
 8002726:	3302      	adds	r3, #2
 8002728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2bff      	cmp	r3, #255	@ 0xff
 8002730:	d801      	bhi.n	8002736 <HAL_GPIO_DeInit+0xee>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	e001      	b.n	800273a <HAL_GPIO_DeInit+0xf2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2bff      	cmp	r3, #255	@ 0xff
 8002740:	d802      	bhi.n	8002748 <HAL_GPIO_DeInit+0x100>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	e002      	b.n	800274e <HAL_GPIO_DeInit+0x106>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3b08      	subs	r3, #8
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	210f      	movs	r1, #15
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	2104      	movs	r1, #4
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3301      	adds	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f af64 	bne.w	8002658 <HAL_GPIO_DeInit+0x10>
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40010000 	.word	0x40010000
 80027a0:	40010800 	.word	0x40010800
 80027a4:	40010c00 	.word	0x40010c00
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_PWR_EnterSLEEPMode+0x34>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <HAL_PWR_EnterSLEEPMode+0x34>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80027fe:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002800:	e002      	b.n	8002808 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002802:	bf40      	sev
    __WFE();
 8002804:	bf20      	wfe
    __WFE();
 8002806:	bf20      	wfe
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e272      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b92      	ldr	r3, [pc, #584]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e24c      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd8c 	bl	8001410 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fd88 	bl	8001410 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e200      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fd78 	bl	8001410 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fd74 	bl	8001410 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1ec      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c0      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd2d 	bl	8001410 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fd29 	bl	8001410 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fd0c 	bl	8001410 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fd08 	bl	8001410 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e180      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fcec 	bl	8001410 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fce8 	bl	8001410 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e160      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 face 	bl	8002ffc <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fcd2 	bl	8001410 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fcce 	bl	8001410 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e146      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b92      	ldr	r3, [pc, #584]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b8b      	ldr	r3, [pc, #556]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a87      	ldr	r2, [pc, #540]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fc8f 	bl	8001410 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe fc8b 	bl	8001410 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	@ 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e103      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a69      	ldr	r2, [pc, #420]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b67      	ldr	r3, [pc, #412]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a66      	ldr	r2, [pc, #408]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a5a      	ldr	r2, [pc, #360]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a57      	ldr	r2, [pc, #348]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fc3f 	bl	8001410 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fc3b 	bl	8001410 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fc29 	bl	8001410 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fc25 	bl	8001410 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e09b      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fbf9 	bl	8001410 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fbf5 	bl	8001410 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e06d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	491b      	ldr	r1, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fbc9 	bl	8001410 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fbc5 	bl	8001410 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e035      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fbb2 	bl	8001410 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fbae 	bl	8001410 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e026      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e01e      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e019      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x500>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d0      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4965      	ldr	r1, [pc, #404]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4936      	ldr	r1, [pc, #216]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fb00 	bl	8001410 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fe fafc 	bl	8001410 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e053      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4922      	ldr	r1, [pc, #136]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fa5e 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08006d48 	.word	0x08006d48
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e027      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c5b      	lsrs	r3, r3, #17
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	693b      	ldr	r3, [r7, #16]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	08006d60 	.word	0x08006d60
 8002f90:	08006d70 	.word	0x08006d70
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08006d58 	.word	0x08006d58

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	@ (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08006d58 	.word	0x08006d58

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e042      	b.n	80030d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f902 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	@ 0x24
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800307a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f971 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d175      	bne.n	80031e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Transmit+0x2c>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e06e      	b.n	80031e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2221      	movs	r2, #33	@ 0x21
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003116:	f7fe f97b 	bl	8001410 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003130:	d108      	bne.n	8003144 <HAL_UART_Transmit+0x6c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e003      	b.n	800314c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800314c:	e02e      	b.n	80031ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	2180      	movs	r1, #128	@ 0x80
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f848 	bl	80031ee <UART_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e03a      	b.n	80031e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3302      	adds	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e007      	b.n	800319e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1cb      	bne.n	800314e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2140      	movs	r1, #64	@ 0x40
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f814 	bl	80031ee <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e006      	b.n	80031e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
  }
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	e03b      	b.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003206:	d037      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fe f902 	bl	8001410 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <UART_WaitOnFlagUntilTimeout+0x30>
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e03a      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d023      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b80      	cmp	r3, #128	@ 0x80
 8003234:	d020      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	d01d      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d116      	bne.n	8003278 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f81d 	bl	80032a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2208      	movs	r2, #8
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e00f      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	429a      	cmp	r2, r3
 8003294:	d0b4      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b095      	sub	sp, #84	@ 0x54
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80032ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e5      	bne.n	80032a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3314      	adds	r3, #20
 80032e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3314      	adds	r3, #20
 80032fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e5      	bne.n	80032dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	d119      	bne.n	800334c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	60bb      	str	r3, [r7, #8]
   return(result);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f023 0310 	bic.w	r3, r3, #16
 800332e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003338:	61ba      	str	r2, [r7, #24]
 800333a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	613b      	str	r3, [r7, #16]
   return(result);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e5      	bne.n	8003318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800335a:	bf00      	nop
 800335c:	3754      	adds	r7, #84	@ 0x54
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800339e:	f023 030c 	bic.w	r3, r3, #12
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003478 <UART_SetConfig+0x114>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033cc:	f7ff fe02 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	e002      	b.n	80033da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033d4:	f7ff fdea 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009a      	lsls	r2, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	4a22      	ldr	r2, [pc, #136]	@ (800347c <UART_SetConfig+0x118>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	0119      	lsls	r1, r3, #4
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003410:	4b1a      	ldr	r3, [pc, #104]	@ (800347c <UART_SetConfig+0x118>)
 8003412:	fba3 0302 	umull	r0, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2064      	movs	r0, #100	@ 0x64
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	3332      	adds	r3, #50	@ 0x32
 8003424:	4a15      	ldr	r2, [pc, #84]	@ (800347c <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003430:	4419      	add	r1, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <UART_SetConfig+0x118>)
 800344a:	fba3 0302 	umull	r0, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2064      	movs	r0, #100	@ 0x64
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	@ 0x32
 800345c:	4a07      	ldr	r2, [pc, #28]	@ (800347c <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	440a      	add	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013800 	.word	0x40013800
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	2b84      	cmp	r3, #132	@ 0x84
 8003494:	d005      	beq.n	80034a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	3303      	adds	r3, #3
 80034a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b4:	f3ef 8305 	mrs	r3, IPSR
 80034b8:	607b      	str	r3, [r7, #4]
  return(result);
 80034ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034d4:	f001 fce2 	bl	8004e9c <vTaskStartScheduler>
  
  return osOK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}

080034de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e0:	b089      	sub	sp, #36	@ 0x24
 80034e2:	af04      	add	r7, sp, #16
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <osThreadCreate+0x54>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01c      	beq.n	8003532 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685c      	ldr	r4, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691e      	ldr	r6, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ffb8 	bl	8003480 <makeFreeRtosPriority>
 8003510:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351a:	9202      	str	r2, [sp, #8]
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	9100      	str	r1, [sp, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4632      	mov	r2, r6
 8003524:	4629      	mov	r1, r5
 8003526:	4620      	mov	r0, r4
 8003528:	f001 fad2 	bl	8004ad0 <xTaskCreateStatic>
 800352c:	4603      	mov	r3, r0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e01c      	b.n	800356c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685c      	ldr	r4, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800353e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff9a 	bl	8003480 <makeFreeRtosPriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	9200      	str	r2, [sp, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	4632      	mov	r2, r6
 800355a:	4629      	mov	r1, r5
 800355c:	4620      	mov	r0, r4
 800355e:	f001 fb17 	bl	8004b90 <xTaskCreate>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003576 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <osDelay+0x16>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	e000      	b.n	800358e <osDelay+0x18>
 800358c:	2301      	movs	r3, #1
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fc4e 	bl	8004e30 <vTaskDelay>
  
  return osOK;
 8003594:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	460b      	mov	r3, r1
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d013      	beq.n	80035de <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <osTimerCreate+0x20>
 80035bc:	2101      	movs	r1, #1
 80035be:	e000      	b.n	80035c2 <osTimerCreate+0x22>
 80035c0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80035ca:	9201      	str	r2, [sp, #4]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	460a      	mov	r2, r1
 80035d2:	2101      	movs	r1, #1
 80035d4:	480b      	ldr	r0, [pc, #44]	@ (8003604 <osTimerCreate+0x64>)
 80035d6:	f002 fa36 	bl	8005a46 <xTimerCreateStatic>
 80035da:	4603      	mov	r3, r0
 80035dc:	e00e      	b.n	80035fc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <osTimerCreate+0x48>
 80035e4:	2201      	movs	r2, #1
 80035e6:	e000      	b.n	80035ea <osTimerCreate+0x4a>
 80035e8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2101      	movs	r1, #1
 80035f4:	4803      	ldr	r0, [pc, #12]	@ (8003604 <osTimerCreate+0x64>)
 80035f6:	f002 fa05 	bl	8005a04 <xTimerCreate>
 80035fa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	08006c1c 	.word	0x08006c1c

08003608 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <osTimerStart+0x20>
    ticks = 1;
 8003624:	2301      	movs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003628:	f7ff ff41 	bl	80034ae <inHandlerMode>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	2200      	movs	r2, #0
 8003638:	9200      	str	r2, [sp, #0]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	2109      	movs	r1, #9
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f002 fa7e 	bl	8005b40 <xTimerGenericCommand>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d002      	beq.n	8003650 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800364a:	23ff      	movs	r3, #255	@ 0xff
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e018      	b.n	8003682 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d015      	beq.n	8003682 <osTimerStart+0x7a>
 8003656:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <osTimerStart+0x84>)
 8003658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	e00c      	b.n	8003682 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	2104      	movs	r1, #4
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f002 fa64 	bl	8005b40 <xTimerGenericCommand>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <osTimerStart+0x7a>
      result = osErrorOS;
 800367e:	23ff      	movs	r3, #255	@ 0xff
 8003680:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80036a0:	f7ff ff05 	bl	80034ae <inHandlerMode>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	2200      	movs	r2, #0
 80036b0:	9200      	str	r2, [sp, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2108      	movs	r1, #8
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f002 fa42 	bl	8005b40 <xTimerGenericCommand>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <osTimerStop+0x36>
      return osErrorOS;
 80036c2:	23ff      	movs	r3, #255	@ 0xff
 80036c4:	e019      	b.n	80036fa <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <osTimerStop+0x68>
 80036cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <osTimerStop+0x74>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	e00c      	b.n	80036f8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80036de:	2300      	movs	r3, #0
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	2200      	movs	r2, #0
 80036e6:	2103      	movs	r1, #3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f002 fa29 	bl	8005b40 <xTimerGenericCommand>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <osTimerStop+0x68>
      result = osErrorOS;
 80036f4:	23ff      	movs	r3, #255	@ 0xff
 80036f6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80036f8:	68fb      	ldr	r3, [r7, #12]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000ed04 	.word	0xe000ed04

08003708 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d011      	beq.n	800373e <osMessageCreate+0x36>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2400      	movs	r4, #0
 8003734:	9400      	str	r4, [sp, #0]
 8003736:	f000 fd05 	bl	8004144 <xQueueGenericCreateStatic>
 800373a:	4603      	mov	r3, r0
 800373c:	e008      	b.n	8003750 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	4619      	mov	r1, r3
 800374a:	f000 fd78 	bl	800423e <xQueueGenericCreate>
 800374e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}

08003758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	@ 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003764:	f001 fc0a 	bl	8004f7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003768:	4b5c      	ldr	r3, [pc, #368]	@ (80038dc <pvPortMalloc+0x184>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003770:	f000 f924 	bl	80039bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003774:	4b5a      	ldr	r3, [pc, #360]	@ (80038e0 <pvPortMalloc+0x188>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 8095 	bne.w	80038ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01e      	beq.n	80037c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003788:	2208      	movs	r2, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	3308      	adds	r3, #8
 80037a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d06f      	beq.n	80038ac <pvPortMalloc+0x154>
 80037cc:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <pvPortMalloc+0x18c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d86a      	bhi.n	80038ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037d6:	4b44      	ldr	r3, [pc, #272]	@ (80038e8 <pvPortMalloc+0x190>)
 80037d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037da:	4b43      	ldr	r3, [pc, #268]	@ (80038e8 <pvPortMalloc+0x190>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037e0:	e004      	b.n	80037ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d903      	bls.n	80037fe <pvPortMalloc+0xa6>
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f1      	bne.n	80037e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80037fe:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <pvPortMalloc+0x184>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003804:	429a      	cmp	r2, r3
 8003806:	d051      	beq.n	80038ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	4413      	add	r3, r2
 8003810:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	2308      	movs	r3, #8
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	429a      	cmp	r2, r3
 8003828:	d920      	bls.n	800386c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <pvPortMalloc+0xfc>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	613b      	str	r3, [r7, #16]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003866:	69b8      	ldr	r0, [r7, #24]
 8003868:	f000 f90a 	bl	8003a80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800386c:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <pvPortMalloc+0x18c>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <pvPortMalloc+0x18c>)
 8003878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <pvPortMalloc+0x18c>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <pvPortMalloc+0x194>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d203      	bcs.n	800388e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <pvPortMalloc+0x18c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <pvPortMalloc+0x194>)
 800388c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <pvPortMalloc+0x188>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	431a      	orrs	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80038a2:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <pvPortMalloc+0x198>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a11      	ldr	r2, [pc, #68]	@ (80038f0 <pvPortMalloc+0x198>)
 80038aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038ac:	f001 fb74 	bl	8004f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <pvPortMalloc+0x17a>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	60fb      	str	r3, [r7, #12]
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <pvPortMalloc+0x176>
	return pvReturn;
 80038d2:	69fb      	ldr	r3, [r7, #28]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	@ 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200016e8 	.word	0x200016e8
 80038e0:	200016fc 	.word	0x200016fc
 80038e4:	200016ec 	.word	0x200016ec
 80038e8:	200016e0 	.word	0x200016e0
 80038ec:	200016f0 	.word	0x200016f0
 80038f0:	200016f4 	.word	0x200016f4

080038f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d04f      	beq.n	80039a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003906:	2308      	movs	r3, #8
 8003908:	425b      	negs	r3, r3
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <vPortFree+0xbc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <vPortFree+0x46>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	e7fd      	b.n	8003936 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <vPortFree+0x66>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	60bb      	str	r3, [r7, #8]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <vPortFree+0xbc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01e      	beq.n	80039a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11a      	bne.n	80039a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <vPortFree+0xbc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	43db      	mvns	r3, r3
 800397a:	401a      	ands	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003980:	f001 fafc 	bl	8004f7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <vPortFree+0xc0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4413      	add	r3, r2
 800398e:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <vPortFree+0xc0>)
 8003990:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003992:	6938      	ldr	r0, [r7, #16]
 8003994:	f000 f874 	bl	8003a80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <vPortFree+0xc4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a06      	ldr	r2, [pc, #24]	@ (80039b8 <vPortFree+0xc4>)
 80039a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80039a2:	f001 faf9 	bl	8004f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200016fc 	.word	0x200016fc
 80039b4:	200016ec 	.word	0x200016ec
 80039b8:	200016f8 	.word	0x200016f8

080039bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80039c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <prvHeapInit+0xac>)
 80039ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3307      	adds	r3, #7
 80039da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <prvHeapInit+0xac>)
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <prvHeapInit+0xb0>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <prvHeapInit+0xb0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a08:	2208      	movs	r2, #8
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0307 	bic.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <prvHeapInit+0xb4>)
 8003a1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <prvHeapInit+0xb4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <prvHeapInit+0xb4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	1ad2      	subs	r2, r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <prvHeapInit+0xb4>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <prvHeapInit+0xb8>)
 8003a4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a09      	ldr	r2, [pc, #36]	@ (8003a78 <prvHeapInit+0xbc>)
 8003a52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <prvHeapInit+0xc0>)
 8003a56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000ae0 	.word	0x20000ae0
 8003a6c:	200016e0 	.word	0x200016e0
 8003a70:	200016e8 	.word	0x200016e8
 8003a74:	200016f0 	.word	0x200016f0
 8003a78:	200016ec 	.word	0x200016ec
 8003a7c:	200016fc 	.word	0x200016fc

08003a80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a88:	4b27      	ldr	r3, [pc, #156]	@ (8003b28 <prvInsertBlockIntoFreeList+0xa8>)
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e002      	b.n	8003a94 <prvInsertBlockIntoFreeList+0x14>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d8f7      	bhi.n	8003a8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d108      	bne.n	8003ac2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	441a      	add	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	441a      	add	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d118      	bne.n	8003b08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <prvInsertBlockIntoFreeList+0xac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d00d      	beq.n	8003afe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e008      	b.n	8003b10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <prvInsertBlockIntoFreeList+0xac>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e003      	b.n	8003b10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d002      	beq.n	8003b1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	200016e0 	.word	0x200016e0
 8003b2c:	200016e8 	.word	0x200016e8

08003b30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f103 0208 	add.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f103 0208 	add.w	r2, r3, #8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0208 	add.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be2:	d103      	bne.n	8003bec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e00c      	b.n	8003c06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e002      	b.n	8003bfa <vListInsert+0x2e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d2f6      	bcs.n	8003bf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6852      	ldr	r2, [r2, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d103      	bne.n	8003c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
	...

08003c90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b04      	subs	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b04      	subs	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cc0:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <pxPortInitialiseStack+0x54>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b14      	subs	r3, #20
 8003cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b20      	subs	r3, #32
 8003cd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	08003ce9 	.word	0x08003ce9

08003ce8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <prvTaskExitError+0x54>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cfa:	d00b      	beq.n	8003d14 <prvTaskExitError+0x2c>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60fb      	str	r3, [r7, #12]
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <prvTaskExitError+0x28>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	60bb      	str	r3, [r7, #8]
}
 8003d26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d28:	bf00      	nop
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0fc      	beq.n	8003d2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	2000000c 	.word	0x2000000c

08003d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <pxCurrentTCBConst2>)
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	6808      	ldr	r0, [r1, #0]
 8003d46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d4a:	f380 8809 	msr	PSP, r0
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f380 8811 	msr	BASEPRI, r0
 8003d5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003d5e:	4770      	bx	lr

08003d60 <pxCurrentTCBConst2>:
 8003d60:	20001748 	.word	0x20001748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop

08003d68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d68:	4806      	ldr	r0, [pc, #24]	@ (8003d84 <prvPortStartFirstTask+0x1c>)
 8003d6a:	6800      	ldr	r0, [r0, #0]
 8003d6c:	6800      	ldr	r0, [r0, #0]
 8003d6e:	f380 8808 	msr	MSP, r0
 8003d72:	b662      	cpsie	i
 8003d74:	b661      	cpsie	f
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	df00      	svc	0
 8003d80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d82:	bf00      	nop
 8003d84:	e000ed08 	.word	0xe000ed08

08003d88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d8e:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <xPortStartScheduler+0xd0>)
 8003d90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	@ 0xff
 8003d9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <xPortStartScheduler+0xd4>)
 8003db4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003db6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dbc:	e009      	b.n	8003dd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003dbe:	4b28      	ldr	r3, [pc, #160]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a26      	ldr	r2, [pc, #152]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003dc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d0ef      	beq.n	8003dbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dde:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00b      	beq.n	8003e02 <xPortStartScheduler+0x7a>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60bb      	str	r3, [r7, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e02:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003e0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e0c:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e14:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <xPortStartScheduler+0xd8>)
 8003e16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <xPortStartScheduler+0xdc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0f      	ldr	r2, [pc, #60]	@ (8003e64 <xPortStartScheduler+0xdc>)
 8003e26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <xPortStartScheduler+0xdc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0c      	ldr	r2, [pc, #48]	@ (8003e64 <xPortStartScheduler+0xdc>)
 8003e32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e38:	f000 f8b8 	bl	8003fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <xPortStartScheduler+0xe0>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e42:	f7ff ff91 	bl	8003d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e46:	f001 fa0d 	bl	8005264 <vTaskSwitchContext>
	prvTaskExitError();
 8003e4a:	f7ff ff4d 	bl	8003ce8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000e400 	.word	0xe000e400
 8003e5c:	20001700 	.word	0x20001700
 8003e60:	20001704 	.word	0x20001704
 8003e64:	e000ed20 	.word	0xe000ed20
 8003e68:	2000000c 	.word	0x2000000c

08003e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	607b      	str	r3, [r7, #4]
}
 8003e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <vPortEnterCritical+0x58>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <vPortEnterCritical+0x58>)
 8003e8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <vPortEnterCritical+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d110      	bne.n	8003eba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <vPortEnterCritical+0x5c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <vPortEnterCritical+0x4e>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	603b      	str	r3, [r7, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <vPortEnterCritical+0x4a>
	}
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	2000000c 	.word	0x2000000c
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <vPortExitCritical+0x50>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <vPortExitCritical+0x26>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <vPortExitCritical+0x50>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a08      	ldr	r2, [pc, #32]	@ (8003f1c <vPortExitCritical+0x50>)
 8003efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <vPortExitCritical+0x50>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <vPortExitCritical+0x44>
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f20:	f3ef 8009 	mrs	r0, PSP
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <pxCurrentTCBConst>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f30:	6010      	str	r0, [r2, #0]
 8003f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f3a:	f380 8811 	msr	BASEPRI, r0
 8003f3e:	f001 f991 	bl	8005264 <vTaskSwitchContext>
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8811 	msr	BASEPRI, r0
 8003f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	6808      	ldr	r0, [r1, #0]
 8003f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f56:	f380 8809 	msr	PSP, r0
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	4770      	bx	lr

08003f60 <pxCurrentTCBConst>:
 8003f60:	20001748 	.word	0x20001748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
}
 8003f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f82:	f001 f8b5 	bl	80050f0 <xTaskIncrementTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <xPortSysTickHandler+0x40>)
 8003f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f383 8811 	msr	BASEPRI, r3
}
 8003f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <vPortSetupTimerInterrupt+0x30>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe0 <vPortSetupTimerInterrupt+0x34>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fbc:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <vPortSetupTimerInterrupt+0x38>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <vPortSetupTimerInterrupt+0x3c>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <vPortSetupTimerInterrupt+0x40>)
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fce:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <vPortSetupTimerInterrupt+0x30>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	e000e010 	.word	0xe000e010
 8003fe0:	e000e018 	.word	0xe000e018
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	10624dd3 	.word	0x10624dd3
 8003fec:	e000e014 	.word	0xe000e014

08003ff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ff6:	f3ef 8305 	mrs	r3, IPSR
 8003ffa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	d915      	bls.n	800402e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004002:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <vPortValidateInterruptPriority+0x70>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800400c:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <vPortValidateInterruptPriority+0x74>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	7afa      	ldrb	r2, [r7, #11]
 8004012:	429a      	cmp	r2, r3
 8004014:	d20b      	bcs.n	800402e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	607b      	str	r3, [r7, #4]
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	e7fd      	b.n	800402a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <vPortValidateInterruptPriority+0x78>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <vPortValidateInterruptPriority+0x7c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90b      	bls.n	8004056 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	603b      	str	r3, [r7, #0]
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <vPortValidateInterruptPriority+0x62>
	}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	e000e3f0 	.word	0xe000e3f0
 8004064:	20001700 	.word	0x20001700
 8004068:	e000ed0c 	.word	0xe000ed0c
 800406c:	20001704 	.word	0x20001704

08004070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xQueueGenericReset+0x2c>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60bb      	str	r3, [r7, #8]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800409c:	f7ff fee6 	bl	8003e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	441a      	add	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	3b01      	subs	r3, #1
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	22ff      	movs	r2, #255	@ 0xff
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d114      	bne.n	800411c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01a      	beq.n	8004130 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3310      	adds	r3, #16
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f964 	bl	80053cc <xTaskRemoveFromEventList>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <xQueueGenericReset+0xd0>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	e009      	b.n	8004130 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3310      	adds	r3, #16
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fd05 	bl	8003b30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3324      	adds	r3, #36	@ 0x24
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fd00 	bl	8003b30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004130:	f7ff fecc 	bl	8003ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004134:	2301      	movs	r3, #1
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	@ 0x38
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <xQueueGenericCreateStatic+0x56>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <xQueueGenericCreateStatic+0x5a>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericCreateStatic+0x5c>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <xQueueGenericCreateStatic+0x84>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <xQueueGenericCreateStatic+0x88>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <xQueueGenericCreateStatic+0x8a>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61fb      	str	r3, [r7, #28]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041ea:	2348      	movs	r3, #72	@ 0x48
 80041ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b48      	cmp	r3, #72	@ 0x48
 80041f2:	d00b      	beq.n	800420c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	61bb      	str	r3, [r7, #24]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800420c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004220:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f840 	bl	80042b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	@ 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	@ 0x28
 8004242:	af02      	add	r7, sp, #8
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	613b      	str	r3, [r7, #16]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3348      	adds	r3, #72	@ 0x48
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fa6d 	bl	8003758 <pvPortMalloc>
 800427e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d011      	beq.n	80042aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3348      	adds	r3, #72	@ 0x48
 800428e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004298:	79fa      	ldrb	r2, [r7, #7]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f805 	bl	80042b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042aa:	69bb      	ldr	r3, [r7, #24]
	}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042e2:	2101      	movs	r1, #1
 80042e4:	69b8      	ldr	r0, [r7, #24]
 80042e6:	f7ff fec3 	bl	8004070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08e      	sub	sp, #56	@ 0x38
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004302:	2300      	movs	r3, #0
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <xQueueGenericSend+0x34>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <xQueueGenericSend+0x42>
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <xQueueGenericSend+0x46>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericSend+0x48>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xQueueGenericSend+0x64>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d103      	bne.n	8004366 <xQueueGenericSend+0x72>
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <xQueueGenericSend+0x76>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <xQueueGenericSend+0x78>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xQueueGenericSend+0x94>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004388:	f001 f9e6 	bl	8005758 <xTaskGetSchedulerState>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <xQueueGenericSend+0xa4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueGenericSend+0xa8>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueGenericSend+0xaa>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <xQueueGenericSend+0xc6>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61fb      	str	r3, [r7, #28]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043ba:	f7ff fd57 	bl	8003e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <xQueueGenericSend+0xdc>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d129      	bne.n	8004424 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043d6:	f000 fa0f 	bl	80047f8 <prvCopyDataToQueue>
 80043da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	3324      	adds	r3, #36	@ 0x24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 ffef 	bl	80053cc <xTaskRemoveFromEventList>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043f4:	4b3f      	ldr	r3, [pc, #252]	@ (80044f4 <xQueueGenericSend+0x200>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	e00a      	b.n	800441c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800440c:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <xQueueGenericSend+0x200>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800441c:	f7ff fd56 	bl	8003ecc <vPortExitCritical>
				return pdPASS;
 8004420:	2301      	movs	r3, #1
 8004422:	e063      	b.n	80044ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800442a:	f7ff fd4f 	bl	8003ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800442e:	2300      	movs	r3, #0
 8004430:	e05c      	b.n	80044ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f829 	bl	8005494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004442:	2301      	movs	r3, #1
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004446:	f7ff fd41 	bl	8003ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800444a:	f000 fd97 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800444e:	f7ff fd0d 	bl	8003e6c <vPortEnterCritical>
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004458:	b25b      	sxtb	r3, r3
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800445e:	d103      	bne.n	8004468 <xQueueGenericSend+0x174>
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800446e:	b25b      	sxtb	r3, r3
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004474:	d103      	bne.n	800447e <xQueueGenericSend+0x18a>
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800447e:	f7ff fd25 	bl	8003ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004482:	1d3a      	adds	r2, r7, #4
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f818 	bl	80054c0 <xTaskCheckForTimeOut>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d124      	bne.n	80044e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004496:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004498:	f000 faa6 	bl	80049e8 <prvIsQueueFull>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	3310      	adds	r3, #16
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ff3c 	bl	8005328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044b2:	f000 fa31 	bl	8004918 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044b6:	f000 fd6f 	bl	8004f98 <xTaskResumeAll>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f af7c 	bne.w	80043ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <xQueueGenericSend+0x200>)
 80044c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	e772      	b.n	80043ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044d6:	f000 fa1f 	bl	8004918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044da:	f000 fd5d 	bl	8004f98 <xTaskResumeAll>
 80044de:	e76c      	b.n	80043ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044e2:	f000 fa19 	bl	8004918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e6:	f000 fd57 	bl	8004f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3738      	adds	r7, #56	@ 0x38
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b090      	sub	sp, #64	@ 0x40
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <xQueueGenericSendFromISR+0x3e>
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueGenericSendFromISR+0x42>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueGenericSendFromISR+0x44>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d103      	bne.n	8004566 <xQueueGenericSendFromISR+0x6e>
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <xQueueGenericSendFromISR+0x72>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <xQueueGenericSendFromISR+0x74>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	623b      	str	r3, [r7, #32]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004588:	f7ff fd32 	bl	8003ff0 <vPortValidateInterruptPriority>
	__asm volatile
 800458c:	f3ef 8211 	mrs	r2, BASEPRI
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	61fa      	str	r2, [r7, #28]
 80045a2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80045a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <xQueueGenericSendFromISR+0xc2>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d12f      	bne.n	800461a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045d0:	f000 f912 	bl	80047f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045dc:	d112      	bne.n	8004604 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	3324      	adds	r3, #36	@ 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 feee 	bl	80053cc <xTaskRemoveFromEventList>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e007      	b.n	8004614 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004604:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004608:	3301      	adds	r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	b25a      	sxtb	r2, r3
 800460e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004614:	2301      	movs	r3, #1
 8004616:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004618:	e001      	b.n	800461e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800461a:	2300      	movs	r3, #0
 800461c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800461e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004620:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f383 8811 	msr	BASEPRI, r3
}
 8004628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800462c:	4618      	mov	r0, r3
 800462e:	3740      	adds	r7, #64	@ 0x40
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	@ 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10b      	bne.n	8004666 <xQueueReceive+0x32>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	623b      	str	r3, [r7, #32]
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	e7fd      	b.n	8004662 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <xQueueReceive+0x40>
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <xQueueReceive+0x44>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <xQueueReceive+0x46>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <xQueueReceive+0x62>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	61fb      	str	r3, [r7, #28]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004696:	f001 f85f 	bl	8005758 <xTaskGetSchedulerState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <xQueueReceive+0x72>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <xQueueReceive+0x76>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueReceive+0x78>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <xQueueReceive+0x94>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c8:	f7ff fbd0 	bl	8003e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01f      	beq.n	8004718 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046dc:	f000 f8f6 	bl	80048cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	1e5a      	subs	r2, r3, #1
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	3310      	adds	r3, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fe69 	bl	80053cc <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004700:	4b3c      	ldr	r3, [pc, #240]	@ (80047f4 <xQueueReceive+0x1c0>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004710:	f7ff fbdc 	bl	8003ecc <vPortExitCritical>
				return pdPASS;
 8004714:	2301      	movs	r3, #1
 8004716:	e069      	b.n	80047ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471e:	f7ff fbd5 	bl	8003ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004722:	2300      	movs	r3, #0
 8004724:	e062      	b.n	80047ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472c:	f107 0310 	add.w	r3, r7, #16
 8004730:	4618      	mov	r0, r3
 8004732:	f000 feaf 	bl	8005494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473a:	f7ff fbc7 	bl	8003ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473e:	f000 fc1d 	bl	8004f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004742:	f7ff fb93 	bl	8003e6c <vPortEnterCritical>
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800474c:	b25b      	sxtb	r3, r3
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004752:	d103      	bne.n	800475c <xQueueReceive+0x128>
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004768:	d103      	bne.n	8004772 <xQueueReceive+0x13e>
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004772:	f7ff fbab 	bl	8003ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004776:	1d3a      	adds	r2, r7, #4
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe9e 	bl	80054c0 <xTaskCheckForTimeOut>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d123      	bne.n	80047d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800478a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800478c:	f000 f916 	bl	80049bc <prvIsQueueEmpty>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	3324      	adds	r3, #36	@ 0x24
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fdc2 	bl	8005328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047a6:	f000 f8b7 	bl	8004918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047aa:	f000 fbf5 	bl	8004f98 <xTaskResumeAll>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d189      	bne.n	80046c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80047b4:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <xQueueReceive+0x1c0>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	e780      	b.n	80046c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047c8:	f000 f8a6 	bl	8004918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047cc:	f000 fbe4 	bl	8004f98 <xTaskResumeAll>
 80047d0:	e77a      	b.n	80046c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047d4:	f000 f8a0 	bl	8004918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d8:	f000 fbde 	bl	8004f98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047de:	f000 f8ed 	bl	80049bc <prvIsQueueEmpty>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f43f af6f 	beq.w	80046c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3730      	adds	r7, #48	@ 0x30
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d14d      	bne.n	80048ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ffb6 	bl	8005794 <xTaskPriorityDisinherit>
 8004828:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	e043      	b.n	80048ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d119      	bne.n	800486c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6858      	ldr	r0, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	461a      	mov	r2, r3
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	f001 fd18 	bl	8006278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	441a      	add	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	d32b      	bcc.n	80048ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	e026      	b.n	80048ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68d8      	ldr	r0, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	f001 fcfe 	bl	8006278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	425b      	negs	r3, r3
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d207      	bcs.n	80048a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	425b      	negs	r3, r3
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d105      	bne.n	80048ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80048c2:	697b      	ldr	r3, [r7, #20]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d303      	bcc.n	8004900 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	461a      	mov	r2, r3
 800490a:	6838      	ldr	r0, [r7, #0]
 800490c:	f001 fcb4 	bl	8006278 <memcpy>
	}
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004920:	f7ff faa4 	bl	8003e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800492a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800492c:	e011      	b.n	8004952 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d012      	beq.n	800495c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3324      	adds	r3, #36	@ 0x24
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fd46 	bl	80053cc <xTaskRemoveFromEventList>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004946:	f000 fe1f 	bl	8005588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	3b01      	subs	r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	dce9      	bgt.n	800492e <prvUnlockQueue+0x16>
 800495a:	e000      	b.n	800495e <prvUnlockQueue+0x46>
					break;
 800495c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	22ff      	movs	r2, #255	@ 0xff
 8004962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004966:	f7ff fab1 	bl	8003ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800496a:	f7ff fa7f 	bl	8003e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004974:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004976:	e011      	b.n	800499c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d012      	beq.n	80049a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3310      	adds	r3, #16
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd21 	bl	80053cc <xTaskRemoveFromEventList>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004990:	f000 fdfa 	bl	8005588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	3b01      	subs	r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800499c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dce9      	bgt.n	8004978 <prvUnlockQueue+0x60>
 80049a4:	e000      	b.n	80049a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	22ff      	movs	r2, #255	@ 0xff
 80049ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80049b0:	f7ff fa8c 	bl	8003ecc <vPortExitCritical>
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c4:	f7ff fa52 	bl	8003e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e001      	b.n	80049da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049da:	f7ff fa77 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f0:	f7ff fa3c 	bl	8003e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d102      	bne.n	8004a06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e001      	b.n	8004a0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f7ff fa5f 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e014      	b.n	8004a52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a28:	4a0e      	ldr	r2, [pc, #56]	@ (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a34:	490b      	ldr	r1, [pc, #44]	@ (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a3e:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a4a:	e006      	b.n	8004a5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d9e7      	bls.n	8004a28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	20001708 	.word	0x20001708

08004a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a78:	f7ff f9f8 	bl	8003e6c <vPortEnterCritical>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a88:	d103      	bne.n	8004a92 <vQueueWaitForMessageRestricted+0x2a>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a9e:	d103      	bne.n	8004aa8 <vQueueWaitForMessageRestricted+0x40>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aa8:	f7ff fa10 	bl	8003ecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3324      	adds	r3, #36	@ 0x24
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fc59 	bl	8005374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff28 	bl	8004918 <prvUnlockQueue>
	}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	@ 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61fb      	str	r3, [r7, #28]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b1a:	23a0      	movs	r3, #160	@ 0xa0
 8004b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b22:	d00b      	beq.n	8004b3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61bb      	str	r3, [r7, #24]
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01e      	beq.n	8004b82 <xTaskCreateStatic+0xb2>
 8004b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f851 	bl	8004c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b7c:	f000 f8ee 	bl	8004d5c <prvAddNewTaskToReadyList>
 8004b80:	e001      	b.n	8004b86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b86:	697b      	ldr	r3, [r7, #20]
	}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	@ 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	@ 0x30
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe fdd7 	bl	8003758 <pvPortMalloc>
 8004baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00e      	beq.n	8004bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bb2:	20a0      	movs	r0, #160	@ 0xa0
 8004bb4:	f7fe fdd0 	bl	8003758 <pvPortMalloc>
 8004bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bc6:	e005      	b.n	8004bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fe fe93 	bl	80038f4 <vPortFree>
 8004bce:	e001      	b.n	8004bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	2300      	movs	r3, #0
 8004be6:	9303      	str	r3, [sp, #12]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f80f 	bl	8004c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bfe:	69f8      	ldr	r0, [r7, #28]
 8004c00:	f000 f8ac 	bl	8004d5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c04:	2301      	movs	r3, #1
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	e002      	b.n	8004c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c10:	69bb      	ldr	r3, [r7, #24]
	}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	3b01      	subs	r3, #1
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	617b      	str	r3, [r7, #20]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01f      	beq.n	8004cac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e012      	b.n	8004c98 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	3334      	adds	r3, #52	@ 0x34
 8004c82:	460a      	mov	r2, r1
 8004c84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	d9e9      	bls.n	8004c72 <prvInitialiseNewTask+0x56>
 8004c9e:	e000      	b.n	8004ca2 <prvInitialiseNewTask+0x86>
			{
				break;
 8004ca0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004caa:	e003      	b.n	8004cb4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d901      	bls.n	8004cbe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cba:	2306      	movs	r3, #6
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	2200      	movs	r2, #0
 8004cce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe ff4a 	bl	8003b6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	3318      	adds	r3, #24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe ff45 	bl	8003b6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	f1c3 0207 	rsb	r2, r3, #7
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	334c      	adds	r3, #76	@ 0x4c
 8004d0e:	224c      	movs	r2, #76	@ 0x4c
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fa26 	bl	8006164 <memset>
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d50 <prvInitialiseNewTask+0x134>)
 8004d1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	4a0c      	ldr	r2, [pc, #48]	@ (8004d54 <prvInitialiseNewTask+0x138>)
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	4a0c      	ldr	r2, [pc, #48]	@ (8004d58 <prvInitialiseNewTask+0x13c>)
 8004d28:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	69b8      	ldr	r0, [r7, #24]
 8004d30:	f7fe ffae 	bl	8003c90 <pxPortInitialiseStack>
 8004d34:	4602      	mov	r2, r0
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d46:	bf00      	nop
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20001970 	.word	0x20001970
 8004d54:	200019d8 	.word	0x200019d8
 8004d58:	20001a40 	.word	0x20001a40

08004d5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d64:	f7ff f882 	bl	8003e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d68:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <prvAddNewTaskToReadyList+0xb8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a29      	ldr	r2, [pc, #164]	@ (8004e14 <prvAddNewTaskToReadyList+0xb8>)
 8004d70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d72:	4b29      	ldr	r3, [pc, #164]	@ (8004e18 <prvAddNewTaskToReadyList+0xbc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d7a:	4a27      	ldr	r2, [pc, #156]	@ (8004e18 <prvAddNewTaskToReadyList+0xbc>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <prvAddNewTaskToReadyList+0xb8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d110      	bne.n	8004daa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d88:	f000 fc22 	bl	80055d0 <prvInitialiseTaskLists>
 8004d8c:	e00d      	b.n	8004daa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d8e:	4b23      	ldr	r3, [pc, #140]	@ (8004e1c <prvAddNewTaskToReadyList+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d96:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <prvAddNewTaskToReadyList+0xbc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d802      	bhi.n	8004daa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004da4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <prvAddNewTaskToReadyList+0xbc>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <prvAddNewTaskToReadyList+0xc4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3301      	adds	r3, #1
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <prvAddNewTaskToReadyList+0xc4>)
 8004db2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <prvAddNewTaskToReadyList+0xc8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	4a18      	ldr	r2, [pc, #96]	@ (8004e24 <prvAddNewTaskToReadyList+0xc8>)
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <prvAddNewTaskToReadyList+0xcc>)
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fe fed2 	bl	8003b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004de2:	f7ff f873 	bl	8003ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <prvAddNewTaskToReadyList+0xc0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00e      	beq.n	8004e0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dee:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <prvAddNewTaskToReadyList+0xbc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d207      	bcs.n	8004e0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <prvAddNewTaskToReadyList+0xd0>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20001848 	.word	0x20001848
 8004e18:	20001748 	.word	0x20001748
 8004e1c:	20001854 	.word	0x20001854
 8004e20:	20001864 	.word	0x20001864
 8004e24:	20001850 	.word	0x20001850
 8004e28:	2000174c 	.word	0x2000174c
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d018      	beq.n	8004e74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <vTaskDelay+0x64>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <vTaskDelay+0x32>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e62:	f000 f88b 	bl	8004f7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e66:	2100      	movs	r1, #0
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fd1b 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e6e:	f000 f893 	bl	8004f98 <xTaskResumeAll>
 8004e72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e7a:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <vTaskDelay+0x68>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20001870 	.word	0x20001870
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	@ 0x28
 8004ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eaa:	463a      	mov	r2, r7
 8004eac:	1d39      	adds	r1, r7, #4
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb febc 	bl	8000c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	9202      	str	r2, [sp, #8]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	460a      	mov	r2, r1
 8004eca:	4924      	ldr	r1, [pc, #144]	@ (8004f5c <vTaskStartScheduler+0xc0>)
 8004ecc:	4824      	ldr	r0, [pc, #144]	@ (8004f60 <vTaskStartScheduler+0xc4>)
 8004ece:	f7ff fdff 	bl	8004ad0 <xTaskCreateStatic>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <vTaskStartScheduler+0xc8>)
 8004ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ed8:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <vTaskStartScheduler+0xc8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e001      	b.n	8004eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ef0:	f000 fd3e 	bl	8005970 <xTimerCreateTimerTask>
 8004ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d11b      	bne.n	8004f34 <vTaskStartScheduler+0x98>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	613b      	str	r3, [r7, #16]
}
 8004f0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f10:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <vTaskStartScheduler+0xcc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	334c      	adds	r3, #76	@ 0x4c
 8004f16:	4a15      	ldr	r2, [pc, #84]	@ (8004f6c <vTaskStartScheduler+0xd0>)
 8004f18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <vTaskStartScheduler+0xd4>)
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <vTaskStartScheduler+0xd8>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f28:	4b13      	ldr	r3, [pc, #76]	@ (8004f78 <vTaskStartScheduler+0xdc>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f2e:	f7fe ff2b 	bl	8003d88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f32:	e00f      	b.n	8004f54 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f3a:	d10b      	bne.n	8004f54 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <vTaskStartScheduler+0xb4>
}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	08006c20 	.word	0x08006c20
 8004f60:	080055a1 	.word	0x080055a1
 8004f64:	2000186c 	.word	0x2000186c
 8004f68:	20001748 	.word	0x20001748
 8004f6c:	20000010 	.word	0x20000010
 8004f70:	20001868 	.word	0x20001868
 8004f74:	20001854 	.word	0x20001854
 8004f78:	2000184c 	.word	0x2000184c

08004f7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f80:	4b04      	ldr	r3, [pc, #16]	@ (8004f94 <vTaskSuspendAll+0x18>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	4a03      	ldr	r2, [pc, #12]	@ (8004f94 <vTaskSuspendAll+0x18>)
 8004f88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20001870 	.word	0x20001870

08004f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fa6:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <xTaskResumeAll+0x118>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	603b      	str	r3, [r7, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fc6:	f7fe ff51 	bl	8003e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fca:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <xTaskResumeAll+0x118>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	4a37      	ldr	r2, [pc, #220]	@ (80050b0 <xTaskResumeAll+0x118>)
 8004fd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd4:	4b36      	ldr	r3, [pc, #216]	@ (80050b0 <xTaskResumeAll+0x118>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d161      	bne.n	80050a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fdc:	4b35      	ldr	r3, [pc, #212]	@ (80050b4 <xTaskResumeAll+0x11c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05d      	beq.n	80050a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe4:	e02e      	b.n	8005044 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe6:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <xTaskResumeAll+0x120>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fe22 	bl	8003c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fe1d 	bl	8003c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	2201      	movs	r2, #1
 8005008:	409a      	lsls	r2, r3
 800500a:	4b2c      	ldr	r3, [pc, #176]	@ (80050bc <xTaskResumeAll+0x124>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <xTaskResumeAll+0x124>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a27      	ldr	r2, [pc, #156]	@ (80050c0 <xTaskResumeAll+0x128>)
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe fdab 	bl	8003b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005034:	4b23      	ldr	r3, [pc, #140]	@ (80050c4 <xTaskResumeAll+0x12c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800503e:	4b22      	ldr	r3, [pc, #136]	@ (80050c8 <xTaskResumeAll+0x130>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005044:	4b1c      	ldr	r3, [pc, #112]	@ (80050b8 <xTaskResumeAll+0x120>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1cc      	bne.n	8004fe6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005052:	f000 fb61 	bl	8005718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005056:	4b1d      	ldr	r3, [pc, #116]	@ (80050cc <xTaskResumeAll+0x134>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005062:	f000 f845 	bl	80050f0 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800506c:	4b16      	ldr	r3, [pc, #88]	@ (80050c8 <xTaskResumeAll+0x130>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3b01      	subs	r3, #1
 8005076:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <xTaskResumeAll+0x134>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005084:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <xTaskResumeAll+0x130>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005090:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <xTaskResumeAll+0x138>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050a0:	f7fe ff14 	bl	8003ecc <vPortExitCritical>

	return xAlreadyYielded;
 80050a4:	68bb      	ldr	r3, [r7, #8]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20001870 	.word	0x20001870
 80050b4:	20001848 	.word	0x20001848
 80050b8:	20001808 	.word	0x20001808
 80050bc:	20001850 	.word	0x20001850
 80050c0:	2000174c 	.word	0x2000174c
 80050c4:	20001748 	.word	0x20001748
 80050c8:	2000185c 	.word	0x2000185c
 80050cc:	20001858 	.word	0x20001858
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050da:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <xTaskGetTickCount+0x18>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050e0:	687b      	ldr	r3, [r7, #4]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	2000184c 	.word	0x2000184c

080050f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005238 <xTaskIncrementTick+0x148>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 808f 	bne.w	8005222 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005104:	4b4d      	ldr	r3, [pc, #308]	@ (800523c <xTaskIncrementTick+0x14c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800510c:	4a4b      	ldr	r2, [pc, #300]	@ (800523c <xTaskIncrementTick+0x14c>)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d121      	bne.n	800515c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005118:	4b49      	ldr	r3, [pc, #292]	@ (8005240 <xTaskIncrementTick+0x150>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	603b      	str	r3, [r7, #0]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <xTaskIncrementTick+0x46>
 800513a:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <xTaskIncrementTick+0x150>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	4b40      	ldr	r3, [pc, #256]	@ (8005244 <xTaskIncrementTick+0x154>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a3e      	ldr	r2, [pc, #248]	@ (8005240 <xTaskIncrementTick+0x150>)
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4a3e      	ldr	r2, [pc, #248]	@ (8005244 <xTaskIncrementTick+0x154>)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b3e      	ldr	r3, [pc, #248]	@ (8005248 <xTaskIncrementTick+0x158>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a3c      	ldr	r2, [pc, #240]	@ (8005248 <xTaskIncrementTick+0x158>)
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	f000 fade 	bl	8005718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800515c:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <xTaskIncrementTick+0x15c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d348      	bcc.n	80051f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005166:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <xTaskIncrementTick+0x150>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005170:	4b36      	ldr	r3, [pc, #216]	@ (800524c <xTaskIncrementTick+0x15c>)
 8005172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005176:	601a      	str	r2, [r3, #0]
					break;
 8005178:	e03e      	b.n	80051f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517a:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <xTaskIncrementTick+0x150>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d203      	bcs.n	800519a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005192:	4a2e      	ldr	r2, [pc, #184]	@ (800524c <xTaskIncrementTick+0x15c>)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005198:	e02e      	b.n	80051f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3304      	adds	r3, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fd4c 	bl	8003c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	3318      	adds	r3, #24
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fd43 	bl	8003c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	2201      	movs	r2, #1
 80051bc:	409a      	lsls	r2, r3
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <xTaskIncrementTick+0x160>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	4a22      	ldr	r2, [pc, #136]	@ (8005250 <xTaskIncrementTick+0x160>)
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <xTaskIncrementTick+0x164>)
 80051d6:	441a      	add	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7fe fcd1 	bl	8003b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <xTaskIncrementTick+0x168>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3b9      	bcc.n	8005166 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80051f2:	2301      	movs	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f6:	e7b6      	b.n	8005166 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051f8:	4b17      	ldr	r3, [pc, #92]	@ (8005258 <xTaskIncrementTick+0x168>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	4915      	ldr	r1, [pc, #84]	@ (8005254 <xTaskIncrementTick+0x164>)
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d901      	bls.n	8005214 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <xTaskIncrementTick+0x16c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e004      	b.n	800522c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005222:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <xTaskIncrementTick+0x170>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3301      	adds	r3, #1
 8005228:	4a0d      	ldr	r2, [pc, #52]	@ (8005260 <xTaskIncrementTick+0x170>)
 800522a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800522c:	697b      	ldr	r3, [r7, #20]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20001870 	.word	0x20001870
 800523c:	2000184c 	.word	0x2000184c
 8005240:	20001800 	.word	0x20001800
 8005244:	20001804 	.word	0x20001804
 8005248:	20001860 	.word	0x20001860
 800524c:	20001868 	.word	0x20001868
 8005250:	20001850 	.word	0x20001850
 8005254:	2000174c 	.word	0x2000174c
 8005258:	20001748 	.word	0x20001748
 800525c:	2000185c 	.word	0x2000185c
 8005260:	20001858 	.word	0x20001858

08005264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800526a:	4b29      	ldr	r3, [pc, #164]	@ (8005310 <vTaskSwitchContext+0xac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005272:	4b28      	ldr	r3, [pc, #160]	@ (8005314 <vTaskSwitchContext+0xb0>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005278:	e045      	b.n	8005306 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800527a:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <vTaskSwitchContext+0xb0>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005280:	4b25      	ldr	r3, [pc, #148]	@ (8005318 <vTaskSwitchContext+0xb4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	fab3 f383 	clz	r3, r3
 800528c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	f1c3 031f 	rsb	r3, r3, #31
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	4921      	ldr	r1, [pc, #132]	@ (800531c <vTaskSwitchContext+0xb8>)
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	607b      	str	r3, [r7, #4]
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <vTaskSwitchContext+0x5a>
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a13      	ldr	r2, [pc, #76]	@ (800531c <vTaskSwitchContext+0xb8>)
 80052ce:	4413      	add	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3308      	adds	r3, #8
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d104      	bne.n	80052f2 <vTaskSwitchContext+0x8e>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <vTaskSwitchContext+0xbc>)
 80052fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052fc:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <vTaskSwitchContext+0xbc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	334c      	adds	r3, #76	@ 0x4c
 8005302:	4a08      	ldr	r2, [pc, #32]	@ (8005324 <vTaskSwitchContext+0xc0>)
 8005304:	6013      	str	r3, [r2, #0]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	20001870 	.word	0x20001870
 8005314:	2000185c 	.word	0x2000185c
 8005318:	20001850 	.word	0x20001850
 800531c:	2000174c 	.word	0x2000174c
 8005320:	20001748 	.word	0x20001748
 8005324:	20000010 	.word	0x20000010

08005328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60fb      	str	r3, [r7, #12]
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005350:	4b07      	ldr	r3, [pc, #28]	@ (8005370 <vTaskPlaceOnEventList+0x48>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3318      	adds	r3, #24
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fe fc37 	bl	8003bcc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800535e:	2101      	movs	r1, #1
 8005360:	6838      	ldr	r0, [r7, #0]
 8005362:	f000 fa9f 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20001748 	.word	0x20001748

08005374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800539e:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3318      	adds	r3, #24
 80053a4:	4619      	mov	r1, r3
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fe fbed 	bl	8003b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	68b8      	ldr	r0, [r7, #8]
 80053bc:	f000 fa72 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
	}
 80053c0:	bf00      	nop
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20001748 	.word	0x20001748

080053cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	60fb      	str	r3, [r7, #12]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3318      	adds	r3, #24
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fc1c 	bl	8003c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005404:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <xTaskRemoveFromEventList+0xb0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11c      	bne.n	8005446 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fc13 	bl	8003c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	2201      	movs	r2, #1
 800541c:	409a      	lsls	r2, r3
 800541e:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <xTaskRemoveFromEventList+0xb4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	4a16      	ldr	r2, [pc, #88]	@ (8005480 <xTaskRemoveFromEventList+0xb4>)
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a13      	ldr	r2, [pc, #76]	@ (8005484 <xTaskRemoveFromEventList+0xb8>)
 8005436:	441a      	add	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f7fe fba1 	bl	8003b86 <vListInsertEnd>
 8005444:	e005      	b.n	8005452 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3318      	adds	r3, #24
 800544a:	4619      	mov	r1, r3
 800544c:	480e      	ldr	r0, [pc, #56]	@ (8005488 <xTaskRemoveFromEventList+0xbc>)
 800544e:	f7fe fb9a 	bl	8003b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <xTaskRemoveFromEventList+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	429a      	cmp	r2, r3
 800545e:	d905      	bls.n	800546c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005464:	4b0a      	ldr	r3, [pc, #40]	@ (8005490 <xTaskRemoveFromEventList+0xc4>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e001      	b.n	8005470 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005470:	697b      	ldr	r3, [r7, #20]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20001870 	.word	0x20001870
 8005480:	20001850 	.word	0x20001850
 8005484:	2000174c 	.word	0x2000174c
 8005488:	20001808 	.word	0x20001808
 800548c:	20001748 	.word	0x20001748
 8005490:	2000185c 	.word	0x2000185c

08005494 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <vTaskInternalSetTimeOutState+0x24>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054a4:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <vTaskInternalSetTimeOutState+0x28>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	605a      	str	r2, [r3, #4]
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20001860 	.word	0x20001860
 80054bc:	2000184c 	.word	0x2000184c

080054c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005506:	f7fe fcb1 	bl	8003e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800550a:	4b1d      	ldr	r3, [pc, #116]	@ (8005580 <xTaskCheckForTimeOut+0xc0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005522:	d102      	bne.n	800552a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e023      	b.n	8005572 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <xTaskCheckForTimeOut+0xc4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d007      	beq.n	8005546 <xTaskCheckForTimeOut+0x86>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e015      	b.n	8005572 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	429a      	cmp	r2, r3
 800554e:	d20b      	bcs.n	8005568 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff99 	bl	8005494 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e004      	b.n	8005572 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800556e:	2301      	movs	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005572:	f7fe fcab 	bl	8003ecc <vPortExitCritical>

	return xReturn;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	2000184c 	.word	0x2000184c
 8005584:	20001860 	.word	0x20001860

08005588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800558c:	4b03      	ldr	r3, [pc, #12]	@ (800559c <vTaskMissedYield+0x14>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000185c 	.word	0x2000185c

080055a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055a8:	f000 f852 	bl	8005650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <prvIdleTask+0x28>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d9f9      	bls.n	80055a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055b4:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <prvIdleTask+0x2c>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055c4:	e7f0      	b.n	80055a8 <prvIdleTask+0x8>
 80055c6:	bf00      	nop
 80055c8:	2000174c 	.word	0x2000174c
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	e00c      	b.n	80055f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a12      	ldr	r2, [pc, #72]	@ (8005630 <prvInitialiseTaskLists+0x60>)
 80055e8:	4413      	add	r3, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe faa0 	bl	8003b30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3301      	adds	r3, #1
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d9ef      	bls.n	80055dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055fc:	480d      	ldr	r0, [pc, #52]	@ (8005634 <prvInitialiseTaskLists+0x64>)
 80055fe:	f7fe fa97 	bl	8003b30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005602:	480d      	ldr	r0, [pc, #52]	@ (8005638 <prvInitialiseTaskLists+0x68>)
 8005604:	f7fe fa94 	bl	8003b30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005608:	480c      	ldr	r0, [pc, #48]	@ (800563c <prvInitialiseTaskLists+0x6c>)
 800560a:	f7fe fa91 	bl	8003b30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800560e:	480c      	ldr	r0, [pc, #48]	@ (8005640 <prvInitialiseTaskLists+0x70>)
 8005610:	f7fe fa8e 	bl	8003b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005614:	480b      	ldr	r0, [pc, #44]	@ (8005644 <prvInitialiseTaskLists+0x74>)
 8005616:	f7fe fa8b 	bl	8003b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800561a:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <prvInitialiseTaskLists+0x78>)
 800561c:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <prvInitialiseTaskLists+0x64>)
 800561e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005620:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <prvInitialiseTaskLists+0x7c>)
 8005622:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <prvInitialiseTaskLists+0x68>)
 8005624:	601a      	str	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000174c 	.word	0x2000174c
 8005634:	200017d8 	.word	0x200017d8
 8005638:	200017ec 	.word	0x200017ec
 800563c:	20001808 	.word	0x20001808
 8005640:	2000181c 	.word	0x2000181c
 8005644:	20001834 	.word	0x20001834
 8005648:	20001800 	.word	0x20001800
 800564c:	20001804 	.word	0x20001804

08005650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005656:	e019      	b.n	800568c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005658:	f7fe fc08 	bl	8003e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565c:	4b10      	ldr	r3, [pc, #64]	@ (80056a0 <prvCheckTasksWaitingTermination+0x50>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fae7 	bl	8003c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <prvCheckTasksWaitingTermination+0x54>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3b01      	subs	r3, #1
 8005674:	4a0b      	ldr	r2, [pc, #44]	@ (80056a4 <prvCheckTasksWaitingTermination+0x54>)
 8005676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005678:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	4a0a      	ldr	r2, [pc, #40]	@ (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 8005680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005682:	f7fe fc23 	bl	8003ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f810 	bl	80056ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <prvCheckTasksWaitingTermination+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e1      	bne.n	8005658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2000181c 	.word	0x2000181c
 80056a4:	20001848 	.word	0x20001848
 80056a8:	20001830 	.word	0x20001830

080056ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	334c      	adds	r3, #76	@ 0x4c
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fd5b 	bl	8006174 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe f911 	bl	80038f4 <vPortFree>
				vPortFree( pxTCB );
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fe f90e 	bl	80038f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056d8:	e019      	b.n	800570e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d103      	bne.n	80056ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fe f905 	bl	80038f4 <vPortFree>
	}
 80056ea:	e010      	b.n	800570e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d00b      	beq.n	800570e <prvDeleteTCB+0x62>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60fb      	str	r3, [r7, #12]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <prvDeleteTCB+0x5e>
	}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <prvResetNextTaskUnblockTime+0x38>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <prvResetNextTaskUnblockTime+0x3c>)
 800572a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800572e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005730:	e008      	b.n	8005744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005732:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <prvResetNextTaskUnblockTime+0x38>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <prvResetNextTaskUnblockTime+0x3c>)
 8005742:	6013      	str	r3, [r2, #0]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20001800 	.word	0x20001800
 8005754:	20001868 	.word	0x20001868

08005758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <xTaskGetSchedulerState+0x34>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005766:	2301      	movs	r3, #1
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	e008      	b.n	800577e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576c:	4b08      	ldr	r3, [pc, #32]	@ (8005790 <xTaskGetSchedulerState+0x38>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005774:	2302      	movs	r3, #2
 8005776:	607b      	str	r3, [r7, #4]
 8005778:	e001      	b.n	800577e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800577a:	2300      	movs	r3, #0
 800577c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800577e:	687b      	ldr	r3, [r7, #4]
	}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20001854 	.word	0x20001854
 8005790:	20001870 	.word	0x20001870

08005794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d070      	beq.n	800588c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <xTaskPriorityDisinherit+0x104>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d00b      	beq.n	80057cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60bb      	str	r3, [r7, #8]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	429a      	cmp	r2, r3
 8005800:	d044      	beq.n	800588c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005806:	2b00      	cmp	r3, #0
 8005808:	d140      	bne.n	800588c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3304      	adds	r3, #4
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fa14 	bl	8003c3c <uxListRemove>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d115      	bne.n	8005846 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581e:	491f      	ldr	r1, [pc, #124]	@ (800589c <xTaskPriorityDisinherit+0x108>)
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xTaskPriorityDisinherit+0xb2>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	4b18      	ldr	r3, [pc, #96]	@ (80058a0 <xTaskPriorityDisinherit+0x10c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4013      	ands	r3, r2
 8005842:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <xTaskPriorityDisinherit+0x10c>)
 8005844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	f1c3 0207 	rsb	r2, r3, #7
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	2201      	movs	r2, #1
 8005860:	409a      	lsls	r2, r3
 8005862:	4b0f      	ldr	r3, [pc, #60]	@ (80058a0 <xTaskPriorityDisinherit+0x10c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	4a0d      	ldr	r2, [pc, #52]	@ (80058a0 <xTaskPriorityDisinherit+0x10c>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <xTaskPriorityDisinherit+0x108>)
 800587a:	441a      	add	r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fe f97f 	bl	8003b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800588c:	697b      	ldr	r3, [r7, #20]
	}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20001748 	.word	0x20001748
 800589c:	2000174c 	.word	0x2000174c
 80058a0:	20001850 	.word	0x20001850

080058a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058ae:	4b29      	ldr	r3, [pc, #164]	@ (8005954 <prvAddCurrentTaskToDelayedList+0xb0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058b4:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f9be 	bl	8003c3c <uxListRemove>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058c6:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	2201      	movs	r2, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43da      	mvns	r2, r3
 80058d4:	4b21      	ldr	r3, [pc, #132]	@ (800595c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	4a20      	ldr	r2, [pc, #128]	@ (800595c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e4:	d10a      	bne.n	80058fc <prvAddCurrentTaskToDelayedList+0x58>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	481a      	ldr	r0, [pc, #104]	@ (8005960 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058f6:	f7fe f946 	bl	8003b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058fa:	e026      	b.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005904:	4b14      	ldr	r3, [pc, #80]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d209      	bcs.n	8005928 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005914:	4b13      	ldr	r3, [pc, #76]	@ (8005964 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f7fe f953 	bl	8003bcc <vListInsert>
}
 8005926:	e010      	b.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005928:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <prvAddCurrentTaskToDelayedList+0xc4>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f7fe f949 	bl	8003bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <prvAddCurrentTaskToDelayedList+0xc8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d202      	bcs.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005944:	4a09      	ldr	r2, [pc, #36]	@ (800596c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000184c 	.word	0x2000184c
 8005958:	20001748 	.word	0x20001748
 800595c:	20001850 	.word	0x20001850
 8005960:	20001834 	.word	0x20001834
 8005964:	20001804 	.word	0x20001804
 8005968:	20001800 	.word	0x20001800
 800596c:	20001868 	.word	0x20001868

08005970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	@ 0x28
 8005974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800597a:	f000 fb93 	bl	80060a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <xTimerCreateTimerTask+0x84>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800598e:	1d3a      	adds	r2, r7, #4
 8005990:	f107 0108 	add.w	r1, r7, #8
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	4618      	mov	r0, r3
 800599a:	f7fb f961 	bl	8000c60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	9202      	str	r2, [sp, #8]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	2302      	movs	r3, #2
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	460a      	mov	r2, r1
 80059b0:	4911      	ldr	r1, [pc, #68]	@ (80059f8 <xTimerCreateTimerTask+0x88>)
 80059b2:	4812      	ldr	r0, [pc, #72]	@ (80059fc <xTimerCreateTimerTask+0x8c>)
 80059b4:	f7ff f88c 	bl	8004ad0 <xTaskCreateStatic>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4a11      	ldr	r2, [pc, #68]	@ (8005a00 <xTimerCreateTimerTask+0x90>)
 80059bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059be:	4b10      	ldr	r3, [pc, #64]	@ (8005a00 <xTimerCreateTimerTask+0x90>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	613b      	str	r3, [r7, #16]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200018a4 	.word	0x200018a4
 80059f8:	08006c28 	.word	0x08006c28
 80059fc:	08005c79 	.word	0x08005c79
 8005a00:	200018a8 	.word	0x200018a8

08005a04 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a12:	2028      	movs	r0, #40	@ 0x28
 8005a14:	f7fd fea0 	bl	8003758 <pvPortMalloc>
 8005a18:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f845 	bl	8005ac6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005a3c:	697b      	ldr	r3, [r7, #20]
	}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08a      	sub	sp, #40	@ 0x28
 8005a4a:	af02      	add	r7, sp, #8
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005a54:	2328      	movs	r3, #40	@ 0x28
 8005a56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b28      	cmp	r3, #40	@ 0x28
 8005a5c:	d00b      	beq.n	8005a76 <xTimerCreateStatic+0x30>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	61bb      	str	r3, [r7, #24]
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	e7fd      	b.n	8005a72 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <xTimerCreateStatic+0x50>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617b      	str	r3, [r7, #20]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f805 	bl	8005ac6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005abc:	69fb      	ldr	r3, [r7, #28]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	617b      	str	r3, [r7, #20]
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005af8:	f000 fad4 	bl	80060a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe f828 	bl	8003b6e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005b36:	bf00      	nop
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	@ 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	bf00      	nop
 8005b6e:	e7fd      	b.n	8005b6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b70:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <xTimerGenericCommand+0x98>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02a      	beq.n	8005bce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b05      	cmp	r3, #5
 8005b88:	dc18      	bgt.n	8005bbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b8a:	f7ff fde5 	bl	8005758 <xTaskGetSchedulerState>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d109      	bne.n	8005ba8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b94:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <xTimerGenericCommand+0x98>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	f107 0114 	add.w	r1, r7, #20
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba0:	f7fe fba8 	bl	80042f4 <xQueueGenericSend>
 8005ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ba6:	e012      	b.n	8005bce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <xTimerGenericCommand+0x98>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	f107 0114 	add.w	r1, r7, #20
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f7fe fb9e 	bl	80042f4 <xQueueGenericSend>
 8005bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bba:	e008      	b.n	8005bce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <xTimerGenericCommand+0x98>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	f107 0114 	add.w	r1, r7, #20
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	f7fe fc96 	bl	80044f8 <xQueueGenericSendFromISR>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3728      	adds	r7, #40	@ 0x28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200018a4 	.word	0x200018a4

08005bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be6:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <prvProcessExpiredTimer+0x98>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe f821 	bl	8003c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d023      	beq.n	8005c50 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	18d1      	adds	r1, r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	6978      	ldr	r0, [r7, #20]
 8005c16:	f000 f8d3 	bl	8005dc0 <prvInsertTimerInActiveList>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d020      	beq.n	8005c62 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6978      	ldr	r0, [r7, #20]
 8005c2c:	f7ff ff88 	bl	8005b40 <xTimerGenericCommand>
 8005c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d114      	bne.n	8005c62 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	60fb      	str	r3, [r7, #12]
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	4798      	blx	r3
}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	2000189c 	.word	0x2000189c

08005c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f859 	bl	8005d3c <prvGetNextExpireTime>
 8005c8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f805 	bl	8005ca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c96:	f000 f8d5 	bl	8005e44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c9a:	bf00      	nop
 8005c9c:	e7f0      	b.n	8005c80 <prvTimerTask+0x8>
	...

08005ca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005caa:	f7ff f967 	bl	8004f7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f864 	bl	8005d80 <prvSampleTimeNow>
 8005cb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d130      	bne.n	8005d22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <prvProcessTimerOrBlockTask+0x3c>
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d806      	bhi.n	8005cdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cce:	f7ff f963 	bl	8004f98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff81 	bl	8005bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cda:	e024      	b.n	8005d26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <prvProcessTimerOrBlockTask+0x90>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <prvProcessTimerOrBlockTask+0x50>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <prvProcessTimerOrBlockTask+0x52>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d34 <prvProcessTimerOrBlockTask+0x94>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	4619      	mov	r1, r3
 8005d02:	f7fe feb1 	bl	8004a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d06:	f7ff f947 	bl	8004f98 <xTaskResumeAll>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d10:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <prvProcessTimerOrBlockTask+0x98>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
}
 8005d20:	e001      	b.n	8005d26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d22:	f7ff f939 	bl	8004f98 <xTaskResumeAll>
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200018a0 	.word	0x200018a0
 8005d34:	200018a4 	.word	0x200018a4
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d44:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <prvGetNextExpireTime+0x40>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <prvGetNextExpireTime+0x16>
 8005d4e:	2201      	movs	r2, #1
 8005d50:	e000      	b.n	8005d54 <prvGetNextExpireTime+0x18>
 8005d52:	2200      	movs	r2, #0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d60:	4b06      	ldr	r3, [pc, #24]	@ (8005d7c <prvGetNextExpireTime+0x40>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e001      	b.n	8005d70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	2000189c 	.word	0x2000189c

08005d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d88:	f7ff f9a4 	bl	80050d4 <xTaskGetTickCount>
 8005d8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <prvSampleTimeNow+0x3c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d205      	bcs.n	8005da4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d98:	f000 f91e 	bl	8005fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e002      	b.n	8005daa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005daa:	4a04      	ldr	r2, [pc, #16]	@ (8005dbc <prvSampleTimeNow+0x3c>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200018ac 	.word	0x200018ac

08005dc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d812      	bhi.n	8005e0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	e01b      	b.n	8005e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <prvInsertTimerInActiveList+0x7c>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7fd fee1 	bl	8003bcc <vListInsert>
 8005e0a:	e012      	b.n	8005e32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d206      	bcs.n	8005e22 <prvInsertTimerInActiveList+0x62>
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e007      	b.n	8005e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e22:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <prvInsertTimerInActiveList+0x80>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7fd fecd 	bl	8003bcc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e32:	697b      	ldr	r3, [r7, #20]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200018a0 	.word	0x200018a0
 8005e40:	2000189c 	.word	0x2000189c

08005e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	@ 0x30
 8005e48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e4a:	e0b2      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f2c0 80af 	blt.w	8005fb2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	3304      	adds	r3, #4
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fd fee9 	bl	8003c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff87 	bl	8005d80 <prvSampleTimeNow>
 8005e72:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	f200 8098 	bhi.w	8005fac <prvProcessReceivedCommands+0x168>
 8005e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <prvProcessReceivedCommands+0x40>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005f23 	.word	0x08005f23
 8005e94:	08005f37 	.word	0x08005f37
 8005e98:	08005f83 	.word	0x08005f83
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ead 	.word	0x08005ead
 8005ea4:	08005f23 	.word	0x08005f23
 8005ea8:	08005f37 	.word	0x08005f37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	18d1      	adds	r1, r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a3a      	ldr	r2, [r7, #32]
 8005eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ecc:	f7ff ff78 	bl	8005dc0 <prvInsertTimerInActiveList>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d06c      	beq.n	8005fb0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005edc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d061      	beq.n	8005fb0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	441a      	add	r2, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005efe:	f7ff fe1f 	bl	8005b40 <xTimerGenericCommand>
 8005f02:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d152      	bne.n	8005fb0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	61bb      	str	r3, [r7, #24]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005f34:	e03d      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	617b      	str	r3, [r7, #20]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	18d1      	adds	r1, r2, r3
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f7c:	f7ff ff20 	bl	8005dc0 <prvInsertTimerInActiveList>
					break;
 8005f80:	e017      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005f90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f92:	f7fd fcaf 	bl	80038f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f96:	e00c      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005faa:	e002      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <prvProcessReceivedCommands+0x16e>
					break;
 8005fb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fb2:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <prvProcessReceivedCommands+0x190>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f107 0108 	add.w	r1, r7, #8
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fb39 	bl	8004634 <xQueueReceive>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f47f af41 	bne.w	8005e4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	3728      	adds	r7, #40	@ 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200018a4 	.word	0x200018a4

08005fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fde:	e049      	b.n	8006074 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b2c      	ldr	r3, [pc, #176]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fd fe1f 	bl	8003c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02f      	beq.n	8006074 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	d90e      	bls.n	8006044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006032:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7fd fdc5 	bl	8003bcc <vListInsert>
 8006042:	e017      	b.n	8006074 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	2100      	movs	r1, #0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fd76 	bl	8005b40 <xTimerGenericCommand>
 8006054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	603b      	str	r3, [r7, #0]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006074:	4b09      	ldr	r3, [pc, #36]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1b0      	bne.n	8005fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800607e:	4b07      	ldr	r3, [pc, #28]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006084:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <prvSwitchTimerLists+0xc8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a04      	ldr	r2, [pc, #16]	@ (800609c <prvSwitchTimerLists+0xc4>)
 800608a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800608c:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <prvSwitchTimerLists+0xc8>)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6013      	str	r3, [r2, #0]
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000189c 	.word	0x2000189c
 80060a0:	200018a0 	.word	0x200018a0

080060a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060aa:	f7fd fedf 	bl	8003e6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d120      	bne.n	80060f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060b6:	4814      	ldr	r0, [pc, #80]	@ (8006108 <prvCheckForValidListAndQueue+0x64>)
 80060b8:	f7fd fd3a 	bl	8003b30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060bc:	4813      	ldr	r0, [pc, #76]	@ (800610c <prvCheckForValidListAndQueue+0x68>)
 80060be:	f7fd fd37 	bl	8003b30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <prvCheckForValidListAndQueue+0x6c>)
 80060c4:	4a10      	ldr	r2, [pc, #64]	@ (8006108 <prvCheckForValidListAndQueue+0x64>)
 80060c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060c8:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <prvCheckForValidListAndQueue+0x70>)
 80060ca:	4a10      	ldr	r2, [pc, #64]	@ (800610c <prvCheckForValidListAndQueue+0x68>)
 80060cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4b11      	ldr	r3, [pc, #68]	@ (8006118 <prvCheckForValidListAndQueue+0x74>)
 80060d4:	4a11      	ldr	r2, [pc, #68]	@ (800611c <prvCheckForValidListAndQueue+0x78>)
 80060d6:	210c      	movs	r1, #12
 80060d8:	200a      	movs	r0, #10
 80060da:	f7fe f833 	bl	8004144 <xQueueGenericCreateStatic>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060e4:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060ec:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	490b      	ldr	r1, [pc, #44]	@ (8006120 <prvCheckForValidListAndQueue+0x7c>)
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc90 	bl	8004a18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f7fd fee8 	bl	8003ecc <vPortExitCritical>
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200018a4 	.word	0x200018a4
 8006108:	20001874 	.word	0x20001874
 800610c:	20001888 	.word	0x20001888
 8006110:	2000189c 	.word	0x2000189c
 8006114:	200018a0 	.word	0x200018a0
 8006118:	20001928 	.word	0x20001928
 800611c:	200018b0 	.word	0x200018b0
 8006120:	08006c30 	.word	0x08006c30

08006124 <siprintf>:
 8006124:	b40e      	push	{r1, r2, r3}
 8006126:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800612a:	b500      	push	{lr}
 800612c:	b09c      	sub	sp, #112	@ 0x70
 800612e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006130:	9002      	str	r0, [sp, #8]
 8006132:	9006      	str	r0, [sp, #24]
 8006134:	9107      	str	r1, [sp, #28]
 8006136:	9104      	str	r1, [sp, #16]
 8006138:	4808      	ldr	r0, [pc, #32]	@ (800615c <siprintf+0x38>)
 800613a:	4909      	ldr	r1, [pc, #36]	@ (8006160 <siprintf+0x3c>)
 800613c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	6800      	ldr	r0, [r0, #0]
 8006144:	a902      	add	r1, sp, #8
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	f000 f9f6 	bl	8006538 <_svfiprintf_r>
 800614c:	2200      	movs	r2, #0
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	b01c      	add	sp, #112	@ 0x70
 8006154:	f85d eb04 	ldr.w	lr, [sp], #4
 8006158:	b003      	add	sp, #12
 800615a:	4770      	bx	lr
 800615c:	20000010 	.word	0x20000010
 8006160:	ffff0208 	.word	0xffff0208

08006164 <memset>:
 8006164:	4603      	mov	r3, r0
 8006166:	4402      	add	r2, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <_reclaim_reent>:
 8006174:	4b29      	ldr	r3, [pc, #164]	@ (800621c <_reclaim_reent+0xa8>)
 8006176:	b570      	push	{r4, r5, r6, lr}
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4604      	mov	r4, r0
 800617c:	4283      	cmp	r3, r0
 800617e:	d04b      	beq.n	8006218 <_reclaim_reent+0xa4>
 8006180:	69c3      	ldr	r3, [r0, #28]
 8006182:	b1ab      	cbz	r3, 80061b0 <_reclaim_reent+0x3c>
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	b16b      	cbz	r3, 80061a4 <_reclaim_reent+0x30>
 8006188:	2500      	movs	r5, #0
 800618a:	69e3      	ldr	r3, [r4, #28]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	5959      	ldr	r1, [r3, r5]
 8006190:	2900      	cmp	r1, #0
 8006192:	d13b      	bne.n	800620c <_reclaim_reent+0x98>
 8006194:	3504      	adds	r5, #4
 8006196:	2d80      	cmp	r5, #128	@ 0x80
 8006198:	d1f7      	bne.n	800618a <_reclaim_reent+0x16>
 800619a:	69e3      	ldr	r3, [r4, #28]
 800619c:	4620      	mov	r0, r4
 800619e:	68d9      	ldr	r1, [r3, #12]
 80061a0:	f000 f878 	bl	8006294 <_free_r>
 80061a4:	69e3      	ldr	r3, [r4, #28]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	b111      	cbz	r1, 80061b0 <_reclaim_reent+0x3c>
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f872 	bl	8006294 <_free_r>
 80061b0:	6961      	ldr	r1, [r4, #20]
 80061b2:	b111      	cbz	r1, 80061ba <_reclaim_reent+0x46>
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 f86d 	bl	8006294 <_free_r>
 80061ba:	69e1      	ldr	r1, [r4, #28]
 80061bc:	b111      	cbz	r1, 80061c4 <_reclaim_reent+0x50>
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 f868 	bl	8006294 <_free_r>
 80061c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80061c6:	b111      	cbz	r1, 80061ce <_reclaim_reent+0x5a>
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 f863 	bl	8006294 <_free_r>
 80061ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061d0:	b111      	cbz	r1, 80061d8 <_reclaim_reent+0x64>
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f85e 	bl	8006294 <_free_r>
 80061d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80061da:	b111      	cbz	r1, 80061e2 <_reclaim_reent+0x6e>
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 f859 	bl	8006294 <_free_r>
 80061e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80061e4:	b111      	cbz	r1, 80061ec <_reclaim_reent+0x78>
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 f854 	bl	8006294 <_free_r>
 80061ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80061ee:	b111      	cbz	r1, 80061f6 <_reclaim_reent+0x82>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f84f 	bl	8006294 <_free_r>
 80061f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061f8:	b111      	cbz	r1, 8006200 <_reclaim_reent+0x8c>
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f84a 	bl	8006294 <_free_r>
 8006200:	6a23      	ldr	r3, [r4, #32]
 8006202:	b14b      	cbz	r3, 8006218 <_reclaim_reent+0xa4>
 8006204:	4620      	mov	r0, r4
 8006206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800620a:	4718      	bx	r3
 800620c:	680e      	ldr	r6, [r1, #0]
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f840 	bl	8006294 <_free_r>
 8006214:	4631      	mov	r1, r6
 8006216:	e7bb      	b.n	8006190 <_reclaim_reent+0x1c>
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	bf00      	nop
 800621c:	20000010 	.word	0x20000010

08006220 <__errno>:
 8006220:	4b01      	ldr	r3, [pc, #4]	@ (8006228 <__errno+0x8>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000010 	.word	0x20000010

0800622c <__libc_init_array>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	2600      	movs	r6, #0
 8006230:	4d0c      	ldr	r5, [pc, #48]	@ (8006264 <__libc_init_array+0x38>)
 8006232:	4c0d      	ldr	r4, [pc, #52]	@ (8006268 <__libc_init_array+0x3c>)
 8006234:	1b64      	subs	r4, r4, r5
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	42a6      	cmp	r6, r4
 800623a:	d109      	bne.n	8006250 <__libc_init_array+0x24>
 800623c:	f000 fc78 	bl	8006b30 <_init>
 8006240:	2600      	movs	r6, #0
 8006242:	4d0a      	ldr	r5, [pc, #40]	@ (800626c <__libc_init_array+0x40>)
 8006244:	4c0a      	ldr	r4, [pc, #40]	@ (8006270 <__libc_init_array+0x44>)
 8006246:	1b64      	subs	r4, r4, r5
 8006248:	10a4      	asrs	r4, r4, #2
 800624a:	42a6      	cmp	r6, r4
 800624c:	d105      	bne.n	800625a <__libc_init_array+0x2e>
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	f855 3b04 	ldr.w	r3, [r5], #4
 8006254:	4798      	blx	r3
 8006256:	3601      	adds	r6, #1
 8006258:	e7ee      	b.n	8006238 <__libc_init_array+0xc>
 800625a:	f855 3b04 	ldr.w	r3, [r5], #4
 800625e:	4798      	blx	r3
 8006260:	3601      	adds	r6, #1
 8006262:	e7f2      	b.n	800624a <__libc_init_array+0x1e>
 8006264:	08006db0 	.word	0x08006db0
 8006268:	08006db0 	.word	0x08006db0
 800626c:	08006db0 	.word	0x08006db0
 8006270:	08006db4 	.word	0x08006db4

08006274 <__retarget_lock_acquire_recursive>:
 8006274:	4770      	bx	lr

08006276 <__retarget_lock_release_recursive>:
 8006276:	4770      	bx	lr

08006278 <memcpy>:
 8006278:	440a      	add	r2, r1
 800627a:	4291      	cmp	r1, r2
 800627c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006280:	d100      	bne.n	8006284 <memcpy+0xc>
 8006282:	4770      	bx	lr
 8006284:	b510      	push	{r4, lr}
 8006286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628a:	4291      	cmp	r1, r2
 800628c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006290:	d1f9      	bne.n	8006286 <memcpy+0xe>
 8006292:	bd10      	pop	{r4, pc}

08006294 <_free_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4605      	mov	r5, r0
 8006298:	2900      	cmp	r1, #0
 800629a:	d040      	beq.n	800631e <_free_r+0x8a>
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f0c      	subs	r4, r1, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfb8      	it	lt
 80062a6:	18e4      	addlt	r4, r4, r3
 80062a8:	f000 f8de 	bl	8006468 <__malloc_lock>
 80062ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006320 <_free_r+0x8c>)
 80062ae:	6813      	ldr	r3, [r2, #0]
 80062b0:	b933      	cbnz	r3, 80062c0 <_free_r+0x2c>
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	6014      	str	r4, [r2, #0]
 80062b6:	4628      	mov	r0, r5
 80062b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062bc:	f000 b8da 	b.w	8006474 <__malloc_unlock>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d908      	bls.n	80062d6 <_free_r+0x42>
 80062c4:	6820      	ldr	r0, [r4, #0]
 80062c6:	1821      	adds	r1, r4, r0
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf01      	itttt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	1809      	addeq	r1, r1, r0
 80062d2:	6021      	streq	r1, [r4, #0]
 80062d4:	e7ed      	b.n	80062b2 <_free_r+0x1e>
 80062d6:	461a      	mov	r2, r3
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	b10b      	cbz	r3, 80062e0 <_free_r+0x4c>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x42>
 80062e0:	6811      	ldr	r1, [r2, #0]
 80062e2:	1850      	adds	r0, r2, r1
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x6c>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	4401      	add	r1, r0
 80062ec:	1850      	adds	r0, r2, r1
 80062ee:	4283      	cmp	r3, r0
 80062f0:	6011      	str	r1, [r2, #0]
 80062f2:	d1e0      	bne.n	80062b6 <_free_r+0x22>
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	4408      	add	r0, r1
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	e7da      	b.n	80062b6 <_free_r+0x22>
 8006300:	d902      	bls.n	8006308 <_free_r+0x74>
 8006302:	230c      	movs	r3, #12
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	e7d6      	b.n	80062b6 <_free_r+0x22>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	1821      	adds	r1, r4, r0
 800630c:	428b      	cmp	r3, r1
 800630e:	bf01      	itttt	eq
 8006310:	6819      	ldreq	r1, [r3, #0]
 8006312:	685b      	ldreq	r3, [r3, #4]
 8006314:	1809      	addeq	r1, r1, r0
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	6054      	str	r4, [r2, #4]
 800631c:	e7cb      	b.n	80062b6 <_free_r+0x22>
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20001ab4 	.word	0x20001ab4

08006324 <sbrk_aligned>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4e0f      	ldr	r6, [pc, #60]	@ (8006364 <sbrk_aligned+0x40>)
 8006328:	460c      	mov	r4, r1
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	4605      	mov	r5, r0
 800632e:	b911      	cbnz	r1, 8006336 <sbrk_aligned+0x12>
 8006330:	f000 fbaa 	bl	8006a88 <_sbrk_r>
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 fba5 	bl	8006a88 <_sbrk_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d103      	bne.n	800634a <sbrk_aligned+0x26>
 8006342:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006346:	4620      	mov	r0, r4
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	1cc4      	adds	r4, r0, #3
 800634c:	f024 0403 	bic.w	r4, r4, #3
 8006350:	42a0      	cmp	r0, r4
 8006352:	d0f8      	beq.n	8006346 <sbrk_aligned+0x22>
 8006354:	1a21      	subs	r1, r4, r0
 8006356:	4628      	mov	r0, r5
 8006358:	f000 fb96 	bl	8006a88 <_sbrk_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d1f2      	bne.n	8006346 <sbrk_aligned+0x22>
 8006360:	e7ef      	b.n	8006342 <sbrk_aligned+0x1e>
 8006362:	bf00      	nop
 8006364:	20001ab0 	.word	0x20001ab0

08006368 <_malloc_r>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	1ccd      	adds	r5, r1, #3
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	3508      	adds	r5, #8
 8006374:	2d0c      	cmp	r5, #12
 8006376:	bf38      	it	cc
 8006378:	250c      	movcc	r5, #12
 800637a:	2d00      	cmp	r5, #0
 800637c:	4606      	mov	r6, r0
 800637e:	db01      	blt.n	8006384 <_malloc_r+0x1c>
 8006380:	42a9      	cmp	r1, r5
 8006382:	d904      	bls.n	800638e <_malloc_r+0x26>
 8006384:	230c      	movs	r3, #12
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	2000      	movs	r0, #0
 800638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006464 <_malloc_r+0xfc>
 8006392:	f000 f869 	bl	8006468 <__malloc_lock>
 8006396:	f8d8 3000 	ldr.w	r3, [r8]
 800639a:	461c      	mov	r4, r3
 800639c:	bb44      	cbnz	r4, 80063f0 <_malloc_r+0x88>
 800639e:	4629      	mov	r1, r5
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff ffbf 	bl	8006324 <sbrk_aligned>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	4604      	mov	r4, r0
 80063aa:	d158      	bne.n	800645e <_malloc_r+0xf6>
 80063ac:	f8d8 4000 	ldr.w	r4, [r8]
 80063b0:	4627      	mov	r7, r4
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	d143      	bne.n	800643e <_malloc_r+0xd6>
 80063b6:	2c00      	cmp	r4, #0
 80063b8:	d04b      	beq.n	8006452 <_malloc_r+0xea>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4639      	mov	r1, r7
 80063be:	4630      	mov	r0, r6
 80063c0:	eb04 0903 	add.w	r9, r4, r3
 80063c4:	f000 fb60 	bl	8006a88 <_sbrk_r>
 80063c8:	4581      	cmp	r9, r0
 80063ca:	d142      	bne.n	8006452 <_malloc_r+0xea>
 80063cc:	6821      	ldr	r1, [r4, #0]
 80063ce:	4630      	mov	r0, r6
 80063d0:	1a6d      	subs	r5, r5, r1
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7ff ffa6 	bl	8006324 <sbrk_aligned>
 80063d8:	3001      	adds	r0, #1
 80063da:	d03a      	beq.n	8006452 <_malloc_r+0xea>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	442b      	add	r3, r5
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	f8d8 3000 	ldr.w	r3, [r8]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	bb62      	cbnz	r2, 8006444 <_malloc_r+0xdc>
 80063ea:	f8c8 7000 	str.w	r7, [r8]
 80063ee:	e00f      	b.n	8006410 <_malloc_r+0xa8>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	1b52      	subs	r2, r2, r5
 80063f4:	d420      	bmi.n	8006438 <_malloc_r+0xd0>
 80063f6:	2a0b      	cmp	r2, #11
 80063f8:	d917      	bls.n	800642a <_malloc_r+0xc2>
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	6025      	str	r5, [r4, #0]
 8006400:	bf18      	it	ne
 8006402:	6059      	strne	r1, [r3, #4]
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	bf08      	it	eq
 8006408:	f8c8 1000 	streq.w	r1, [r8]
 800640c:	5162      	str	r2, [r4, r5]
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f82f 	bl	8006474 <__malloc_unlock>
 8006416:	f104 000b 	add.w	r0, r4, #11
 800641a:	1d23      	adds	r3, r4, #4
 800641c:	f020 0007 	bic.w	r0, r0, #7
 8006420:	1ac2      	subs	r2, r0, r3
 8006422:	bf1c      	itt	ne
 8006424:	1a1b      	subne	r3, r3, r0
 8006426:	50a3      	strne	r3, [r4, r2]
 8006428:	e7af      	b.n	800638a <_malloc_r+0x22>
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	bf0c      	ite	eq
 8006430:	f8c8 2000 	streq.w	r2, [r8]
 8006434:	605a      	strne	r2, [r3, #4]
 8006436:	e7eb      	b.n	8006410 <_malloc_r+0xa8>
 8006438:	4623      	mov	r3, r4
 800643a:	6864      	ldr	r4, [r4, #4]
 800643c:	e7ae      	b.n	800639c <_malloc_r+0x34>
 800643e:	463c      	mov	r4, r7
 8006440:	687f      	ldr	r7, [r7, #4]
 8006442:	e7b6      	b.n	80063b2 <_malloc_r+0x4a>
 8006444:	461a      	mov	r2, r3
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	42a3      	cmp	r3, r4
 800644a:	d1fb      	bne.n	8006444 <_malloc_r+0xdc>
 800644c:	2300      	movs	r3, #0
 800644e:	6053      	str	r3, [r2, #4]
 8006450:	e7de      	b.n	8006410 <_malloc_r+0xa8>
 8006452:	230c      	movs	r3, #12
 8006454:	4630      	mov	r0, r6
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f000 f80c 	bl	8006474 <__malloc_unlock>
 800645c:	e794      	b.n	8006388 <_malloc_r+0x20>
 800645e:	6005      	str	r5, [r0, #0]
 8006460:	e7d6      	b.n	8006410 <_malloc_r+0xa8>
 8006462:	bf00      	nop
 8006464:	20001ab4 	.word	0x20001ab4

08006468 <__malloc_lock>:
 8006468:	4801      	ldr	r0, [pc, #4]	@ (8006470 <__malloc_lock+0x8>)
 800646a:	f7ff bf03 	b.w	8006274 <__retarget_lock_acquire_recursive>
 800646e:	bf00      	nop
 8006470:	20001aac 	.word	0x20001aac

08006474 <__malloc_unlock>:
 8006474:	4801      	ldr	r0, [pc, #4]	@ (800647c <__malloc_unlock+0x8>)
 8006476:	f7ff befe 	b.w	8006276 <__retarget_lock_release_recursive>
 800647a:	bf00      	nop
 800647c:	20001aac 	.word	0x20001aac

08006480 <__ssputs_r>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	461f      	mov	r7, r3
 8006486:	688e      	ldr	r6, [r1, #8]
 8006488:	4682      	mov	sl, r0
 800648a:	42be      	cmp	r6, r7
 800648c:	460c      	mov	r4, r1
 800648e:	4690      	mov	r8, r2
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	d82d      	bhi.n	80064f0 <__ssputs_r+0x70>
 8006494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800649c:	d026      	beq.n	80064ec <__ssputs_r+0x6c>
 800649e:	6965      	ldr	r5, [r4, #20]
 80064a0:	6909      	ldr	r1, [r1, #16]
 80064a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064a6:	eba3 0901 	sub.w	r9, r3, r1
 80064aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064ae:	1c7b      	adds	r3, r7, #1
 80064b0:	444b      	add	r3, r9
 80064b2:	106d      	asrs	r5, r5, #1
 80064b4:	429d      	cmp	r5, r3
 80064b6:	bf38      	it	cc
 80064b8:	461d      	movcc	r5, r3
 80064ba:	0553      	lsls	r3, r2, #21
 80064bc:	d527      	bpl.n	800650e <__ssputs_r+0x8e>
 80064be:	4629      	mov	r1, r5
 80064c0:	f7ff ff52 	bl	8006368 <_malloc_r>
 80064c4:	4606      	mov	r6, r0
 80064c6:	b360      	cbz	r0, 8006522 <__ssputs_r+0xa2>
 80064c8:	464a      	mov	r2, r9
 80064ca:	6921      	ldr	r1, [r4, #16]
 80064cc:	f7ff fed4 	bl	8006278 <memcpy>
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	6126      	str	r6, [r4, #16]
 80064de:	444e      	add	r6, r9
 80064e0:	6026      	str	r6, [r4, #0]
 80064e2:	463e      	mov	r6, r7
 80064e4:	6165      	str	r5, [r4, #20]
 80064e6:	eba5 0509 	sub.w	r5, r5, r9
 80064ea:	60a5      	str	r5, [r4, #8]
 80064ec:	42be      	cmp	r6, r7
 80064ee:	d900      	bls.n	80064f2 <__ssputs_r+0x72>
 80064f0:	463e      	mov	r6, r7
 80064f2:	4632      	mov	r2, r6
 80064f4:	4641      	mov	r1, r8
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	f000 faac 	bl	8006a54 <memmove>
 80064fc:	2000      	movs	r0, #0
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	1b9b      	subs	r3, r3, r6
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	4433      	add	r3, r6
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650e:	462a      	mov	r2, r5
 8006510:	f000 fad8 	bl	8006ac4 <_realloc_r>
 8006514:	4606      	mov	r6, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	d1e0      	bne.n	80064dc <__ssputs_r+0x5c>
 800651a:	4650      	mov	r0, sl
 800651c:	6921      	ldr	r1, [r4, #16]
 800651e:	f7ff feb9 	bl	8006294 <_free_r>
 8006522:	230c      	movs	r3, #12
 8006524:	f8ca 3000 	str.w	r3, [sl]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	e7e9      	b.n	800650a <__ssputs_r+0x8a>
	...

08006538 <_svfiprintf_r>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	4698      	mov	r8, r3
 800653e:	898b      	ldrh	r3, [r1, #12]
 8006540:	4607      	mov	r7, r0
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	460d      	mov	r5, r1
 8006546:	4614      	mov	r4, r2
 8006548:	b09d      	sub	sp, #116	@ 0x74
 800654a:	d510      	bpl.n	800656e <_svfiprintf_r+0x36>
 800654c:	690b      	ldr	r3, [r1, #16]
 800654e:	b973      	cbnz	r3, 800656e <_svfiprintf_r+0x36>
 8006550:	2140      	movs	r1, #64	@ 0x40
 8006552:	f7ff ff09 	bl	8006368 <_malloc_r>
 8006556:	6028      	str	r0, [r5, #0]
 8006558:	6128      	str	r0, [r5, #16]
 800655a:	b930      	cbnz	r0, 800656a <_svfiprintf_r+0x32>
 800655c:	230c      	movs	r3, #12
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006564:	b01d      	add	sp, #116	@ 0x74
 8006566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656a:	2340      	movs	r3, #64	@ 0x40
 800656c:	616b      	str	r3, [r5, #20]
 800656e:	2300      	movs	r3, #0
 8006570:	9309      	str	r3, [sp, #36]	@ 0x24
 8006572:	2320      	movs	r3, #32
 8006574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006578:	2330      	movs	r3, #48	@ 0x30
 800657a:	f04f 0901 	mov.w	r9, #1
 800657e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006582:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800671c <_svfiprintf_r+0x1e4>
 8006586:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800658a:	4623      	mov	r3, r4
 800658c:	469a      	mov	sl, r3
 800658e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006592:	b10a      	cbz	r2, 8006598 <_svfiprintf_r+0x60>
 8006594:	2a25      	cmp	r2, #37	@ 0x25
 8006596:	d1f9      	bne.n	800658c <_svfiprintf_r+0x54>
 8006598:	ebba 0b04 	subs.w	fp, sl, r4
 800659c:	d00b      	beq.n	80065b6 <_svfiprintf_r+0x7e>
 800659e:	465b      	mov	r3, fp
 80065a0:	4622      	mov	r2, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff ff6b 	bl	8006480 <__ssputs_r>
 80065aa:	3001      	adds	r0, #1
 80065ac:	f000 80a7 	beq.w	80066fe <_svfiprintf_r+0x1c6>
 80065b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065b2:	445a      	add	r2, fp
 80065b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065b6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 809f 	beq.w	80066fe <_svfiprintf_r+0x1c6>
 80065c0:	2300      	movs	r3, #0
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ca:	f10a 0a01 	add.w	sl, sl, #1
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80065d8:	4654      	mov	r4, sl
 80065da:	2205      	movs	r2, #5
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	484e      	ldr	r0, [pc, #312]	@ (800671c <_svfiprintf_r+0x1e4>)
 80065e2:	f000 fa61 	bl	8006aa8 <memchr>
 80065e6:	9a04      	ldr	r2, [sp, #16]
 80065e8:	b9d8      	cbnz	r0, 8006622 <_svfiprintf_r+0xea>
 80065ea:	06d0      	lsls	r0, r2, #27
 80065ec:	bf44      	itt	mi
 80065ee:	2320      	movmi	r3, #32
 80065f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f4:	0711      	lsls	r1, r2, #28
 80065f6:	bf44      	itt	mi
 80065f8:	232b      	movmi	r3, #43	@ 0x2b
 80065fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006602:	2b2a      	cmp	r3, #42	@ 0x2a
 8006604:	d015      	beq.n	8006632 <_svfiprintf_r+0xfa>
 8006606:	4654      	mov	r4, sl
 8006608:	2000      	movs	r0, #0
 800660a:	f04f 0c0a 	mov.w	ip, #10
 800660e:	9a07      	ldr	r2, [sp, #28]
 8006610:	4621      	mov	r1, r4
 8006612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006616:	3b30      	subs	r3, #48	@ 0x30
 8006618:	2b09      	cmp	r3, #9
 800661a:	d94b      	bls.n	80066b4 <_svfiprintf_r+0x17c>
 800661c:	b1b0      	cbz	r0, 800664c <_svfiprintf_r+0x114>
 800661e:	9207      	str	r2, [sp, #28]
 8006620:	e014      	b.n	800664c <_svfiprintf_r+0x114>
 8006622:	eba0 0308 	sub.w	r3, r0, r8
 8006626:	fa09 f303 	lsl.w	r3, r9, r3
 800662a:	4313      	orrs	r3, r2
 800662c:	46a2      	mov	sl, r4
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	e7d2      	b.n	80065d8 <_svfiprintf_r+0xa0>
 8006632:	9b03      	ldr	r3, [sp, #12]
 8006634:	1d19      	adds	r1, r3, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	9103      	str	r1, [sp, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfbb      	ittet	lt
 800663e:	425b      	neglt	r3, r3
 8006640:	f042 0202 	orrlt.w	r2, r2, #2
 8006644:	9307      	strge	r3, [sp, #28]
 8006646:	9307      	strlt	r3, [sp, #28]
 8006648:	bfb8      	it	lt
 800664a:	9204      	strlt	r2, [sp, #16]
 800664c:	7823      	ldrb	r3, [r4, #0]
 800664e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006650:	d10a      	bne.n	8006668 <_svfiprintf_r+0x130>
 8006652:	7863      	ldrb	r3, [r4, #1]
 8006654:	2b2a      	cmp	r3, #42	@ 0x2a
 8006656:	d132      	bne.n	80066be <_svfiprintf_r+0x186>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	3402      	adds	r4, #2
 800665c:	1d1a      	adds	r2, r3, #4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	9203      	str	r2, [sp, #12]
 8006662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006720 <_svfiprintf_r+0x1e8>
 800666c:	2203      	movs	r2, #3
 800666e:	4650      	mov	r0, sl
 8006670:	7821      	ldrb	r1, [r4, #0]
 8006672:	f000 fa19 	bl	8006aa8 <memchr>
 8006676:	b138      	cbz	r0, 8006688 <_svfiprintf_r+0x150>
 8006678:	2240      	movs	r2, #64	@ 0x40
 800667a:	9b04      	ldr	r3, [sp, #16]
 800667c:	eba0 000a 	sub.w	r0, r0, sl
 8006680:	4082      	lsls	r2, r0
 8006682:	4313      	orrs	r3, r2
 8006684:	3401      	adds	r4, #1
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668c:	2206      	movs	r2, #6
 800668e:	4825      	ldr	r0, [pc, #148]	@ (8006724 <_svfiprintf_r+0x1ec>)
 8006690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006694:	f000 fa08 	bl	8006aa8 <memchr>
 8006698:	2800      	cmp	r0, #0
 800669a:	d036      	beq.n	800670a <_svfiprintf_r+0x1d2>
 800669c:	4b22      	ldr	r3, [pc, #136]	@ (8006728 <_svfiprintf_r+0x1f0>)
 800669e:	bb1b      	cbnz	r3, 80066e8 <_svfiprintf_r+0x1b0>
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	3307      	adds	r3, #7
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	3308      	adds	r3, #8
 80066aa:	9303      	str	r3, [sp, #12]
 80066ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ae:	4433      	add	r3, r6
 80066b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b2:	e76a      	b.n	800658a <_svfiprintf_r+0x52>
 80066b4:	460c      	mov	r4, r1
 80066b6:	2001      	movs	r0, #1
 80066b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066bc:	e7a8      	b.n	8006610 <_svfiprintf_r+0xd8>
 80066be:	2300      	movs	r3, #0
 80066c0:	f04f 0c0a 	mov.w	ip, #10
 80066c4:	4619      	mov	r1, r3
 80066c6:	3401      	adds	r4, #1
 80066c8:	9305      	str	r3, [sp, #20]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d0:	3a30      	subs	r2, #48	@ 0x30
 80066d2:	2a09      	cmp	r2, #9
 80066d4:	d903      	bls.n	80066de <_svfiprintf_r+0x1a6>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0c6      	beq.n	8006668 <_svfiprintf_r+0x130>
 80066da:	9105      	str	r1, [sp, #20]
 80066dc:	e7c4      	b.n	8006668 <_svfiprintf_r+0x130>
 80066de:	4604      	mov	r4, r0
 80066e0:	2301      	movs	r3, #1
 80066e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066e6:	e7f0      	b.n	80066ca <_svfiprintf_r+0x192>
 80066e8:	ab03      	add	r3, sp, #12
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	462a      	mov	r2, r5
 80066ee:	4638      	mov	r0, r7
 80066f0:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <_svfiprintf_r+0x1f4>)
 80066f2:	a904      	add	r1, sp, #16
 80066f4:	f3af 8000 	nop.w
 80066f8:	1c42      	adds	r2, r0, #1
 80066fa:	4606      	mov	r6, r0
 80066fc:	d1d6      	bne.n	80066ac <_svfiprintf_r+0x174>
 80066fe:	89ab      	ldrh	r3, [r5, #12]
 8006700:	065b      	lsls	r3, r3, #25
 8006702:	f53f af2d 	bmi.w	8006560 <_svfiprintf_r+0x28>
 8006706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006708:	e72c      	b.n	8006564 <_svfiprintf_r+0x2c>
 800670a:	ab03      	add	r3, sp, #12
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	462a      	mov	r2, r5
 8006710:	4638      	mov	r0, r7
 8006712:	4b06      	ldr	r3, [pc, #24]	@ (800672c <_svfiprintf_r+0x1f4>)
 8006714:	a904      	add	r1, sp, #16
 8006716:	f000 f87d 	bl	8006814 <_printf_i>
 800671a:	e7ed      	b.n	80066f8 <_svfiprintf_r+0x1c0>
 800671c:	08006d72 	.word	0x08006d72
 8006720:	08006d78 	.word	0x08006d78
 8006724:	08006d7c 	.word	0x08006d7c
 8006728:	00000000 	.word	0x00000000
 800672c:	08006481 	.word	0x08006481

08006730 <_printf_common>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4616      	mov	r6, r2
 8006736:	4698      	mov	r8, r3
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	4607      	mov	r7, r0
 800673e:	4293      	cmp	r3, r2
 8006740:	bfb8      	it	lt
 8006742:	4613      	movlt	r3, r2
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800674a:	460c      	mov	r4, r1
 800674c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006750:	b10a      	cbz	r2, 8006756 <_printf_common+0x26>
 8006752:	3301      	adds	r3, #1
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0699      	lsls	r1, r3, #26
 800675a:	bf42      	ittt	mi
 800675c:	6833      	ldrmi	r3, [r6, #0]
 800675e:	3302      	addmi	r3, #2
 8006760:	6033      	strmi	r3, [r6, #0]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d106      	bne.n	8006778 <_printf_common+0x48>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc2b      	bgt.n	80067d0 <_printf_common+0xa0>
 8006778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	3b00      	subs	r3, #0
 8006780:	bf18      	it	ne
 8006782:	2301      	movne	r3, #1
 8006784:	0692      	lsls	r2, r2, #26
 8006786:	d430      	bmi.n	80067ea <_printf_common+0xba>
 8006788:	4641      	mov	r1, r8
 800678a:	4638      	mov	r0, r7
 800678c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006790:	47c8      	blx	r9
 8006792:	3001      	adds	r0, #1
 8006794:	d023      	beq.n	80067de <_printf_common+0xae>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	f003 0306 	and.w	r3, r3, #6
 800679e:	2b04      	cmp	r3, #4
 80067a0:	bf14      	ite	ne
 80067a2:	2500      	movne	r5, #0
 80067a4:	6833      	ldreq	r3, [r6, #0]
 80067a6:	f04f 0600 	mov.w	r6, #0
 80067aa:	bf08      	it	eq
 80067ac:	68e5      	ldreq	r5, [r4, #12]
 80067ae:	f104 041a 	add.w	r4, r4, #26
 80067b2:	bf08      	it	eq
 80067b4:	1aed      	subeq	r5, r5, r3
 80067b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067ba:	bf08      	it	eq
 80067bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bfc4      	itt	gt
 80067c4:	1a9b      	subgt	r3, r3, r2
 80067c6:	18ed      	addgt	r5, r5, r3
 80067c8:	42b5      	cmp	r5, r6
 80067ca:	d11a      	bne.n	8006802 <_printf_common+0xd2>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e008      	b.n	80067e2 <_printf_common+0xb2>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4652      	mov	r2, sl
 80067d4:	4641      	mov	r1, r8
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c8      	blx	r9
 80067da:	3001      	adds	r0, #1
 80067dc:	d103      	bne.n	80067e6 <_printf_common+0xb6>
 80067de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e6:	3501      	adds	r5, #1
 80067e8:	e7c1      	b.n	800676e <_printf_common+0x3e>
 80067ea:	2030      	movs	r0, #48	@ 0x30
 80067ec:	18e1      	adds	r1, r4, r3
 80067ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067f8:	4422      	add	r2, r4
 80067fa:	3302      	adds	r3, #2
 80067fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006800:	e7c2      	b.n	8006788 <_printf_common+0x58>
 8006802:	2301      	movs	r3, #1
 8006804:	4622      	mov	r2, r4
 8006806:	4641      	mov	r1, r8
 8006808:	4638      	mov	r0, r7
 800680a:	47c8      	blx	r9
 800680c:	3001      	adds	r0, #1
 800680e:	d0e6      	beq.n	80067de <_printf_common+0xae>
 8006810:	3601      	adds	r6, #1
 8006812:	e7d9      	b.n	80067c8 <_printf_common+0x98>

08006814 <_printf_i>:
 8006814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	7e0f      	ldrb	r7, [r1, #24]
 800681a:	4691      	mov	r9, r2
 800681c:	2f78      	cmp	r7, #120	@ 0x78
 800681e:	4680      	mov	r8, r0
 8006820:	460c      	mov	r4, r1
 8006822:	469a      	mov	sl, r3
 8006824:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800682a:	d807      	bhi.n	800683c <_printf_i+0x28>
 800682c:	2f62      	cmp	r7, #98	@ 0x62
 800682e:	d80a      	bhi.n	8006846 <_printf_i+0x32>
 8006830:	2f00      	cmp	r7, #0
 8006832:	f000 80d3 	beq.w	80069dc <_printf_i+0x1c8>
 8006836:	2f58      	cmp	r7, #88	@ 0x58
 8006838:	f000 80ba 	beq.w	80069b0 <_printf_i+0x19c>
 800683c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006844:	e03a      	b.n	80068bc <_printf_i+0xa8>
 8006846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800684a:	2b15      	cmp	r3, #21
 800684c:	d8f6      	bhi.n	800683c <_printf_i+0x28>
 800684e:	a101      	add	r1, pc, #4	@ (adr r1, 8006854 <_printf_i+0x40>)
 8006850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068c1 	.word	0x080068c1
 800685c:	0800683d 	.word	0x0800683d
 8006860:	0800683d 	.word	0x0800683d
 8006864:	0800683d 	.word	0x0800683d
 8006868:	0800683d 	.word	0x0800683d
 800686c:	080068c1 	.word	0x080068c1
 8006870:	0800683d 	.word	0x0800683d
 8006874:	0800683d 	.word	0x0800683d
 8006878:	0800683d 	.word	0x0800683d
 800687c:	0800683d 	.word	0x0800683d
 8006880:	080069c3 	.word	0x080069c3
 8006884:	080068eb 	.word	0x080068eb
 8006888:	0800697d 	.word	0x0800697d
 800688c:	0800683d 	.word	0x0800683d
 8006890:	0800683d 	.word	0x0800683d
 8006894:	080069e5 	.word	0x080069e5
 8006898:	0800683d 	.word	0x0800683d
 800689c:	080068eb 	.word	0x080068eb
 80068a0:	0800683d 	.word	0x0800683d
 80068a4:	0800683d 	.word	0x0800683d
 80068a8:	08006985 	.word	0x08006985
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6032      	str	r2, [r6, #0]
 80068b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068bc:	2301      	movs	r3, #1
 80068be:	e09e      	b.n	80069fe <_printf_i+0x1ea>
 80068c0:	6833      	ldr	r3, [r6, #0]
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	1d19      	adds	r1, r3, #4
 80068c6:	6031      	str	r1, [r6, #0]
 80068c8:	0606      	lsls	r6, r0, #24
 80068ca:	d501      	bpl.n	80068d0 <_printf_i+0xbc>
 80068cc:	681d      	ldr	r5, [r3, #0]
 80068ce:	e003      	b.n	80068d8 <_printf_i+0xc4>
 80068d0:	0645      	lsls	r5, r0, #25
 80068d2:	d5fb      	bpl.n	80068cc <_printf_i+0xb8>
 80068d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	da03      	bge.n	80068e4 <_printf_i+0xd0>
 80068dc:	232d      	movs	r3, #45	@ 0x2d
 80068de:	426d      	negs	r5, r5
 80068e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e4:	230a      	movs	r3, #10
 80068e6:	4859      	ldr	r0, [pc, #356]	@ (8006a4c <_printf_i+0x238>)
 80068e8:	e011      	b.n	800690e <_printf_i+0xfa>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	0608      	lsls	r0, r1, #24
 80068f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068f4:	d402      	bmi.n	80068fc <_printf_i+0xe8>
 80068f6:	0649      	lsls	r1, r1, #25
 80068f8:	bf48      	it	mi
 80068fa:	b2ad      	uxthmi	r5, r5
 80068fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	bf14      	ite	ne
 8006902:	230a      	movne	r3, #10
 8006904:	2308      	moveq	r3, #8
 8006906:	4851      	ldr	r0, [pc, #324]	@ (8006a4c <_printf_i+0x238>)
 8006908:	2100      	movs	r1, #0
 800690a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800690e:	6866      	ldr	r6, [r4, #4]
 8006910:	2e00      	cmp	r6, #0
 8006912:	bfa8      	it	ge
 8006914:	6821      	ldrge	r1, [r4, #0]
 8006916:	60a6      	str	r6, [r4, #8]
 8006918:	bfa4      	itt	ge
 800691a:	f021 0104 	bicge.w	r1, r1, #4
 800691e:	6021      	strge	r1, [r4, #0]
 8006920:	b90d      	cbnz	r5, 8006926 <_printf_i+0x112>
 8006922:	2e00      	cmp	r6, #0
 8006924:	d04b      	beq.n	80069be <_printf_i+0x1aa>
 8006926:	4616      	mov	r6, r2
 8006928:	fbb5 f1f3 	udiv	r1, r5, r3
 800692c:	fb03 5711 	mls	r7, r3, r1, r5
 8006930:	5dc7      	ldrb	r7, [r0, r7]
 8006932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006936:	462f      	mov	r7, r5
 8006938:	42bb      	cmp	r3, r7
 800693a:	460d      	mov	r5, r1
 800693c:	d9f4      	bls.n	8006928 <_printf_i+0x114>
 800693e:	2b08      	cmp	r3, #8
 8006940:	d10b      	bne.n	800695a <_printf_i+0x146>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	07df      	lsls	r7, r3, #31
 8006946:	d508      	bpl.n	800695a <_printf_i+0x146>
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	6861      	ldr	r1, [r4, #4]
 800694c:	4299      	cmp	r1, r3
 800694e:	bfde      	ittt	le
 8006950:	2330      	movle	r3, #48	@ 0x30
 8006952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006956:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800695a:	1b92      	subs	r2, r2, r6
 800695c:	6122      	str	r2, [r4, #16]
 800695e:	464b      	mov	r3, r9
 8006960:	4621      	mov	r1, r4
 8006962:	4640      	mov	r0, r8
 8006964:	f8cd a000 	str.w	sl, [sp]
 8006968:	aa03      	add	r2, sp, #12
 800696a:	f7ff fee1 	bl	8006730 <_printf_common>
 800696e:	3001      	adds	r0, #1
 8006970:	d14a      	bne.n	8006a08 <_printf_i+0x1f4>
 8006972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006976:	b004      	add	sp, #16
 8006978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f043 0320 	orr.w	r3, r3, #32
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	2778      	movs	r7, #120	@ 0x78
 8006986:	4832      	ldr	r0, [pc, #200]	@ (8006a50 <_printf_i+0x23c>)
 8006988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	6831      	ldr	r1, [r6, #0]
 8006990:	061f      	lsls	r7, r3, #24
 8006992:	f851 5b04 	ldr.w	r5, [r1], #4
 8006996:	d402      	bmi.n	800699e <_printf_i+0x18a>
 8006998:	065f      	lsls	r7, r3, #25
 800699a:	bf48      	it	mi
 800699c:	b2ad      	uxthmi	r5, r5
 800699e:	6031      	str	r1, [r6, #0]
 80069a0:	07d9      	lsls	r1, r3, #31
 80069a2:	bf44      	itt	mi
 80069a4:	f043 0320 	orrmi.w	r3, r3, #32
 80069a8:	6023      	strmi	r3, [r4, #0]
 80069aa:	b11d      	cbz	r5, 80069b4 <_printf_i+0x1a0>
 80069ac:	2310      	movs	r3, #16
 80069ae:	e7ab      	b.n	8006908 <_printf_i+0xf4>
 80069b0:	4826      	ldr	r0, [pc, #152]	@ (8006a4c <_printf_i+0x238>)
 80069b2:	e7e9      	b.n	8006988 <_printf_i+0x174>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	f023 0320 	bic.w	r3, r3, #32
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	e7f6      	b.n	80069ac <_printf_i+0x198>
 80069be:	4616      	mov	r6, r2
 80069c0:	e7bd      	b.n	800693e <_printf_i+0x12a>
 80069c2:	6833      	ldr	r3, [r6, #0]
 80069c4:	6825      	ldr	r5, [r4, #0]
 80069c6:	1d18      	adds	r0, r3, #4
 80069c8:	6961      	ldr	r1, [r4, #20]
 80069ca:	6030      	str	r0, [r6, #0]
 80069cc:	062e      	lsls	r6, r5, #24
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	d501      	bpl.n	80069d6 <_printf_i+0x1c2>
 80069d2:	6019      	str	r1, [r3, #0]
 80069d4:	e002      	b.n	80069dc <_printf_i+0x1c8>
 80069d6:	0668      	lsls	r0, r5, #25
 80069d8:	d5fb      	bpl.n	80069d2 <_printf_i+0x1be>
 80069da:	8019      	strh	r1, [r3, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	4616      	mov	r6, r2
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	e7bc      	b.n	800695e <_printf_i+0x14a>
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	2100      	movs	r1, #0
 80069e8:	1d1a      	adds	r2, r3, #4
 80069ea:	6032      	str	r2, [r6, #0]
 80069ec:	681e      	ldr	r6, [r3, #0]
 80069ee:	6862      	ldr	r2, [r4, #4]
 80069f0:	4630      	mov	r0, r6
 80069f2:	f000 f859 	bl	8006aa8 <memchr>
 80069f6:	b108      	cbz	r0, 80069fc <_printf_i+0x1e8>
 80069f8:	1b80      	subs	r0, r0, r6
 80069fa:	6060      	str	r0, [r4, #4]
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	2300      	movs	r3, #0
 8006a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a06:	e7aa      	b.n	800695e <_printf_i+0x14a>
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	47d0      	blx	sl
 8006a12:	3001      	adds	r0, #1
 8006a14:	d0ad      	beq.n	8006972 <_printf_i+0x15e>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	079b      	lsls	r3, r3, #30
 8006a1a:	d413      	bmi.n	8006a44 <_printf_i+0x230>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e7a6      	b.n	8006976 <_printf_i+0x162>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4640      	mov	r0, r8
 8006a30:	47d0      	blx	sl
 8006a32:	3001      	adds	r0, #1
 8006a34:	d09d      	beq.n	8006972 <_printf_i+0x15e>
 8006a36:	3501      	adds	r5, #1
 8006a38:	68e3      	ldr	r3, [r4, #12]
 8006a3a:	9903      	ldr	r1, [sp, #12]
 8006a3c:	1a5b      	subs	r3, r3, r1
 8006a3e:	42ab      	cmp	r3, r5
 8006a40:	dcf2      	bgt.n	8006a28 <_printf_i+0x214>
 8006a42:	e7eb      	b.n	8006a1c <_printf_i+0x208>
 8006a44:	2500      	movs	r5, #0
 8006a46:	f104 0619 	add.w	r6, r4, #25
 8006a4a:	e7f5      	b.n	8006a38 <_printf_i+0x224>
 8006a4c:	08006d83 	.word	0x08006d83
 8006a50:	08006d94 	.word	0x08006d94

08006a54 <memmove>:
 8006a54:	4288      	cmp	r0, r1
 8006a56:	b510      	push	{r4, lr}
 8006a58:	eb01 0402 	add.w	r4, r1, r2
 8006a5c:	d902      	bls.n	8006a64 <memmove+0x10>
 8006a5e:	4284      	cmp	r4, r0
 8006a60:	4623      	mov	r3, r4
 8006a62:	d807      	bhi.n	8006a74 <memmove+0x20>
 8006a64:	1e43      	subs	r3, r0, #1
 8006a66:	42a1      	cmp	r1, r4
 8006a68:	d008      	beq.n	8006a7c <memmove+0x28>
 8006a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a72:	e7f8      	b.n	8006a66 <memmove+0x12>
 8006a74:	4601      	mov	r1, r0
 8006a76:	4402      	add	r2, r0
 8006a78:	428a      	cmp	r2, r1
 8006a7a:	d100      	bne.n	8006a7e <memmove+0x2a>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a86:	e7f7      	b.n	8006a78 <memmove+0x24>

08006a88 <_sbrk_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4d05      	ldr	r5, [pc, #20]	@ (8006aa4 <_sbrk_r+0x1c>)
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fa fb82 	bl	800119c <_sbrk>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_sbrk_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_sbrk_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20001aa8 	.word	0x20001aa8

08006aa8 <memchr>:
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	b2c9      	uxtb	r1, r1
 8006aae:	4402      	add	r2, r0
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	d101      	bne.n	8006aba <memchr+0x12>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e003      	b.n	8006ac2 <memchr+0x1a>
 8006aba:	7804      	ldrb	r4, [r0, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	428c      	cmp	r4, r1
 8006ac0:	d1f6      	bne.n	8006ab0 <memchr+0x8>
 8006ac2:	bd10      	pop	{r4, pc}

08006ac4 <_realloc_r>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4615      	mov	r5, r2
 8006acc:	460c      	mov	r4, r1
 8006ace:	b921      	cbnz	r1, 8006ada <_realloc_r+0x16>
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	f7ff bc47 	b.w	8006368 <_malloc_r>
 8006ada:	b92a      	cbnz	r2, 8006ae8 <_realloc_r+0x24>
 8006adc:	f7ff fbda 	bl	8006294 <_free_r>
 8006ae0:	2400      	movs	r4, #0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	f000 f81a 	bl	8006b20 <_malloc_usable_size_r>
 8006aec:	4285      	cmp	r5, r0
 8006aee:	4606      	mov	r6, r0
 8006af0:	d802      	bhi.n	8006af8 <_realloc_r+0x34>
 8006af2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006af6:	d8f4      	bhi.n	8006ae2 <_realloc_r+0x1e>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7ff fc34 	bl	8006368 <_malloc_r>
 8006b00:	4607      	mov	r7, r0
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d0ec      	beq.n	8006ae0 <_realloc_r+0x1c>
 8006b06:	42b5      	cmp	r5, r6
 8006b08:	462a      	mov	r2, r5
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	bf28      	it	cs
 8006b0e:	4632      	movcs	r2, r6
 8006b10:	f7ff fbb2 	bl	8006278 <memcpy>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f7ff fbbc 	bl	8006294 <_free_r>
 8006b1c:	463c      	mov	r4, r7
 8006b1e:	e7e0      	b.n	8006ae2 <_realloc_r+0x1e>

08006b20 <_malloc_usable_size_r>:
 8006b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b24:	1f18      	subs	r0, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfbc      	itt	lt
 8006b2a:	580b      	ldrlt	r3, [r1, r0]
 8006b2c:	18c0      	addlt	r0, r0, r3
 8006b2e:	4770      	bx	lr

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
