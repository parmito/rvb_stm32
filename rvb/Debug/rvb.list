
rvb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006008  08006008  00007008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  080061c4  080061c4  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061c4  080061c4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c4  080061c4  000071c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061c8  080061c8  000071c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080061cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d48  20000064  08006230  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  08006230  00008dac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e43  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f2f  00000000  00000000  0001fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00023e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001010  00000000  00000000  000252e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab2f  00000000  00000000  000262f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001989e  00000000  00000000  00040e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094817  00000000  00000000  0005a6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eeed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005858  00000000  00000000  000eef18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f4770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ff0 	.word	0x08005ff0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08005ff0 	.word	0x08005ff0

08000150 <TaskAppCAN_Entry>:
//              TaskAppCAN_Entry
//
//
//////////////////////////////////////////////
void TaskAppCAN_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	6039      	str	r1, [r7, #0]
    xQueueAppCAN = xQueue;
 800015a:	4a10      	ldr	r2, [pc, #64]	@ (800019c <TaskAppCAN_Entry+0x4c>)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	6013      	str	r3, [r2, #0]
    xTimerAppCAN = xTimer;
 8000160:	4a0f      	ldr	r2, [pc, #60]	@ (80001a0 <TaskAppCAN_Entry+0x50>)
 8000162:	683b      	ldr	r3, [r7, #0]
 8000164:	6013      	str	r3, [r2, #0]

    hCAN = hGet_CAN_Handler();
 8000166:	f000 fc29 	bl	80009bc <hGet_CAN_Handler>
 800016a:	4603      	mov	r3, r0
 800016c:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <TaskAppCAN_Entry+0x54>)
 800016e:	6013      	str	r3, [r2, #0]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000170:	4b0d      	ldr	r3, [pc, #52]	@ (80001a8 <TaskAppCAN_Entry+0x58>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 8000176:	4b0c      	ldr	r3, [pc, #48]	@ (80001a8 <TaskAppCAN_Entry+0x58>)
 8000178:	2201      	movs	r2, #1
 800017a:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 800017c:	4b0a      	ldr	r3, [pc, #40]	@ (80001a8 <TaskAppCAN_Entry+0x58>)
 800017e:	2200      	movs	r2, #0
 8000180:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000182:	4b06      	ldr	r3, [pc, #24]	@ (800019c <TaskAppCAN_Entry+0x4c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	6818      	ldr	r0, [r3, #0]
 8000188:	2300      	movs	r3, #0
 800018a:	2200      	movs	r2, #0
 800018c:	4906      	ldr	r1, [pc, #24]	@ (80001a8 <TaskAppCAN_Entry+0x58>)
 800018e:	f003 ff31 	bl	8003ff4 <xQueueGenericSend>
}
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	2000008c 	.word	0x2000008c
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000094 	.word	0x20000094
 80001a8:	20000080 	.word	0x20000080

080001ac <TaskAppCAN_Start>:
//              TaskAppCAN_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_Start(sMessageType *psMessage)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80001b4:	2301      	movs	r3, #1
 80001b6:	73fb      	strb	r3, [r7, #15]

    (void)stHAL_CAN_FilterConfig();
 80001b8:	f000 fc0a 	bl	80009d0 <stHAL_CAN_FilterConfig>
    (void)HAL_CAN_Start(hCAN);
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <TaskAppCAN_Start+0x24>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f001 f9e5 	bl	8001590 <HAL_CAN_Start>

	return boError;
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000094 	.word	0x20000094

080001d4 <TaskAppCAN_ReceiveEvent>:
//              TaskAppCAN_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_ReceiveEvent(sMessageType *psMessage)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80001dc:	2301      	movs	r3, #1
 80001de:	73fb      	strb	r3, [r7, #15]

    tstFrameCAN *pstFrameCAN = (tstFrameCAN*)(psMessage->pcMessageData);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	60bb      	str	r3, [r7, #8]

	return boError;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
	...

080001f4 <TaskAppCAN_TransmitEvent>:
//              TaskAppCAN_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_TransmitEvent(sMessageType *psMessage)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80001fc:	2301      	movs	r3, #1
 80001fe:	73fb      	strb	r3, [r7, #15]
    uint32_t u32;


    pTxHeader.StdId = 0x3C0;
 8000200:	4b28      	ldr	r3, [pc, #160]	@ (80002a4 <TaskAppCAN_TransmitEvent+0xb0>)
 8000202:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000206:	601a      	str	r2, [r3, #0]
    pTxHeader.IDE = CAN_ID_STD;
 8000208:	4b26      	ldr	r3, [pc, #152]	@ (80002a4 <TaskAppCAN_TransmitEvent+0xb0>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
    pTxHeader.RTR = CAN_RTR_DATA;
 800020e:	4b25      	ldr	r3, [pc, #148]	@ (80002a4 <TaskAppCAN_TransmitEvent+0xb0>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
    pTxHeader.DLC = 4;
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <TaskAppCAN_TransmitEvent+0xb0>)
 8000216:	2204      	movs	r2, #4
 8000218:	611a      	str	r2, [r3, #16]

    memset(stFrameTxCAN[u8FifoTxCAN].u8Data,0,sizeof(stFrameTxCAN[0].u8Data));
 800021a:	4b23      	ldr	r3, [pc, #140]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	3308      	adds	r3, #8
 8000222:	4a22      	ldr	r2, [pc, #136]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000224:	4413      	add	r3, r2
 8000226:	2208      	movs	r2, #8
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f005 fdfa 	bl	8005e24 <memset>

    stFrameTxCAN[u8FifoTxCAN].u8Data[0] = 0xC1;
 8000230:	4b1d      	ldr	r3, [pc, #116]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4a1d      	ldr	r2, [pc, #116]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	4413      	add	r3, r2
 800023a:	3308      	adds	r3, #8
 800023c:	22c1      	movs	r2, #193	@ 0xc1
 800023e:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[1] = 0x01;
 8000240:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	4a19      	ldr	r2, [pc, #100]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	4413      	add	r3, r2
 800024a:	3309      	adds	r3, #9
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[2] = 0x03;
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4a15      	ldr	r2, [pc, #84]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	330a      	adds	r3, #10
 800025c:	2203      	movs	r2, #3
 800025e:	701a      	strb	r2, [r3, #0]
    stFrameTxCAN[u8FifoTxCAN].u8Data[3] = 0x00;
 8000260:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000266:	011b      	lsls	r3, r3, #4
 8000268:	4413      	add	r3, r2
 800026a:	330b      	adds	r3, #11
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

	u32 = HAL_CAN_GetTxMailboxesFreeLevel(hCAN);
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <TaskAppCAN_TransmitEvent+0xbc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f001 fa9e 	bl	80017b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800027a:	60b8      	str	r0, [r7, #8]
    if(u32 > 0)
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d00b      	beq.n	800029a <TaskAppCAN_TransmitEvent+0xa6>
    {
        (void)HAL_CAN_AddTxMessage(hCAN, &pTxHeader,stFrameTxCAN[u8FifoTxCAN].u8Data, &u32TxMailbox);
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <TaskAppCAN_TransmitEvent+0xbc>)
 8000284:	6818      	ldr	r0, [r3, #0]
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <TaskAppCAN_TransmitEvent+0xb4>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	011b      	lsls	r3, r3, #4
 800028c:	3308      	adds	r3, #8
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <TaskAppCAN_TransmitEvent+0xb8>)
 8000290:	441a      	add	r2, r3
 8000292:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <TaskAppCAN_TransmitEvent+0xc0>)
 8000294:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <TaskAppCAN_TransmitEvent+0xb0>)
 8000296:	f001 f9bf 	bl	8001618 <HAL_CAN_AddTxMessage>
    }
	return boError;
 800029a:	7bfb      	ldrb	r3, [r7, #15]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000b4 	.word	0x200000b4
 80002a8:	200000cd 	.word	0x200000cd
 80002ac:	20000150 	.word	0x20000150
 80002b0:	20000094 	.word	0x20000094
 80002b4:	20000000 	.word	0x20000000

080002b8 <TaskAppCAN_IgnoreEvent>:
//              TaskAppCAN_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_IgnoreEvent(sMessageType *psMessage)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 80002c0:	2300      	movs	r3, #0
 80002c2:	73fb      	strb	r3, [r7, #15]

    return(boError);
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <vTaskAppCAN>:
};

static uint8_t u8TogglePin = 0;

void vTaskAppCAN(void const * argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( *xQueueAppCAN, &stAppCANMsg, 0 ) )
 80002d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000454 <vTaskAppCAN+0x184>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2200      	movs	r2, #0
 80002e0:	495d      	ldr	r1, [pc, #372]	@ (8000458 <vTaskAppCAN+0x188>)
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 f826 	bl	8004334 <xQueueReceive>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00a      	beq.n	8000304 <vTaskAppCAN+0x34>
	{
		(void)eEventHandler ((unsigned char)SRC_APPCAN,gpasTaskAppCAN_StateMachine[ucCurrentStateAppCAN], &ucCurrentStateAppCAN, &stAppCANMsg);
 80002ee:	4b5b      	ldr	r3, [pc, #364]	@ (800045c <vTaskAppCAN+0x18c>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000460 <vTaskAppCAN+0x190>)
 80002f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80002fa:	4b57      	ldr	r3, [pc, #348]	@ (8000458 <vTaskAppCAN+0x188>)
 80002fc:	4a57      	ldr	r2, [pc, #348]	@ (800045c <vTaskAppCAN+0x18c>)
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fdaa 	bl	8000e58 <eEventHandler>
	}

	if( HAL_CAN_GetRxFifoFillLevel(hCAN, CAN_RX_FIFO0) > 0)
 8000304:	4b57      	ldr	r3, [pc, #348]	@ (8000464 <vTaskAppCAN+0x194>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fba8 	bl	8001a60 <HAL_CAN_GetRxFifoFillLevel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d051      	beq.n	80003ba <vTaskAppCAN+0xea>
	{
		memset(stFrameRxCAN[u8FifoRxCAN].u8Data,0,sizeof(stFrameRxCAN[0].u8Data));
 8000316:	4b54      	ldr	r3, [pc, #336]	@ (8000468 <vTaskAppCAN+0x198>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	3308      	adds	r3, #8
 800031e:	4a53      	ldr	r2, [pc, #332]	@ (800046c <vTaskAppCAN+0x19c>)
 8000320:	4413      	add	r3, r2
 8000322:	2208      	movs	r2, #8
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f005 fd7c 	bl	8005e24 <memset>
		if(HAL_CAN_GetRxMessage(hCAN, CAN_RX_FIFO0,&pRxHeader,stFrameRxCAN[u8FifoRxCAN].u8Data) == HAL_OK)
 800032c:	4b4d      	ldr	r3, [pc, #308]	@ (8000464 <vTaskAppCAN+0x194>)
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	4b4d      	ldr	r3, [pc, #308]	@ (8000468 <vTaskAppCAN+0x198>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	3308      	adds	r3, #8
 8000338:	4a4c      	ldr	r2, [pc, #304]	@ (800046c <vTaskAppCAN+0x19c>)
 800033a:	4413      	add	r3, r2
 800033c:	4a4c      	ldr	r2, [pc, #304]	@ (8000470 <vTaskAppCAN+0x1a0>)
 800033e:	2100      	movs	r1, #0
 8000340:	f001 fa6d 	bl	800181e <HAL_CAN_GetRxMessage>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d137      	bne.n	80003ba <vTaskAppCAN+0xea>
		{
			stAppCANMsg.ucSrc = SRC_APPCAN;
 800034a:	4b43      	ldr	r3, [pc, #268]	@ (8000458 <vTaskAppCAN+0x188>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 8000350:	4b41      	ldr	r3, [pc, #260]	@ (8000458 <vTaskAppCAN+0x188>)
 8000352:	2201      	movs	r2, #1
 8000354:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_RX;
 8000356:	4b40      	ldr	r3, [pc, #256]	@ (8000458 <vTaskAppCAN+0x188>)
 8000358:	2201      	movs	r2, #1
 800035a:	709a      	strb	r2, [r3, #2]
			stFrameRxCAN[u8FifoRxCAN].u32ID = pRxHeader.StdId;
 800035c:	4b42      	ldr	r3, [pc, #264]	@ (8000468 <vTaskAppCAN+0x198>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	4b43      	ldr	r3, [pc, #268]	@ (8000470 <vTaskAppCAN+0x1a0>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4941      	ldr	r1, [pc, #260]	@ (800046c <vTaskAppCAN+0x19c>)
 8000368:	0103      	lsls	r3, r0, #4
 800036a:	440b      	add	r3, r1
 800036c:	601a      	str	r2, [r3, #0]
			stFrameRxCAN[u8FifoRxCAN].u32DLC = pRxHeader.DLC;
 800036e:	4b3e      	ldr	r3, [pc, #248]	@ (8000468 <vTaskAppCAN+0x198>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	4b3e      	ldr	r3, [pc, #248]	@ (8000470 <vTaskAppCAN+0x1a0>)
 8000376:	691a      	ldr	r2, [r3, #16]
 8000378:	493c      	ldr	r1, [pc, #240]	@ (800046c <vTaskAppCAN+0x19c>)
 800037a:	0103      	lsls	r3, r0, #4
 800037c:	440b      	add	r3, r1
 800037e:	3304      	adds	r3, #4
 8000380:	601a      	str	r2, [r3, #0]
			stAppCANMsg.pcMessageData = (char*)&stFrameRxCAN[u8FifoRxCAN];
 8000382:	4b39      	ldr	r3, [pc, #228]	@ (8000468 <vTaskAppCAN+0x198>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	4a38      	ldr	r2, [pc, #224]	@ (800046c <vTaskAppCAN+0x19c>)
 800038a:	4413      	add	r3, r2
 800038c:	4a32      	ldr	r2, [pc, #200]	@ (8000458 <vTaskAppCAN+0x188>)
 800038e:	6053      	str	r3, [r2, #4]
			xQueueGenericSend(*xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 8000390:	4b30      	ldr	r3, [pc, #192]	@ (8000454 <vTaskAppCAN+0x184>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6818      	ldr	r0, [r3, #0]
 8000396:	2300      	movs	r3, #0
 8000398:	2200      	movs	r2, #0
 800039a:	492f      	ldr	r1, [pc, #188]	@ (8000458 <vTaskAppCAN+0x188>)
 800039c:	f003 fe2a 	bl	8003ff4 <xQueueGenericSend>
			if(++u8FifoRxCAN >= FIFO_SIZE)
 80003a0:	4b31      	ldr	r3, [pc, #196]	@ (8000468 <vTaskAppCAN+0x198>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <vTaskAppCAN+0x198>)
 80003aa:	701a      	strb	r2, [r3, #0]
 80003ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000468 <vTaskAppCAN+0x198>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d902      	bls.n	80003ba <vTaskAppCAN+0xea>
			{
				u8FifoRxCAN = 0;
 80003b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <vTaskAppCAN+0x198>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(++u16TimeSlice >= 100)
 80003ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000474 <vTaskAppCAN+0x1a4>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	b29a      	uxth	r2, r3
 80003c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000474 <vTaskAppCAN+0x1a4>)
 80003c4:	801a      	strh	r2, [r3, #0]
 80003c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000474 <vTaskAppCAN+0x1a4>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	2b63      	cmp	r3, #99	@ 0x63
 80003cc:	d93e      	bls.n	800044c <vTaskAppCAN+0x17c>
	{
		if(u8TogglePin)
 80003ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000478 <vTaskAppCAN+0x1a8>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d006      	beq.n	80003e4 <vTaskAppCAN+0x114>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003dc:	4827      	ldr	r0, [pc, #156]	@ (800047c <vTaskAppCAN+0x1ac>)
 80003de:	f001 fdc3 	bl	8001f68 <HAL_GPIO_WritePin>
 80003e2:	e005      	b.n	80003f0 <vTaskAppCAN+0x120>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ea:	4824      	ldr	r0, [pc, #144]	@ (800047c <vTaskAppCAN+0x1ac>)
 80003ec:	f001 fdbc 	bl	8001f68 <HAL_GPIO_WritePin>
		}
		u8TogglePin = !u8TogglePin;
 80003f0:	4b21      	ldr	r3, [pc, #132]	@ (8000478 <vTaskAppCAN+0x1a8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf0c      	ite	eq
 80003f8:	2301      	moveq	r3, #1
 80003fa:	2300      	movne	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	4b1d      	ldr	r3, [pc, #116]	@ (8000478 <vTaskAppCAN+0x1a8>)
 8000402:	701a      	strb	r2, [r3, #0]

		stAppCANMsg.ucSrc = SRC_APPCAN;
 8000404:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <vTaskAppCAN+0x188>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
		stAppCANMsg.ucDest = SRC_APPCAN;
 800040a:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <vTaskAppCAN+0x188>)
 800040c:	2201      	movs	r2, #1
 800040e:	705a      	strb	r2, [r3, #1]
		stAppCANMsg.ucEvent = EVENT_APPCAN_TX;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <vTaskAppCAN+0x188>)
 8000412:	2202      	movs	r2, #2
 8000414:	709a      	strb	r2, [r3, #2]
		stAppCANMsg.pcMessageData = NULL;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <vTaskAppCAN+0x188>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
		xQueueGenericSend(*xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <vTaskAppCAN+0x184>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6818      	ldr	r0, [r3, #0]
 8000422:	2300      	movs	r3, #0
 8000424:	2200      	movs	r2, #0
 8000426:	490c      	ldr	r1, [pc, #48]	@ (8000458 <vTaskAppCAN+0x188>)
 8000428:	f003 fde4 	bl	8003ff4 <xQueueGenericSend>
		if(++u8FifoTxCAN >= FIFO_SIZE)
 800042c:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <vTaskAppCAN+0x1b0>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <vTaskAppCAN+0x1b0>)
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <vTaskAppCAN+0x1b0>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b07      	cmp	r3, #7
 800043e:	d902      	bls.n	8000446 <vTaskAppCAN+0x176>
		{
			u8FifoTxCAN = 0;
 8000440:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <vTaskAppCAN+0x1b0>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
		}
		u16TimeSlice = 0;
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <vTaskAppCAN+0x1a4>)
 8000448:	2200      	movs	r2, #0
 800044a:	801a      	strh	r2, [r3, #0]
	}
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000008c 	.word	0x2000008c
 8000458:	20000080 	.word	0x20000080
 800045c:	20000088 	.word	0x20000088
 8000460:	08006120 	.word	0x08006120
 8000464:	20000094 	.word	0x20000094
 8000468:	200000cc 	.word	0x200000cc
 800046c:	200000d0 	.word	0x200000d0
 8000470:	20000098 	.word	0x20000098
 8000474:	200001d0 	.word	0x200001d0
 8000478:	200001d2 	.word	0x200001d2
 800047c:	40010c00 	.word	0x40010c00
 8000480:	200000cd 	.word	0x200000cd

08000484 <TaskAppSerial_Entry>:
//              TaskAppSerial_Entry
//
//
//////////////////////////////////////////////
void TaskAppSerial_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
    xQueueAppSerial = xQueue;
 800048e:	4a10      	ldr	r2, [pc, #64]	@ (80004d0 <TaskAppSerial_Entry+0x4c>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6013      	str	r3, [r2, #0]
    xTimerAppSerial = xTimer;
 8000494:	4a0f      	ldr	r2, [pc, #60]	@ (80004d4 <TaskAppSerial_Entry+0x50>)
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	6013      	str	r3, [r2, #0]

    hUSART = hGet_USART_Handler();
 800049a:	f000 fe53 	bl	8001144 <hGet_USART_Handler>
 800049e:	4603      	mov	r3, r0
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <TaskAppSerial_Entry+0x54>)
 80004a2:	6013      	str	r3, [r2, #0]

    stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <TaskAppSerial_Entry+0x58>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
    stAppSerialMsg.ucDest = SRC_APPSERIAL;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <TaskAppSerial_Entry+0x58>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	705a      	strb	r2, [r3, #1]
    stAppSerialMsg.ucEvent = EVENT_APPSERIAL_INIT;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <TaskAppSerial_Entry+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <TaskAppSerial_Entry+0x4c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	2300      	movs	r3, #0
 80004be:	2200      	movs	r2, #0
 80004c0:	4906      	ldr	r1, [pc, #24]	@ (80004dc <TaskAppSerial_Entry+0x58>)
 80004c2:	f003 fd97 	bl	8003ff4 <xQueueGenericSend>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200001e0 	.word	0x200001e0
 80004d4:	200001e4 	.word	0x200001e4
 80004d8:	200001e8 	.word	0x200001e8
 80004dc:	200001d4 	.word	0x200001d4

080004e0 <TaskAppSerial_Start>:
//              TaskAppSerial_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_Start(sMessageType *psMessage)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]


	return boError;
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <TaskAppSerial_ReceiveEvent>:
//              TaskAppSerial_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_ReceiveEvent(sMessageType *psMessage)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]


	return boError;
 8000504:	7bfb      	ldrb	r3, [r7, #15]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <TaskAppSerial_TransmitEvent>:
//              TaskAppSerial_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_TransmitEvent(sMessageType *psMessage)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000518:	2301      	movs	r3, #1
 800051a:	75fb      	strb	r3, [r7, #23]

    uint8_t u8String[] = "Danilo Franco";
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <TaskAppSerial_TransmitEvent+0x40>)
 800051e:	f107 0408 	add.w	r4, r7, #8
 8000522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000524:	c407      	stmia	r4!, {r0, r1, r2}
 8000526:	8023      	strh	r3, [r4, #0]

    memcpy(u8FrameTxUSART,u8String,sizeof(u8String));
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <TaskAppSerial_TransmitEvent+0x44>)
 800052a:	461c      	mov	r4, r3
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000532:	c407      	stmia	r4!, {r0, r1, r2}
 8000534:	8023      	strh	r3, [r4, #0]

    (void)HAL_UART_Transmit(hUSART, u8FrameTxUSART, sizeof(u8String),10);
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <TaskAppSerial_TransmitEvent+0x48>)
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	230a      	movs	r3, #10
 800053c:	220e      	movs	r2, #14
 800053e:	4905      	ldr	r1, [pc, #20]	@ (8000554 <TaskAppSerial_TransmitEvent+0x44>)
 8000540:	f002 fbe8 	bl	8002d14 <HAL_UART_Transmit>

	return boError;
 8000544:	7dfb      	ldrb	r3, [r7, #23]
}
 8000546:	4618      	mov	r0, r3
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	08006008 	.word	0x08006008
 8000554:	2000026c 	.word	0x2000026c
 8000558:	200001e8 	.word	0x200001e8

0800055c <TaskAppSerial_IgnoreEvent>:
//              TaskAppSerial_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_IgnoreEvent(sMessageType *psMessage)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <vTaskAppSerial>:
	gasTaskAppSerial_Initializing,
	gasTaskAppSerial_Running
};

void vTaskAppSerial(void const * argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( *xQueueAppSerial, &stAppSerialMsg, 0 ) )
 800057c:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <vTaskAppSerial+0xc8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	492e      	ldr	r1, [pc, #184]	@ (8000640 <vTaskAppSerial+0xcc>)
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fed4 	bl	8004334 <xQueueReceive>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00a      	beq.n	80005a8 <vTaskAppSerial+0x34>
	{
		(void)eEventHandler ((unsigned char)SRC_APPSERIAL,gpasTaskAppSerial_StateMachine[ucCurrentStateAppSerial], &ucCurrentStateAppSerial, &stAppSerialMsg);
 8000592:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <vTaskAppSerial+0xd0>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b2b      	ldr	r3, [pc, #172]	@ (8000648 <vTaskAppSerial+0xd4>)
 800059a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005a0:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <vTaskAppSerial+0xd0>)
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fc58 	bl	8000e58 <eEventHandler>
	}

	memset(u8FrameRxUSART,0,sizeof(u8FrameRxUSART));
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	2100      	movs	r1, #0
 80005ac:	4827      	ldr	r0, [pc, #156]	@ (800064c <vTaskAppSerial+0xd8>)
 80005ae:	f005 fc39 	bl	8005e24 <memset>
	if(HAL_UART_Receive(hUSART, u8FrameRxUSART, sizeof(u8FrameRxUSART),0) == HAL_OK)
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <vTaskAppSerial+0xdc>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	4924      	ldr	r1, [pc, #144]	@ (800064c <vTaskAppSerial+0xd8>)
 80005bc:	f002 fc35 	bl	8002e2a <HAL_UART_Receive>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d113      	bne.n	80005ee <vTaskAppSerial+0x7a>
	{
		stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 80005c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
		stAppSerialMsg.ucDest = SRC_APPSERIAL;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	705a      	strb	r2, [r3, #1]
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_RX;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	709a      	strb	r2, [r3, #2]
		stAppSerialMsg.pcMessageData = (char*)&u8FrameRxUSART;
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <vTaskAppSerial+0xd8>)
 80005dc:	605a      	str	r2, [r3, #4]
		xQueueGenericSend(*xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <vTaskAppSerial+0xc8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	4915      	ldr	r1, [pc, #84]	@ (8000640 <vTaskAppSerial+0xcc>)
 80005ea:	f003 fd03 	bl	8003ff4 <xQueueGenericSend>
	}

	if(++u16TimeSlice >= 1000)
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <vTaskAppSerial+0xe0>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <vTaskAppSerial+0xe0>)
 80005f8:	801a      	strh	r2, [r3, #0]
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <vTaskAppSerial+0xe0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000602:	d316      	bcc.n	8000632 <vTaskAppSerial+0xbe>
	{
		stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <vTaskAppSerial+0xcc>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		stAppSerialMsg.ucDest = SRC_APPSERIAL;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <vTaskAppSerial+0xcc>)
 800060c:	2201      	movs	r2, #1
 800060e:	705a      	strb	r2, [r3, #1]
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_TX;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <vTaskAppSerial+0xcc>)
 8000612:	2202      	movs	r2, #2
 8000614:	709a      	strb	r2, [r3, #2]
		stAppSerialMsg.pcMessageData = NULL;
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <vTaskAppSerial+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
		xQueueGenericSend(*xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <vTaskAppSerial+0xc8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	2200      	movs	r2, #0
 8000626:	4906      	ldr	r1, [pc, #24]	@ (8000640 <vTaskAppSerial+0xcc>)
 8000628:	f003 fce4 	bl	8003ff4 <xQueueGenericSend>
		u16TimeSlice = 0;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <vTaskAppSerial+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	801a      	strh	r2, [r3, #0]
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200001e0 	.word	0x200001e0
 8000640:	200001d4 	.word	0x200001d4
 8000644:	200001dc 	.word	0x200001dc
 8000648:	08006164 	.word	0x08006164
 800064c:	200001ec 	.word	0x200001ec
 8000650:	200001e8 	.word	0x200001e8
 8000654:	200002ec 	.word	0x200002ec

08000658 <TaskIO_Entry>:
//              TaskIO_Entry
//
//
//////////////////////////////////////////////
void TaskIO_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    xQueueIO = xQueue;
 8000662:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <TaskIO_Entry+0x40>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6013      	str	r3, [r2, #0]
    xTimerIO = xTimer;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <TaskIO_Entry+0x44>)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	6013      	str	r3, [r2, #0]

    stIOMsg.ucSrc = SRC_IO;
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <TaskIO_Entry+0x48>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <TaskIO_Entry+0x48>)
 8000676:	2201      	movs	r2, #1
 8000678:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_INIT;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <TaskIO_Entry+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueIO, ( void * )&stIOMsg, 0,0);
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <TaskIO_Entry+0x40>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2200      	movs	r2, #0
 800068a:	4905      	ldr	r1, [pc, #20]	@ (80006a0 <TaskIO_Entry+0x48>)
 800068c:	f003 fcb2 	bl	8003ff4 <xQueueGenericSend>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200002fc 	.word	0x200002fc
 800069c:	20000300 	.word	0x20000300
 80006a0:	200002f0 	.word	0x200002f0

080006a4 <TaskIO_Start>:
//              TaskIO_Start
//
//
//////////////////////////////////////////////
unsigned char TaskIO_Start(sMessageType *psMessage)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]

    stIOMsg.ucSrc = SRC_IO;
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <TaskIO_Start+0x74>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <TaskIO_Start+0x74>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_NULL;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <TaskIO_Start+0x74>)
 80006be:	2204      	movs	r2, #4
 80006c0:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(*xQueueIO, ( void * )&stIOMsg, 0,0);
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <TaskIO_Start+0x78>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	4912      	ldr	r1, [pc, #72]	@ (8000718 <TaskIO_Start+0x74>)
 80006ce:	f003 fc91 	bl	8003ff4 <xQueueGenericSend>

    ulCountPulse = 0;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <TaskIO_Start+0x7c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOn = 0;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <TaskIO_Start+0x80>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOff = 0;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <TaskIO_Start+0x84>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
    ulCountPeriod = 0;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <TaskIO_Start+0x88>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]

	ulQtyPulse = 5;	/* 5 pulses*/
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <TaskIO_Start+0x8c>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	601a      	str	r2, [r3, #0]
	ulTimePulseOn = 2; 	/* 2*50 = 100ms*/
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <TaskIO_Start+0x90>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	601a      	str	r2, [r3, #0]
	ulTimePulseOff = 2; 	/* 2*50 = 100ms*/
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <TaskIO_Start+0x94>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
	ulPeriod = 40; 		/* 20*50 = 1s*/
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <TaskIO_Start+0x98>)
 80006fe:	2228      	movs	r2, #40	@ 0x28
 8000700:	601a      	str	r2, [r3, #0]

    (void)osTimerStart(xTimerIO,50);
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <TaskIO_Start+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2132      	movs	r1, #50	@ 0x32
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fe33 	bl	8003374 <osTimerStart>
	return boError;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200002f0 	.word	0x200002f0
 800071c:	200002fc 	.word	0x200002fc
 8000720:	20000304 	.word	0x20000304
 8000724:	20000308 	.word	0x20000308
 8000728:	2000030c 	.word	0x2000030c
 800072c:	20000310 	.word	0x20000310
 8000730:	20000314 	.word	0x20000314
 8000734:	20000318 	.word	0x20000318
 8000738:	2000031c 	.word	0x2000031c
 800073c:	20000320 	.word	0x20000320
 8000740:	20000300 	.word	0x20000300

08000744 <TaskIO_IgnoreEvent>:
//              TaskIO_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_IgnoreEvent(sMessageType *psMessage)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

    return(boError);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <vLocalTimerCallbackIo>:
//              vTimerCallbackIo
//
//
//////////////////////////////////////////////
void vLocalTimerCallbackIo(void const * argument)
 {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	ulCountPeriod++;
 8000764:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <vLocalTimerCallbackIo+0xc4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a2d      	ldr	r2, [pc, #180]	@ (8000820 <vLocalTimerCallbackIo+0xc4>)
 800076c:	6013      	str	r3, [r2, #0]
    if(ulCountPeriod <= ulPeriod)
 800076e:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <vLocalTimerCallbackIo+0xc4>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <vLocalTimerCallbackIo+0xc8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d83c      	bhi.n	80007f4 <vLocalTimerCallbackIo+0x98>
    {
    	if(ulCountPulse <= ((ulQtyPulse) * (ulTimePulseOn+ulTimePulseOff)))
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <vLocalTimerCallbackIo+0xcc>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <vLocalTimerCallbackIo+0xd0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <vLocalTimerCallbackIo+0xd4>)
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	fb03 f202 	mul.w	r2, r3, r2
 800078c:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <vLocalTimerCallbackIo+0xd8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d341      	bcc.n	8000818 <vLocalTimerCallbackIo+0xbc>
    	{
			if(ulCountTimePulseOn < ulTimePulseOn)
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <vLocalTimerCallbackIo+0xdc>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <vLocalTimerCallbackIo+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d20b      	bcs.n	80007b8 <vLocalTimerCallbackIo+0x5c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4825      	ldr	r0, [pc, #148]	@ (800083c <vLocalTimerCallbackIo+0xe0>)
 80007a8:	f001 fbde 	bl	8001f68 <HAL_GPIO_WritePin>
				ulCountTimePulseOn++;
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <vLocalTimerCallbackIo+0xdc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <vLocalTimerCallbackIo+0xdc>)
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	e017      	b.n	80007e8 <vLocalTimerCallbackIo+0x8c>
			}
			else
			{
				if(ulCountTimePulseOff < ulTimePulseOff )
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <vLocalTimerCallbackIo+0xe4>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <vLocalTimerCallbackIo+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d20b      	bcs.n	80007dc <vLocalTimerCallbackIo+0x80>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	481c      	ldr	r0, [pc, #112]	@ (800083c <vLocalTimerCallbackIo+0xe0>)
 80007cc:	f001 fbcc 	bl	8001f68 <HAL_GPIO_WritePin>
					ulCountTimePulseOff++;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <vLocalTimerCallbackIo+0xe4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <vLocalTimerCallbackIo+0xe4>)
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e005      	b.n	80007e8 <vLocalTimerCallbackIo+0x8c>
				}
				else
				{
					ulCountTimePulseOn = 0;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <vLocalTimerCallbackIo+0xdc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
					ulCountTimePulseOff= 0;
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <vLocalTimerCallbackIo+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
				}
			}
			ulCountPulse++;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <vLocalTimerCallbackIo+0xd8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <vLocalTimerCallbackIo+0xd8>)
 80007f0:	6013      	str	r3, [r2, #0]
      lastStateChangeTime = currentTime;
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledState);
#endif
 }
 80007f2:	e011      	b.n	8000818 <vLocalTimerCallbackIo+0xbc>
        ulCountPulse = 0;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <vLocalTimerCallbackIo+0xd8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOn = 0;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <vLocalTimerCallbackIo+0xdc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOff = 0;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <vLocalTimerCallbackIo+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
        ulCountPeriod = 0;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <vLocalTimerCallbackIo+0xc4>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000812:	480a      	ldr	r0, [pc, #40]	@ (800083c <vLocalTimerCallbackIo+0xe0>)
 8000814:	f001 fba8 	bl	8001f68 <HAL_GPIO_WritePin>
 }
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000310 	.word	0x20000310
 8000824:	20000320 	.word	0x20000320
 8000828:	20000318 	.word	0x20000318
 800082c:	2000031c 	.word	0x2000031c
 8000830:	20000314 	.word	0x20000314
 8000834:	20000304 	.word	0x20000304
 8000838:	20000308 	.word	0x20000308
 800083c:	40011000 	.word	0x40011000
 8000840:	2000030c 	.word	0x2000030c

08000844 <vTaskIO>:
	gasTaskIO_Initializing,
	gasTaskIO_Flashing
};

void vTaskIO(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( *xQueueIO, &stIOMsg, 0 ) )
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <vTaskIO+0x3c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	490b      	ldr	r1, [pc, #44]	@ (8000884 <vTaskIO+0x40>)
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fd6c 	bl	8004334 <xQueueReceive>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00a      	beq.n	8000878 <vTaskIO+0x34>
	{
		(void)eEventHandler ((unsigned char)SRC_IO,gpasTaskIO_StateMachine[ucCurrentStateIO], &ucCurrentStateIO, &stIOMsg);
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <vTaskIO+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <vTaskIO+0x48>)
 800086a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <vTaskIO+0x40>)
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <vTaskIO+0x44>)
 8000872:	2001      	movs	r0, #1
 8000874:	f000 faf0 	bl	8000e58 <eEventHandler>
	}
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200002fc 	.word	0x200002fc
 8000884:	200002f0 	.word	0x200002f0
 8000888:	200002f8 	.word	0x200002f8
 800088c:	08006190 	.word	0x08006190

08000890 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_CAN_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_CAN_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_CAN_Init+0x64>)
 800089c:	2208      	movs	r2, #8
 800089e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008b0:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80008b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008be:	2201      	movs	r2, #1
 80008c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008dc:	2201      	movs	r2, #1
 80008de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_CAN_Init+0x64>)
 80008e2:	f000 fc91 	bl	8001208 <HAL_CAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 fa92 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000324 	.word	0x20000324
 80008f8:	40006400 	.word	0x40006400

080008fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a25      	ldr	r2, [pc, #148]	@ (80009ac <HAL_CAN_MspInit+0xb0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d143      	bne.n	80009a4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	61d3      	str	r3, [r2, #28]
 8000928:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b1e      	ldr	r3, [pc, #120]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a1d      	ldr	r2, [pc, #116]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <HAL_CAN_MspInit+0xb4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <HAL_CAN_MspInit+0xb8>)
 8000962:	f001 f985 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <HAL_CAN_MspInit+0xb8>)
 800097c:	f001 f978 	bl	8001c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_CAN_MspInit+0xbc>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
 800099e:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <HAL_CAN_MspInit+0xbc>)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40006400 	.word	0x40006400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	40010000 	.word	0x40010000

080009bc <hGet_CAN_Handler>:
  }
}

/* USER CODE BEGIN 1 */
CAN_HandleTypeDef *hGet_CAN_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	return &hcan;
 80009c0:	4b02      	ldr	r3, [pc, #8]	@ (80009cc <hGet_CAN_Handler+0x10>)
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000324 	.word	0x20000324

080009d0 <stHAL_CAN_FilterConfig>:

HAL_StatusTypeDef stHAL_CAN_FilterConfig(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig0 =
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <stHAL_CAN_FilterConfig+0x30>)
 80009d8:	463c      	mov	r4, r7
 80009da:	461d      	mov	r5, r3
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009e8:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterMode =  CAN_FILTERMODE_IDLIST,
			.FilterScale = CAN_FILTERSCALE_16BIT,
			.SlaveStartFilterBank  = 0
	};

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <stHAL_CAN_FilterConfig+0x34>)
 80009f2:	f000 fd04 	bl	80013fe <HAL_CAN_ConfigFilter>

	return HAL_OK;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000a00:	08006018 	.word	0x08006018
 8000a04:	20000324 	.word	0x20000324

08000a08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <vApplicationGetIdleTaskMemory+0x28>)
 8000a18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000608 	.word	0x20000608
 8000a34:	200006a8 	.word	0x200006a8

08000a38 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8000a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <vApplicationGetTimerTaskMemory+0x30>)
 8000a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a56:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200008a8 	.word	0x200008a8
 8000a68:	20000948 	.word	0x20000948

08000a6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b0a4      	sub	sp, #144	@ 0x90
 8000a70:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerIO */
  osTimerDef(TimerIO, vTimerCallbackIo);
 8000a72:	4b3c      	ldr	r3, [pc, #240]	@ (8000b64 <MX_FREERTOS_Init+0xf8>)
 8000a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  TimerIOHandle = osTimerCreate(osTimer(TimerIO), osTimerPeriodic, NULL);
 8000a7e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000a82:	2200      	movs	r2, #0
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fc40 	bl	800330c <osTimerCreate>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a36      	ldr	r2, [pc, #216]	@ (8000b68 <MX_FREERTOS_Init+0xfc>)
 8000a90:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueIO */
  osMessageQDef(QueueIO, 16, uint16_t);
 8000a92:	4b36      	ldr	r3, [pc, #216]	@ (8000b6c <MX_FREERTOS_Init+0x100>)
 8000a94:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueIOHandle = osMessageCreate(osMessageQ(QueueIO), NULL);
 8000a9e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fca9 	bl	80033fc <osMessageCreate>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a30      	ldr	r2, [pc, #192]	@ (8000b70 <MX_FREERTOS_Init+0x104>)
 8000aae:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppCAN */
  osMessageQDef(QueueAppCAN, 16, uint16_t);
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <MX_FREERTOS_Init+0x100>)
 8000ab2:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppCANHandle = osMessageCreate(osMessageQ(QueueAppCAN), NULL);
 8000abc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fc9a 	bl	80033fc <osMessageCreate>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <MX_FREERTOS_Init+0x108>)
 8000acc:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppSerial */
  osMessageQDef(QueueAppSerial, 16, uint16_t);
 8000ace:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <MX_FREERTOS_Init+0x100>)
 8000ad0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppSerialHandle = osMessageCreate(osMessageQ(QueueAppSerial), NULL);
 8000ada:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fc8b 	bl	80033fc <osMessageCreate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <MX_FREERTOS_Init+0x10c>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskIO */
  osThreadDef(TaskIO, TaskIO_Init, osPriorityIdle, 0, 128);
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_FREERTOS_Init+0x110>)
 8000aee:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000afc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskIOHandle = osThreadCreate(osThread(TaskIO), NULL);
 8000b00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fb9f 	bl	800324a <osThreadCreate>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <MX_FREERTOS_Init+0x114>)
 8000b10:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppCAN */
  osThreadDef(TaskAppCAN, TaskAppCAN_Init, osPriorityIdle, 0, 128);
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_FREERTOS_Init+0x118>)
 8000b14:	f107 0420 	add.w	r4, r7, #32
 8000b18:	461d      	mov	r5, r3
 8000b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppCANHandle = osThreadCreate(osThread(TaskAppCAN), NULL);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fb8c 	bl	800324a <osThreadCreate>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <MX_FREERTOS_Init+0x11c>)
 8000b36:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppSerial */
  osThreadStaticDef(TaskAppSerial, TaskAppSerial_Init, osPriorityLow, 0, 128, TaskAppSerialBuffer, &TaskAppSerialControlBlock);
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_FREERTOS_Init+0x120>)
 8000b3a:	1d3c      	adds	r4, r7, #4
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppSerialHandle = osThreadCreate(osThread(TaskAppSerial), NULL);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fb7b 	bl	800324a <osThreadCreate>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <MX_FREERTOS_Init+0x124>)
 8000b58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b5a:	bf00      	nop
 8000b5c:	3790      	adds	r7, #144	@ 0x90
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	08000c09 	.word	0x08000c09
 8000b68:	20000604 	.word	0x20000604
 8000b6c:	08006040 	.word	0x08006040
 8000b70:	200005f8 	.word	0x200005f8
 8000b74:	200005fc 	.word	0x200005fc
 8000b78:	20000600 	.word	0x20000600
 8000b7c:	08006058 	.word	0x08006058
 8000b80:	2000034c 	.word	0x2000034c
 8000b84:	08006080 	.word	0x08006080
 8000b88:	20000350 	.word	0x20000350
 8000b8c:	080060ac 	.word	0x080060ac
 8000b90:	20000354 	.word	0x20000354

08000b94 <TaskIO_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskIO_Init */
void TaskIO_Init(void const * argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskIO_Init */
  /* Infinite loop */
  TaskIO_Entry(&QueueIOHandle,TimerIOHandle);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <TaskIO_Init+0x24>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <TaskIO_Init+0x28>)
 8000ba4:	f7ff fd58 	bl	8000658 <TaskIO_Entry>
  for(;;)
  {
    osDelay(50);
 8000ba8:	2032      	movs	r0, #50	@ 0x32
 8000baa:	f002 fb9a 	bl	80032e2 <osDelay>
    vTaskIO(argument);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fe48 	bl	8000844 <vTaskIO>
    osDelay(50);
 8000bb4:	bf00      	nop
 8000bb6:	e7f7      	b.n	8000ba8 <TaskIO_Init+0x14>
 8000bb8:	20000604 	.word	0x20000604
 8000bbc:	200005f8 	.word	0x200005f8

08000bc0 <TaskAppCAN_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppCAN_Init */
void TaskAppCAN_Init(void const * argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppCAN_Init */
  /* Infinite loop */
  TaskAppCAN_Entry(&QueueAppCANHandle,NULL);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <TaskAppCAN_Init+0x20>)
 8000bcc:	f7ff fac0 	bl	8000150 <TaskAppCAN_Entry>
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f002 fb86 	bl	80032e2 <osDelay>
    vTaskAppCAN(argument);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fb7a 	bl	80002d0 <vTaskAppCAN>
    osDelay(1);
 8000bdc:	bf00      	nop
 8000bde:	e7f7      	b.n	8000bd0 <TaskAppCAN_Init+0x10>
 8000be0:	200005fc 	.word	0x200005fc

08000be4 <TaskAppSerial_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppSerial_Init */
void TaskAppSerial_Init(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppSerial_Init */
  /* Infinite loop */
  TaskAppSerial_Entry(&QueueAppSerialHandle,NULL);
 8000bec:	2100      	movs	r1, #0
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <TaskAppSerial_Init+0x20>)
 8000bf0:	f7ff fc48 	bl	8000484 <TaskAppSerial_Entry>
  for(;;)
  {
    osDelay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f002 fb74 	bl	80032e2 <osDelay>
    vTaskAppSerial(argument);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fcba 	bl	8000574 <vTaskAppSerial>
    osDelay(1);
 8000c00:	bf00      	nop
 8000c02:	e7f7      	b.n	8000bf4 <TaskAppSerial_Init+0x10>
 8000c04:	20000600 	.word	0x20000600

08000c08 <vTimerCallbackIo>:
  /* USER CODE END TaskAppSerial_Init */
}

/* vTimerCallbackIo function */
void vTimerCallbackIo(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerCallbackIo */
	vLocalTimerCallbackIo(argument);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fda3 	bl	800075c <vLocalTimerCallbackIo>
  /* USER CODE END vTimerCallbackIo */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	4b3f      	ldr	r3, [pc, #252]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a3e      	ldr	r2, [pc, #248]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b3c      	ldr	r3, [pc, #240]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a38      	ldr	r2, [pc, #224]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0320 	and.w	r3, r3, #32
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a32      	ldr	r2, [pc, #200]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a2c      	ldr	r2, [pc, #176]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <MX_GPIO_Init+0x114>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9a:	4827      	ldr	r0, [pc, #156]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000c9c:	f001 f964 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca6:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <MX_GPIO_Init+0x11c>)
 8000ca8:	f001 f95e 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481c      	ldr	r0, [pc, #112]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cc6:	f000 ffd3 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <MX_GPIO_Init+0x118>)
 8000cdc:	f000 ffc8 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ce0:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000ce4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <MX_GPIO_Init+0x120>)
 8000cf2:	f000 ffbd 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cf6:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 8000cfa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_GPIO_Init+0x11c>)
 8000d08:	f000 ffb2 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_GPIO_Init+0x11c>)
 8000d26:	f000 ffa3 	bl	8001c70 <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40010800 	.word	0x40010800

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fa2c 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f80c 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f7ff ff66 	bl	8000c20 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d54:	f7ff fd9c 	bl	8000890 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000d58:	f000 f97e 	bl	8001058 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d5c:	f7ff fe86 	bl	8000a6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d60:	f002 fa6c 	bl	800323c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <main+0x20>

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	@ 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	@ 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 f854 	bl	8005e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000da6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f8f1 	bl	8001f98 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f82a 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fb5f 	bl	800249c <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000de4:	f000 f816 	bl	8000e14 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3740      	adds	r7, #64	@ 0x40
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e02:	f000 f9e5 	bl	80011d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40012c00 	.word	0x40012c00

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <psSearchEvent>:

#include "state.h"


const sStateMachineType *psSearchEvent (const sStateMachineType *psStateTable,unsigned char ucIncoming)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
    unsigned char ucEvent;

    for (;; psStateTable++)
    {
        ucEvent = psStateTable->ucEvent;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	73fb      	strb	r3, [r7, #15]
        if ((ucEvent != 0)&&(ucEvent != ucIncoming))
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <psSearchEvent+0x20>
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d101      	bne.n	8000e44 <psSearchEvent+0x24>
        {
           continue;
        }
        return psStateTable;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	e004      	b.n	8000e4e <psSearchEvent+0x2e>
           continue;
 8000e44:	bf00      	nop
    for (;; psStateTable++)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	607b      	str	r3, [r7, #4]
        ucEvent = psStateTable->ucEvent;
 8000e4c:	e7ee      	b.n	8000e2c <psSearchEvent+0xc>
    }

}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <eEventHandler>:

void eEventHandler (unsigned char ucDest,const sStateMachineType *psStateTable, unsigned char *piState, sMessageType *psMessage)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
    unsigned char eError = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	75fb      	strb	r3, [r7, #23]

    if(ucDest == psMessage->ucDest)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d118      	bne.n	8000ea8 <eEventHandler+0x50>
    {
        psStateTable = psSearchEvent(psStateTable, psMessage->ucEvent);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	789b      	ldrb	r3, [r3, #2]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	68b8      	ldr	r0, [r7, #8]
 8000e7e:	f7ff ffcf 	bl	8000e20 <psSearchEvent>
 8000e82:	60b8      	str	r0, [r7, #8]

        eError = (*psStateTable->ActionFun)(psMessage);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	4798      	blx	r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	75fb      	strb	r3, [r7, #23]

        if (eError == 1)
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d104      	bne.n	8000ea0 <eEventHandler+0x48>
        {
            *piState = psStateTable->ucStateSuccess;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	7a1a      	ldrb	r2, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	701a      	strb	r2, [r3, #0]
        else
        {
            *piState = psStateTable->ucStateFailure;
        }
    }
}
 8000e9e:	e003      	b.n	8000ea8 <eEventHandler+0x50>
            *piState = psStateTable->ucStateFailure;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	7a5a      	ldrb	r2, [r3, #9]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	701a      	strb	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_MspInit+0x68>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a17      	ldr	r2, [pc, #92]	@ (8000f18 <HAL_MspInit+0x68>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_MspInit+0x68>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_MspInit+0x68>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a11      	ldr	r2, [pc, #68]	@ (8000f18 <HAL_MspInit+0x68>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_MspInit+0x68>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210f      	movs	r1, #15
 8000eea:	f06f 0001 	mvn.w	r0, #1
 8000eee:	f000 fe94 	bl	8001c1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_MspInit+0x6c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_MspInit+0x6c>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000

08000f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	@ 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <HAL_InitTick+0xd0>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff0 <HAL_InitTick+0xd0>)
 8000f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <HAL_InitTick+0xd0>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fc0f 	bl	800277c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f5e:	f001 fbf9 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8000f62:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f66:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <HAL_InitTick+0xd4>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	0c9b      	lsrs	r3, r3, #18
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <HAL_InitTick+0xdc>)
 8000f76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f98:	4817      	ldr	r0, [pc, #92]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000f9a:	f001 fc3d 	bl	8002818 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11b      	bne.n	8000fe4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fac:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <HAL_InitTick+0xd8>)
 8000fae:	f001 fc8b 	bl	80028c8 <HAL_TIM_Base_Start_IT>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d111      	bne.n	8000fe4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 fe46 	bl	8001c52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d808      	bhi.n	8000fde <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2019      	movs	r0, #25
 8000fd2:	f000 fe22 	bl	8001c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <HAL_InitTick+0xe0>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e002      	b.n	8000fe4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3730      	adds	r7, #48	@ 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	431bde83 	.word	0x431bde83
 8000ff8:	20000d48 	.word	0x20000d48
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	20000008 	.word	0x20000008

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <UsageFault_Handler+0x4>

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <TIM1_UP_IRQHandler+0x10>)
 800103e:	f001 fc8f 	bl	8002960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000d48 	.word	0x20000d48

0800104c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_USART1_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_USART1_UART_Init+0x4c>)
 8001090:	f001 fdf0 	bl	8002c74 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f7ff febb 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000d90 	.word	0x20000d90
 80010a8:	40013800 	.word	0x40013800

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <HAL_UART_MspInit+0x8c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d131      	bne.n	8001130 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_UART_MspInit+0x90>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <HAL_UART_MspInit+0x94>)
 8001112:	f000 fdad 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800111a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_UART_MspInit+0x94>)
 800112c:	f000 fda0 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40013800 	.word	0x40013800
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800

08001144 <hGet_USART_Handler>:
  }
}

/* USER CODE BEGIN 1 */
UART_HandleTypeDef *hGet_USART_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	return &huart1;
 8001148:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <hGet_USART_Handler+0x10>)
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000d90 	.word	0x20000d90

08001158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f7ff ff78 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480b      	ldr	r0, [pc, #44]	@ (800118c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800115e:	490c      	ldr	r1, [pc, #48]	@ (8001190 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001160:	4a0c      	ldr	r2, [pc, #48]	@ (8001194 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001174:	4c09      	ldr	r4, [pc, #36]	@ (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f004 fead 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fddd 	bl	8000d44 <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001194:	080061cc 	.word	0x080061cc
  ldr r2, =_sbss
 8001198:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800119c:	20001dac 	.word	0x20001dac

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_Init+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_Init+0x28>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 fd25 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f7ff feb0 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fe76 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a03      	ldr	r2, [pc, #12]	@ (80011f0 <HAL_IncTick+0x20>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000dd8 	.word	0x20000dd8

080011f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	@ (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000dd8 	.word	0x20000dd8

08001208 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0ed      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fb68 	bl	80008fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff ffda 	bl	80011f4 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001242:	e012      	b.n	800126a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001244:	f7ff ffd6 	bl	80011f4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90b      	bls.n	800126a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0c5      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0e5      	beq.n	8001244 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0202 	bic.w	r2, r2, #2
 8001286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff ffb4 	bl	80011f4 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128e:	e012      	b.n	80012b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001290:	f7ff ffb0 	bl	80011f4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d90b      	bls.n	80012b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2205      	movs	r2, #5
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e09f      	b.n	80013f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e5      	bne.n	8001290 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e5b      	ldrb	r3, [r3, #25]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e9b      	ldrb	r3, [r3, #26]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0220 	bic.w	r2, r2, #32
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7edb      	ldrb	r3, [r3, #27]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0210 	bic.w	r2, r2, #16
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0210 	orr.w	r2, r2, #16
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7f1b      	ldrb	r3, [r3, #28]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0208 	orr.w	r2, r2, #8
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0208 	bic.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7f5b      	ldrb	r3, [r3, #29]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0204 	orr.w	r2, r2, #4
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0204 	bic.w	r2, r2, #4
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	ea42 0103 	orr.w	r1, r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013fe:	b480      	push	{r7}
 8001400:	b087      	sub	sp, #28
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001416:	7cfb      	ldrb	r3, [r7, #19]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d003      	beq.n	8001424 <HAL_CAN_ConfigFilter+0x26>
 800141c:	7cfb      	ldrb	r3, [r7, #19]
 800141e:	2b02      	cmp	r3, #2
 8001420:	f040 80aa 	bne.w	8001578 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800142a:	f043 0201 	orr.w	r2, r3, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2201      	movs	r2, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d123      	bne.n	80014a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	401a      	ands	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001480:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3248      	adds	r2, #72	@ 0x48
 8001486:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800149a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800149c:	6979      	ldr	r1, [r7, #20]
 800149e:	3348      	adds	r3, #72	@ 0x48
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d122      	bne.n	80014f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3248      	adds	r2, #72	@ 0x48
 80014d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	3348      	adds	r3, #72	@ 0x48
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800150e:	e007      	b.n	8001520 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800153a:	e007      	b.n	800154c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	431a      	orrs	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	431a      	orrs	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800156a:	f023 0201 	bic.w	r2, r3, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e006      	b.n	8001586 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d12e      	bne.n	8001602 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fe1a 	bl	80011f4 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff fe16 	bl	80011f4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e012      	b.n	8001610 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e5      	bne.n	80015c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e006      	b.n	8001610 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d003      	beq.n	8001644 <HAL_CAN_AddTxMessage+0x2c>
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 80ad 	bne.w	800179e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8095 	beq.w	800178e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0e1b      	lsrs	r3, r3, #24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10d      	bne.n	800169c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6809      	ldr	r1, [r1, #0]
 800168e:	431a      	orrs	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3318      	adds	r3, #24
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00f      	b.n	80016bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ac:	68f9      	ldr	r1, [r7, #12]
 80016ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3318      	adds	r3, #24
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	440b      	add	r3, r1
 80016ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3318      	adds	r3, #24
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	7d1b      	ldrb	r3, [r3, #20]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d111      	bne.n	80016fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3318      	adds	r3, #24
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	6811      	ldr	r1, [r2, #0]
 80016ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3318      	adds	r3, #24
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	3304      	adds	r3, #4
 80016fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3307      	adds	r3, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	061a      	lsls	r2, r3, #24
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3306      	adds	r3, #6
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3305      	adds	r3, #5
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	4313      	orrs	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	3204      	adds	r2, #4
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	4610      	mov	r0, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	ea43 0200 	orr.w	r2, r3, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	440b      	add	r3, r1
 800172e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001732:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3303      	adds	r3, #3
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	061a      	lsls	r2, r3, #24
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3302      	adds	r3, #2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3301      	adds	r3, #1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4313      	orrs	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	4610      	mov	r0, r2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	ea43 0200 	orr.w	r2, r3, r0
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001768:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3318      	adds	r3, #24
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	6811      	ldr	r1, [r2, #0]
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3318      	adds	r3, #24
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	440b      	add	r3, r1
 8001788:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e00e      	b.n	80017ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e006      	b.n	80017ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3724      	adds	r7, #36	@ 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d11d      	bne.n	8001812 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001832:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d003      	beq.n	8001842 <HAL_CAN_GetRxMessage+0x24>
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 8103 	bne.w	8001a48 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10e      	bne.n	8001866 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0f7      	b.n	8001a56 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0e8      	b.n	8001a56 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	331b      	adds	r3, #27
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0204 	and.w	r2, r3, #4
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	331b      	adds	r3, #27
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0d5b      	lsrs	r3, r3, #21
 80018b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	331b      	adds	r3, #27
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	331b      	adds	r3, #27
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0202 	and.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	331b      	adds	r3, #27
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2208      	movs	r2, #8
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	e00b      	b.n	8001922 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	331b      	adds	r3, #27
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 020f 	and.w	r2, r3, #15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	331b      	adds	r3, #27
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	331b      	adds	r3, #27
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0a1a      	lsrs	r2, r3, #8
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0c1a      	lsrs	r2, r3, #16
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3302      	adds	r3, #2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0e1a      	lsrs	r2, r3, #24
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	3303      	adds	r3, #3
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3304      	adds	r3, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0a1a      	lsrs	r2, r3, #8
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3305      	adds	r3, #5
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0c1a      	lsrs	r2, r3, #16
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	3306      	adds	r3, #6
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e1a      	lsrs	r2, r3, #24
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3307      	adds	r3, #7
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e007      	b.n	8001a44 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e006      	b.n	8001a56 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d10f      	bne.n	8001aa2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e005      	b.n	8001aa2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	@ (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	@ (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff4f 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff64 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ffb2 	bl	8001ba0 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff81 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff57 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	@ 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e161      	b.n	8001f48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8150 	bne.w	8001f42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a97      	ldr	r2, [pc, #604]	@ (8001f04 <HAL_GPIO_Init+0x294>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4a95      	ldr	r2, [pc, #596]	@ (8001f04 <HAL_GPIO_Init+0x294>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4a95      	ldr	r2, [pc, #596]	@ (8001f08 <HAL_GPIO_Init+0x298>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a93      	ldr	r2, [pc, #588]	@ (8001f08 <HAL_GPIO_Init+0x298>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a93      	ldr	r2, [pc, #588]	@ (8001f0c <HAL_GPIO_Init+0x29c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a91      	ldr	r2, [pc, #580]	@ (8001f0c <HAL_GPIO_Init+0x29c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a91      	ldr	r2, [pc, #580]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a8f      	ldr	r2, [pc, #572]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a8d      	ldr	r2, [pc, #564]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a76      	ldr	r2, [pc, #472]	@ (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	@ 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80a9 	beq.w	8001f42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a49      	ldr	r2, [pc, #292]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b47      	ldr	r3, [pc, #284]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a45      	ldr	r2, [pc, #276]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f24 <HAL_GPIO_Init+0x2b4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1dc>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1d8>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e004      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_GPIO_Init+0x1e2>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e62:	492f      	ldr	r1, [pc, #188]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	492b      	ldr	r1, [pc, #172]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8a:	4b29      	ldr	r3, [pc, #164]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4927      	ldr	r1, [pc, #156]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4921      	ldr	r1, [pc, #132]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	491d      	ldr	r1, [pc, #116]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4917      	ldr	r1, [pc, #92]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4913      	ldr	r1, [pc, #76]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01f      	beq.n	8001f34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	490d      	ldr	r1, [pc, #52]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e01f      	b.n	8001f42 <HAL_GPIO_Init+0x2d2>
 8001f02:	bf00      	nop
 8001f04:	10320000 	.word	0x10320000
 8001f08:	10310000 	.word	0x10310000
 8001f0c:	10220000 	.word	0x10220000
 8001f10:	10210000 	.word	0x10210000
 8001f14:	10120000 	.word	0x10120000
 8001f18:	10110000 	.word	0x10110000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40010c00 	.word	0x40010c00
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	4909      	ldr	r1, [pc, #36]	@ (8001f64 <HAL_GPIO_Init+0x2f4>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	3301      	adds	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ae96 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	372c      	adds	r7, #44	@ 0x2c
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	041a      	lsls	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e272      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8087 	beq.w	80020c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb8:	4b92      	ldr	r3, [pc, #584]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d00c      	beq.n	8001fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d112      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
 8001fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fde:	4b89      	ldr	r3, [pc, #548]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d06c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x12c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d168      	bne.n	80020c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e24c      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x76>
 8002000:	4b80      	ldr	r3, [pc, #512]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a7f      	ldr	r2, [pc, #508]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e02e      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b7b      	ldr	r3, [pc, #492]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a7a      	ldr	r2, [pc, #488]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b78      	ldr	r3, [pc, #480]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a77      	ldr	r2, [pc, #476]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0xbc>
 800203a:	4b72      	ldr	r3, [pc, #456]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a71      	ldr	r2, [pc, #452]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6f      	ldr	r3, [pc, #444]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002054:	4b6b      	ldr	r3, [pc, #428]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a6a      	ldr	r2, [pc, #424]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b68      	ldr	r3, [pc, #416]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a67      	ldr	r2, [pc, #412]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800206a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f8be 	bl	80011f4 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f8ba 	bl	80011f4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e200      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5d      	ldr	r3, [pc, #372]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xe4>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f8aa 	bl	80011f4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f8a6 	bl	80011f4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1ec      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x10c>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020de:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
 80020ea:	4b46      	ldr	r3, [pc, #280]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b43      	ldr	r3, [pc, #268]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c0      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3d      	ldr	r3, [pc, #244]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4939      	ldr	r1, [pc, #228]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b36      	ldr	r3, [pc, #216]	@ (8002208 <HAL_RCC_OscConfig+0x270>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff f85f 	bl	80011f4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f85b 	bl	80011f4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4927      	ldr	r1, [pc, #156]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b26      	ldr	r3, [pc, #152]	@ (8002208 <HAL_RCC_OscConfig+0x270>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff f83e 	bl	80011f4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f83a 	bl	80011f4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e180      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03a      	beq.n	800221c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_RCC_OscConfig+0x274>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff f81e 	bl	80011f4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f81a 	bl	80011f4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e160      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f000 fafe 	bl	80027dc <RCC_Delay>
 80021e0:	e01c      	b.n	800221c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_RCC_OscConfig+0x274>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff f804 	bl	80011f4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff f800 	bl	80011f4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d908      	bls.n	8002210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e146      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	42420000 	.word	0x42420000
 800220c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	4b92      	ldr	r3, [pc, #584]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1e9      	bne.n	80021f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a6 	beq.w	8002376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b8b      	ldr	r3, [pc, #556]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b88      	ldr	r3, [pc, #544]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a87      	ldr	r2, [pc, #540]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b85      	ldr	r3, [pc, #532]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b82      	ldr	r3, [pc, #520]	@ (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b7f      	ldr	r3, [pc, #508]	@ (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	@ (8002460 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe ffc1 	bl	80011f4 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7fe ffbd 	bl	80011f4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	@ 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e103      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	4b75      	ldr	r3, [pc, #468]	@ (8002460 <HAL_RCC_OscConfig+0x4c8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x312>
 800229c:	4b6f      	ldr	r3, [pc, #444]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a6e      	ldr	r2, [pc, #440]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x334>
 80022b2:	4b6a      	ldr	r3, [pc, #424]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a69      	ldr	r2, [pc, #420]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b67      	ldr	r3, [pc, #412]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a66      	ldr	r2, [pc, #408]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x356>
 80022d4:	4b61      	ldr	r3, [pc, #388]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a60      	ldr	r2, [pc, #384]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	4b5e      	ldr	r3, [pc, #376]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x36e>
 80022ee:	4b5b      	ldr	r3, [pc, #364]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a5a      	ldr	r2, [pc, #360]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b58      	ldr	r3, [pc, #352]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a57      	ldr	r2, [pc, #348]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe ff71 	bl	80011f4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe ff6d 	bl	80011f4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0b1      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b4b      	ldr	r3, [pc, #300]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x37e>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe ff5b 	bl	80011f4 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe ff57 	bl	80011f4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e09b      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b40      	ldr	r3, [pc, #256]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a3b      	ldr	r2, [pc, #236]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b36      	ldr	r3, [pc, #216]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d061      	beq.n	8002450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d146      	bne.n	8002422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe ff2b 	bl	80011f4 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe ff27 	bl	80011f4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e06d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	4b29      	ldr	r3, [pc, #164]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f0      	bne.n	80023a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c8:	d108      	bne.n	80023dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4921      	ldr	r1, [pc, #132]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a19      	ldr	r1, [r3, #32]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	430b      	orrs	r3, r1
 80023ee:	491b      	ldr	r1, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fefb 	bl	80011f4 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fef7 	bl	80011f4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e03d      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x46a>
 8002420:	e035      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fee4 	bl	80011f4 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fee0 	bl	80011f4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e026      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_RCC_OscConfig+0x4c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x498>
 800244e:	e01e      	b.n	800248e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e019      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x500>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d0      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b6a      	ldr	r3, [pc, #424]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b67      	ldr	r3, [pc, #412]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4965      	ldr	r1, [pc, #404]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b63      	ldr	r3, [pc, #396]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b8      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a52      	ldr	r2, [pc, #328]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800251a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b50      	ldr	r3, [pc, #320]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494d      	ldr	r1, [pc, #308]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d115      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07f      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e073      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06b      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4936      	ldr	r1, [pc, #216]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe fe32 	bl	80011f4 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fe2e 	bl	80011f4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e053      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b27      	ldr	r3, [pc, #156]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d210      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4922      	ldr	r1, [pc, #136]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e032      	b.n	8002652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4916      	ldr	r1, [pc, #88]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490e      	ldr	r1, [pc, #56]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f821 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490a      	ldr	r1, [pc, #40]	@ (8002664 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	fa22 f303 	lsr.w	r3, r2, r3
 8002642:	4a09      	ldr	r2, [pc, #36]	@ (8002668 <HAL_RCC_ClockConfig+0x1cc>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1d0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fc68 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
 8002664:	08006198 	.word	0x08006198
 8002668:	20000004 	.word	0x20000004
 800266c:	20000008 	.word	0x20000008

08002670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268a:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d002      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x30>
 800269a:	2b08      	cmp	r3, #8
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x36>
 800269e:	e027      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	613b      	str	r3, [r7, #16]
      break;
 80026a4:	e027      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	0c9b      	lsrs	r3, r3, #18
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0c5b      	lsrs	r3, r3, #17
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x98>)
 80026d2:	fb03 f202 	mul.w	r2, r3, r2
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e004      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	613b      	str	r3, [r7, #16]
      break;
 80026ee:	e002      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x98>)
 80026f2:	613b      	str	r3, [r7, #16]
      break;
 80026f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f6:	693b      	ldr	r3, [r7, #16]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	007a1200 	.word	0x007a1200
 800270c:	080061b0 	.word	0x080061b0
 8002710:	080061c0 	.word	0x080061c0
 8002714:	003d0900 	.word	0x003d0900

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b02      	ldr	r3, [pc, #8]	@ (8002728 <HAL_RCC_GetHCLKFreq+0x10>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff2 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	080061a8 	.word	0x080061a8

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffde 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0adb      	lsrs	r3, r3, #11
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	080061a8 	.word	0x080061a8

0800277c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	220f      	movs	r2, #15
 800278a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_GetClockConfig+0x58>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_RCC_GetClockConfig+0x58>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <HAL_RCC_GetClockConfig+0x58>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_RCC_GetClockConfig+0x58>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_GetClockConfig+0x5c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0207 	and.w	r2, r3, #7
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40022000 	.word	0x40022000

080027dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <RCC_Delay+0x34>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <RCC_Delay+0x38>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a5b      	lsrs	r3, r3, #9
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f8:	bf00      	nop
  }
  while (Delay --);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	60fa      	str	r2, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f9      	bne.n	80027f8 <RCC_Delay+0x1c>
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000004 	.word	0x20000004
 8002814:	10624dd3 	.word	0x10624dd3

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e041      	b.n	80028ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f839 	bl	80028b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 f996 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e035      	b.n	800294c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_TIM_Base_Start_IT+0x90>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0x4e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d004      	beq.n	8002916 <HAL_TIM_Base_Start_IT+0x4e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a12      	ldr	r2, [pc, #72]	@ (800295c <HAL_TIM_Base_Start_IT+0x94>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d111      	bne.n	800293a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b06      	cmp	r3, #6
 8002926:	d010      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002938:	e007      	b.n	800294a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400

08002960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d020      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8d1 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8c4 	bl	8002b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8d3 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0204 	mvn.w	r2, #4
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8ab 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f89e 	bl	8002b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8ad 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0208 	mvn.w	r2, #8
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2204      	movs	r2, #4
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f885 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f878 	bl	8002b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f887 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0210 	mvn.w	r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f85f 	bl	8002b52 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f852 	bl	8002b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f861 	bl	8002b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe f992 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8b9 	bl	8002c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f831 	bl	8002b76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0220 	mvn.w	r2, #32
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f88c 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <TIM_Base_SetConfig+0xc0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x28>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x28>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a28      	ldr	r2, [pc, #160]	@ (8002c4c <TIM_Base_SetConfig+0xc4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <TIM_Base_SetConfig+0xc0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <TIM_Base_SetConfig+0x52>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd0:	d003      	beq.n	8002bda <TIM_Base_SetConfig+0x52>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <TIM_Base_SetConfig+0xc4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d108      	bne.n	8002bec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <TIM_Base_SetConfig+0xc0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d103      	bne.n	8002c20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e042      	b.n	8002d0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fa06 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fa09 	bl	80030d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	@ 0x28
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d175      	bne.n	8002e20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Transmit+0x2c>
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e06e      	b.n	8002e22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2221      	movs	r2, #33	@ 0x21
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fa4f 	bl	80011f4 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d6c:	d108      	bne.n	8002d80 <HAL_UART_Transmit+0x6c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d104      	bne.n	8002d80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e003      	b.n	8002d88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d88:	e02e      	b.n	8002de8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f8df 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e03a      	b.n	8002e22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e007      	b.n	8002dda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1cb      	bne.n	8002d8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2140      	movs	r1, #64	@ 0x40
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f8ab 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e006      	b.n	8002e22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b08a      	sub	sp, #40	@ 0x28
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 8081 	bne.w	8002f4e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_UART_Receive+0x2e>
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e079      	b.n	8002f50 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	@ 0x22
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e70:	f7fe f9c0 	bl	80011f4 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8a:	d108      	bne.n	8002e9e <HAL_UART_Receive+0x74>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d104      	bne.n	8002e9e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e003      	b.n	8002ea6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ea6:	e047      	b.n	8002f38 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f850 	bl	8002f58 <UART_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e042      	b.n	8002f50 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10c      	bne.n	8002eea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e01f      	b.n	8002f2a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef2:	d007      	beq.n	8002f04 <HAL_UART_Receive+0xda>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_UART_Receive+0xe8>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e008      	b.n	8002f24 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1b2      	bne.n	8002ea8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	e03b      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f70:	d037      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe f93f 	bl	80011f4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e03a      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d023      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b80      	cmp	r3, #128	@ 0x80
 8002f9e:	d020      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b40      	cmp	r3, #64	@ 0x40
 8002fa4:	d01d      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d116      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f81d 	bl	800300a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d0b4      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800300a:	b480      	push	{r7}
 800300c:	b095      	sub	sp, #84	@ 0x54
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003032:	643a      	str	r2, [r7, #64]	@ 0x40
 8003034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e5      	bne.n	8003012 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	61fb      	str	r3, [r7, #28]
   return(result);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800306c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	2b01      	cmp	r3, #1
 8003080:	d119      	bne.n	80030b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	60bb      	str	r3, [r7, #8]
   return(result);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f023 0310 	bic.w	r3, r3, #16
 8003098:	647b      	str	r3, [r7, #68]	@ 0x44
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030a2:	61ba      	str	r2, [r7, #24]
 80030a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	613b      	str	r3, [r7, #16]
   return(result);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030c4:	bf00      	nop
 80030c6:	3754      	adds	r7, #84	@ 0x54
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800310a:	f023 030c 	bic.w	r3, r3, #12
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	430b      	orrs	r3, r1
 8003116:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2c      	ldr	r2, [pc, #176]	@ (80031e4 <UART_SetConfig+0x114>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7ff fb0c 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	e002      	b.n	8003146 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7ff faf4 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8003144:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	4a22      	ldr	r2, [pc, #136]	@ (80031e8 <UART_SetConfig+0x118>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	0119      	lsls	r1, r3, #4
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b1a      	ldr	r3, [pc, #104]	@ (80031e8 <UART_SetConfig+0x118>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	@ 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	3332      	adds	r3, #50	@ 0x32
 8003190:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <UART_SetConfig+0x118>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800319c:	4419      	add	r1, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <UART_SetConfig+0x118>)
 80031b6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2064      	movs	r0, #100	@ 0x64
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	3332      	adds	r3, #50	@ 0x32
 80031c8:	4a07      	ldr	r2, [pc, #28]	@ (80031e8 <UART_SetConfig+0x118>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	440a      	add	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40013800 	.word	0x40013800
 80031e8:	51eb851f 	.word	0x51eb851f

080031ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031fe:	2b84      	cmp	r3, #132	@ 0x84
 8003200:	d005      	beq.n	800320e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3303      	adds	r3, #3
 800320c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003220:	f3ef 8305 	mrs	r3, IPSR
 8003224:	607b      	str	r3, [r7, #4]
  return(result);
 8003226:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003240:	f001 fcac 	bl	8004b9c <vTaskStartScheduler>
  
  return osOK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}

0800324a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800324a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324c:	b089      	sub	sp, #36	@ 0x24
 800324e:	af04      	add	r7, sp, #16
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <osThreadCreate+0x54>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685c      	ldr	r4, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691e      	ldr	r6, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ffb8 	bl	80031ec <makeFreeRtosPriority>
 800327c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003286:	9202      	str	r2, [sp, #8]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	9100      	str	r1, [sp, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4632      	mov	r2, r6
 8003290:	4629      	mov	r1, r5
 8003292:	4620      	mov	r0, r4
 8003294:	f001 fa9c 	bl	80047d0 <xTaskCreateStatic>
 8003298:	4603      	mov	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e01c      	b.n	80032d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685c      	ldr	r4, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff9a 	bl	80031ec <makeFreeRtosPriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	9200      	str	r2, [sp, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4632      	mov	r2, r6
 80032c6:	4629      	mov	r1, r5
 80032c8:	4620      	mov	r0, r4
 80032ca:	f001 fae1 	bl	8004890 <xTaskCreate>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <osDelay+0x16>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	e000      	b.n	80032fa <osDelay+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fc18 	bl	8004b30 <vTaskDelay>
  
  return osOK;
 8003300:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	460b      	mov	r3, r1
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d013      	beq.n	800334a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <osTimerCreate+0x20>
 8003328:	2101      	movs	r1, #1
 800332a:	e000      	b.n	800332e <osTimerCreate+0x22>
 800332c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	460a      	mov	r2, r1
 800333e:	2101      	movs	r1, #1
 8003340:	480b      	ldr	r0, [pc, #44]	@ (8003370 <osTimerCreate+0x64>)
 8003342:	f002 fa00 	bl	8005746 <xTimerCreateStatic>
 8003346:	4603      	mov	r3, r0
 8003348:	e00e      	b.n	8003368 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <osTimerCreate+0x48>
 8003350:	2201      	movs	r2, #1
 8003352:	e000      	b.n	8003356 <osTimerCreate+0x4a>
 8003354:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2101      	movs	r1, #1
 8003360:	4803      	ldr	r0, [pc, #12]	@ (8003370 <osTimerCreate+0x64>)
 8003362:	f002 f9cf 	bl	8005704 <xTimerCreate>
 8003366:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	080060c8 	.word	0x080060c8

08003374 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <osTimerStart+0x20>
    ticks = 1;
 8003390:	2301      	movs	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003394:	f7ff ff41 	bl	800321a <inHandlerMode>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01a      	beq.n	80033d4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	2200      	movs	r2, #0
 80033a4:	9200      	str	r2, [sp, #0]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	2109      	movs	r1, #9
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f002 fa48 	bl	8005840 <xTimerGenericCommand>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <osTimerStart+0x48>
    {
      result = osErrorOS;
 80033b6:	23ff      	movs	r3, #255	@ 0xff
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e018      	b.n	80033ee <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <osTimerStart+0x7a>
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <osTimerStart+0x84>)
 80033c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	e00c      	b.n	80033ee <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80033d4:	2300      	movs	r3, #0
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	2104      	movs	r1, #4
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f002 fa2e 	bl	8005840 <xTimerGenericCommand>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <osTimerStart+0x7a>
      result = osErrorOS;
 80033ea:	23ff      	movs	r3, #255	@ 0xff
 80033ec:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80033ee:	697b      	ldr	r3, [r7, #20]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af02      	add	r7, sp, #8
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <osMessageCreate+0x36>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2400      	movs	r4, #0
 8003428:	9400      	str	r4, [sp, #0]
 800342a:	f000 fd0b 	bl	8003e44 <xQueueGenericCreateStatic>
 800342e:	4603      	mov	r3, r0
 8003430:	e008      	b.n	8003444 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	4619      	mov	r1, r3
 800343e:	f000 fd7e 	bl	8003f3e <xQueueGenericCreate>
 8003442:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003458:	f001 fc10 	bl	8004c7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800345c:	4b5c      	ldr	r3, [pc, #368]	@ (80035d0 <pvPortMalloc+0x184>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003464:	f000 f924 	bl	80036b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003468:	4b5a      	ldr	r3, [pc, #360]	@ (80035d4 <pvPortMalloc+0x188>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8095 	bne.w	80035a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01e      	beq.n	80034ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800347c:	2208      	movs	r2, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	2b00      	cmp	r3, #0
 800348c:	d015      	beq.n	80034ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f023 0307 	bic.w	r3, r3, #7
 8003494:	3308      	adds	r3, #8
 8003496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d06f      	beq.n	80035a0 <pvPortMalloc+0x154>
 80034c0:	4b45      	ldr	r3, [pc, #276]	@ (80035d8 <pvPortMalloc+0x18c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d86a      	bhi.n	80035a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034ca:	4b44      	ldr	r3, [pc, #272]	@ (80035dc <pvPortMalloc+0x190>)
 80034cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034ce:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <pvPortMalloc+0x190>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034d4:	e004      	b.n	80034e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d903      	bls.n	80034f2 <pvPortMalloc+0xa6>
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f1      	bne.n	80034d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80034f2:	4b37      	ldr	r3, [pc, #220]	@ (80035d0 <pvPortMalloc+0x184>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d051      	beq.n	80035a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2208      	movs	r2, #8
 8003502:	4413      	add	r3, r2
 8003504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad2      	subs	r2, r2, r3
 8003516:	2308      	movs	r3, #8
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	429a      	cmp	r2, r3
 800351c:	d920      	bls.n	8003560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4413      	add	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <pvPortMalloc+0xfc>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800355a:	69b8      	ldr	r0, [r7, #24]
 800355c:	f000 f90a 	bl	8003774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <pvPortMalloc+0x18c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <pvPortMalloc+0x18c>)
 800356c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800356e:	4b1a      	ldr	r3, [pc, #104]	@ (80035d8 <pvPortMalloc+0x18c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <pvPortMalloc+0x194>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d203      	bcs.n	8003582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800357a:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <pvPortMalloc+0x18c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <pvPortMalloc+0x194>)
 8003580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <pvPortMalloc+0x188>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	431a      	orrs	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003596:	4b13      	ldr	r3, [pc, #76]	@ (80035e4 <pvPortMalloc+0x198>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <pvPortMalloc+0x198>)
 800359e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035a0:	f001 fb7a 	bl	8004c98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <pvPortMalloc+0x17a>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	60fb      	str	r3, [r7, #12]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <pvPortMalloc+0x176>
	return pvReturn;
 80035c6:	69fb      	ldr	r3, [r7, #28]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200019e4 	.word	0x200019e4
 80035d4:	200019f8 	.word	0x200019f8
 80035d8:	200019e8 	.word	0x200019e8
 80035dc:	200019dc 	.word	0x200019dc
 80035e0:	200019ec 	.word	0x200019ec
 80035e4:	200019f0 	.word	0x200019f0

080035e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04f      	beq.n	800369a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80035fa:	2308      	movs	r3, #8
 80035fc:	425b      	negs	r3, r3
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4413      	add	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <vPortFree+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <vPortFree+0x46>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60fb      	str	r3, [r7, #12]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <vPortFree+0x66>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60bb      	str	r3, [r7, #8]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	4b14      	ldr	r3, [pc, #80]	@ (80036a4 <vPortFree+0xbc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01e      	beq.n	800369a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <vPortFree+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	43db      	mvns	r3, r3
 800366e:	401a      	ands	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003674:	f001 fb02 	bl	8004c7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <vPortFree+0xc0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4413      	add	r3, r2
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <vPortFree+0xc0>)
 8003684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003686:	6938      	ldr	r0, [r7, #16]
 8003688:	f000 f874 	bl	8003774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <vPortFree+0xc4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	4a06      	ldr	r2, [pc, #24]	@ (80036ac <vPortFree+0xc4>)
 8003694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003696:	f001 faff 	bl	8004c98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200019f8 	.word	0x200019f8
 80036a8:	200019e8 	.word	0x200019e8
 80036ac:	200019f4 	.word	0x200019f4

080036b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <prvHeapInit+0xac>)
 80036be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3307      	adds	r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <prvHeapInit+0xac>)
 80036e0:	4413      	add	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <prvHeapInit+0xb0>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003760 <prvHeapInit+0xb0>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036fc:	2208      	movs	r2, #8
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0307 	bic.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <prvHeapInit+0xb4>)
 8003710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003712:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <prvHeapInit+0xb4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800371a:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <prvHeapInit+0xb4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	1ad2      	subs	r2, r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <prvHeapInit+0xb4>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <prvHeapInit+0xb8>)
 800373e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a09      	ldr	r2, [pc, #36]	@ (800376c <prvHeapInit+0xbc>)
 8003746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <prvHeapInit+0xc0>)
 800374a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800374e:	601a      	str	r2, [r3, #0]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000ddc 	.word	0x20000ddc
 8003760:	200019dc 	.word	0x200019dc
 8003764:	200019e4 	.word	0x200019e4
 8003768:	200019ec 	.word	0x200019ec
 800376c:	200019e8 	.word	0x200019e8
 8003770:	200019f8 	.word	0x200019f8

08003774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800377c:	4b27      	ldr	r3, [pc, #156]	@ (800381c <prvInsertBlockIntoFreeList+0xa8>)
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e002      	b.n	8003788 <prvInsertBlockIntoFreeList+0x14>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d8f7      	bhi.n	8003782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4413      	add	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d108      	bne.n	80037b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	441a      	add	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	441a      	add	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d118      	bne.n	80037fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <prvInsertBlockIntoFreeList+0xac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d00d      	beq.n	80037f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e008      	b.n	8003804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <prvInsertBlockIntoFreeList+0xac>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e003      	b.n	8003804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d002      	beq.n	8003812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	200019dc 	.word	0x200019dc
 8003820:	200019e4 	.word	0x200019e4

08003824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f103 0208 	add.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800383c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f103 0208 	add.w	r2, r3, #8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0208 	add.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d6:	d103      	bne.n	80038e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e00c      	b.n	80038fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3308      	adds	r3, #8
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e002      	b.n	80038ee <vListInsert+0x2e>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d2f6      	bcs.n	80038e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
	...

08003984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b04      	subs	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800399c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3b04      	subs	r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b04      	subs	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039b4:	4a08      	ldr	r2, [pc, #32]	@ (80039d8 <pxPortInitialiseStack+0x54>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b14      	subs	r3, #20
 80039be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3b20      	subs	r3, #32
 80039ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	080039dd 	.word	0x080039dd

080039dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <prvTaskExitError+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ee:	d00b      	beq.n	8003a08 <prvTaskExitError+0x2c>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <prvTaskExitError+0x28>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60bb      	str	r3, [r7, #8]
}
 8003a1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a1c:	bf00      	nop
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0fc      	beq.n	8003a1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000010 	.word	0x20000010
	...

08003a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <pxCurrentTCBConst2>)
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6808      	ldr	r0, [r1, #0]
 8003a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a4a:	f380 8809 	msr	PSP, r0
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a5e:	4770      	bx	lr

08003a60 <pxCurrentTCBConst2>:
 8003a60:	20001a44 	.word	0x20001a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a68:	4806      	ldr	r0, [pc, #24]	@ (8003a84 <prvPortStartFirstTask+0x1c>)
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	6800      	ldr	r0, [r0, #0]
 8003a6e:	f380 8808 	msr	MSP, r0
 8003a72:	b662      	cpsie	i
 8003a74:	b661      	cpsie	f
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	df00      	svc	0
 8003a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a82:	bf00      	nop
 8003a84:	e000ed08 	.word	0xe000ed08

08003a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a8e:	4b32      	ldr	r3, [pc, #200]	@ (8003b58 <xPortStartScheduler+0xd0>)
 8003a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	22ff      	movs	r2, #255	@ 0xff
 8003a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b5c <xPortStartScheduler+0xd4>)
 8003ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003ab8:	2207      	movs	r2, #7
 8003aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003abc:	e009      	b.n	8003ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003abe:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b80      	cmp	r3, #128	@ 0x80
 8003adc:	d0ef      	beq.n	8003abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1c3 0307 	rsb	r3, r3, #7
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d00b      	beq.n	8003b02 <xPortStartScheduler+0x7a>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60bb      	str	r3, [r7, #8]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b02:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <xPortStartScheduler+0xd8>)
 8003b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b20:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <xPortStartScheduler+0xdc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <xPortStartScheduler+0xdc>)
 8003b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <xPortStartScheduler+0xdc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <xPortStartScheduler+0xdc>)
 8003b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b38:	f000 f8b8 	bl	8003cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <xPortStartScheduler+0xe0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b42:	f7ff ff91 	bl	8003a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b46:	f001 fa0d 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 8003b4a:	f7ff ff47 	bl	80039dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	e000e400 	.word	0xe000e400
 8003b5c:	200019fc 	.word	0x200019fc
 8003b60:	20001a00 	.word	0x20001a00
 8003b64:	e000ed20 	.word	0xe000ed20
 8003b68:	20000010 	.word	0x20000010

08003b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	607b      	str	r3, [r7, #4]
}
 8003b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b86:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <vPortEnterCritical+0x58>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <vPortEnterCritical+0x58>)
 8003b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <vPortEnterCritical+0x58>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d110      	bne.n	8003bba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <vPortEnterCritical+0x5c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <vPortEnterCritical+0x4e>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	603b      	str	r3, [r7, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	e7fd      	b.n	8003bb6 <vPortEnterCritical+0x4a>
	}
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	20000010 	.word	0x20000010
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <vPortExitCritical+0x50>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <vPortExitCritical+0x26>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	607b      	str	r3, [r7, #4]
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <vPortExitCritical+0x50>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	4a08      	ldr	r2, [pc, #32]	@ (8003c1c <vPortExitCritical+0x50>)
 8003bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bfc:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <vPortExitCritical+0x50>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <vPortExitCritical+0x44>
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000010 	.word	0x20000010

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c30:	6010      	str	r0, [r2, #0]
 8003c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003c3a:	f380 8811 	msr	BASEPRI, r0
 8003c3e:	f001 f991 	bl	8004f64 <vTaskSwitchContext>
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f380 8811 	msr	BASEPRI, r0
 8003c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	6808      	ldr	r0, [r1, #0]
 8003c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c56:	f380 8809 	msr	PSP, r0
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	4770      	bx	lr

08003c60 <pxCurrentTCBConst>:
 8003c60:	20001a44 	.word	0x20001a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	607b      	str	r3, [r7, #4]
}
 8003c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c82:	f001 f8b5 	bl	8004df0 <xTaskIncrementTick>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <SysTick_Handler+0x40>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f383 8811 	msr	BASEPRI, r3
}
 8003c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <vPortSetupTimerInterrupt+0x30>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <vPortSetupTimerInterrupt+0x34>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <vPortSetupTimerInterrupt+0x38>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a09      	ldr	r2, [pc, #36]	@ (8003ce8 <vPortSetupTimerInterrupt+0x3c>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <vPortSetupTimerInterrupt+0x40>)
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cce:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <vPortSetupTimerInterrupt+0x30>)
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	e000e010 	.word	0xe000e010
 8003ce0:	e000e018 	.word	0xe000e018
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	10624dd3 	.word	0x10624dd3
 8003cec:	e000e014 	.word	0xe000e014

08003cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cf6:	f3ef 8305 	mrs	r3, IPSR
 8003cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d915      	bls.n	8003d2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d02:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <vPortValidateInterruptPriority+0x70>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d0c:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <vPortValidateInterruptPriority+0x74>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	7afa      	ldrb	r2, [r7, #11]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d20b      	bcs.n	8003d2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	607b      	str	r3, [r7, #4]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d68 <vPortValidateInterruptPriority+0x78>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <vPortValidateInterruptPriority+0x7c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d90b      	bls.n	8003d56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	603b      	str	r3, [r7, #0]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <vPortValidateInterruptPriority+0x62>
	}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	e000e3f0 	.word	0xe000e3f0
 8003d64:	200019fc 	.word	0x200019fc
 8003d68:	e000ed0c 	.word	0xe000ed0c
 8003d6c:	20001a00 	.word	0x20001a00

08003d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <xQueueGenericReset+0x2c>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	60bb      	str	r3, [r7, #8]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d9c:	f7ff fee6 	bl	8003b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	22ff      	movs	r2, #255	@ 0xff
 8003de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	22ff      	movs	r2, #255	@ 0xff
 8003de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d114      	bne.n	8003e1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01a      	beq.n	8003e30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f964 	bl	80050cc <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d012      	beq.n	8003e30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <xQueueGenericReset+0xd0>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	e009      	b.n	8003e30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3310      	adds	r3, #16
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fcff 	bl	8003824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3324      	adds	r3, #36	@ 0x24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fcfa 	bl	8003824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e30:	f7ff fecc 	bl	8003bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08e      	sub	sp, #56	@ 0x38
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10b      	bne.n	8003e8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	e7fd      	b.n	8003e8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <xQueueGenericCreateStatic+0x56>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <xQueueGenericCreateStatic+0x5a>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <xQueueGenericCreateStatic+0x5c>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	623b      	str	r3, [r7, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xQueueGenericCreateStatic+0x84>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <xQueueGenericCreateStatic+0x88>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <xQueueGenericCreateStatic+0x8a>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61fb      	str	r3, [r7, #28]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eea:	2348      	movs	r3, #72	@ 0x48
 8003eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b48      	cmp	r3, #72	@ 0x48
 8003ef2:	d00b      	beq.n	8003f0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	61bb      	str	r3, [r7, #24]
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f840 	bl	8003fb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3730      	adds	r7, #48	@ 0x30
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b08a      	sub	sp, #40	@ 0x28
 8003f42:	af02      	add	r7, sp, #8
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	613b      	str	r3, [r7, #16]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3348      	adds	r3, #72	@ 0x48
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fa67 	bl	800344c <pvPortMalloc>
 8003f7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d011      	beq.n	8003faa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3348      	adds	r3, #72	@ 0x48
 8003f8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f98:	79fa      	ldrb	r2, [r7, #7]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f805 	bl	8003fb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003faa:	69bb      	ldr	r3, [r7, #24]
	}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e002      	b.n	8003fd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	69b8      	ldr	r0, [r7, #24]
 8003fe6:	f7ff fec3 	bl	8003d70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08e      	sub	sp, #56	@ 0x38
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueGenericSend+0x34>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <xQueueGenericSend+0x42>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueGenericSend+0x46>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSend+0x48>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericSend+0x64>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <xQueueGenericSend+0x72>
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <xQueueGenericSend+0x76>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSend+0x78>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <xQueueGenericSend+0x94>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004088:	f001 f9e6 	bl	8005458 <xTaskGetSchedulerState>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <xQueueGenericSend+0xa4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <xQueueGenericSend+0xa8>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <xQueueGenericSend+0xaa>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xQueueGenericSend+0xc6>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61fb      	str	r3, [r7, #28]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ba:	f7ff fd57 	bl	8003b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <xQueueGenericSend+0xdc>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d129      	bne.n	8004124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040d6:	f000 fa0f 	bl	80044f8 <prvCopyDataToQueue>
 80040da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	3324      	adds	r3, #36	@ 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 ffef 	bl	80050cc <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040f4:	4b3f      	ldr	r3, [pc, #252]	@ (80041f4 <xQueueGenericSend+0x200>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	e00a      	b.n	800411c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800410c:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <xQueueGenericSend+0x200>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800411c:	f7ff fd56 	bl	8003bcc <vPortExitCritical>
				return pdPASS;
 8004120:	2301      	movs	r3, #1
 8004122:	e063      	b.n	80041ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800412a:	f7ff fd4f 	bl	8003bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800412e:	2300      	movs	r3, #0
 8004130:	e05c      	b.n	80041ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	4618      	mov	r0, r3
 800413e:	f001 f829 	bl	8005194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004146:	f7ff fd41 	bl	8003bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800414a:	f000 fd97 	bl	8004c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800414e:	f7ff fd0d 	bl	8003b6c <vPortEnterCritical>
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800415e:	d103      	bne.n	8004168 <xQueueGenericSend+0x174>
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004174:	d103      	bne.n	800417e <xQueueGenericSend+0x18a>
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800417e:	f7ff fd25 	bl	8003bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004182:	1d3a      	adds	r2, r7, #4
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f818 	bl	80051c0 <xTaskCheckForTimeOut>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d124      	bne.n	80041e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004198:	f000 faa6 	bl	80046e8 <prvIsQueueFull>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	3310      	adds	r3, #16
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff3c 	bl	8005028 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041b2:	f000 fa31 	bl	8004618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041b6:	f000 fd6f 	bl	8004c98 <xTaskResumeAll>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f af7c 	bne.w	80040ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <xQueueGenericSend+0x200>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	e772      	b.n	80040ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041d6:	f000 fa1f 	bl	8004618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041da:	f000 fd5d 	bl	8004c98 <xTaskResumeAll>
 80041de:	e76c      	b.n	80040ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041e2:	f000 fa19 	bl	8004618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041e6:	f000 fd57 	bl	8004c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3738      	adds	r7, #56	@ 0x38
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	e000ed04 	.word	0xe000ed04

080041f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b090      	sub	sp, #64	@ 0x40
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <xQueueGenericSendFromISR+0x3e>
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <xQueueGenericSendFromISR+0x42>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <xQueueGenericSendFromISR+0x44>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d103      	bne.n	8004266 <xQueueGenericSendFromISR+0x6e>
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <xQueueGenericSendFromISR+0x72>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericSendFromISR+0x74>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	623b      	str	r3, [r7, #32]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004288:	f7ff fd32 	bl	8003cf0 <vPortValidateInterruptPriority>
	__asm volatile
 800428c:	f3ef 8211 	mrs	r2, BASEPRI
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80042a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <xQueueGenericSendFromISR+0xc2>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d12f      	bne.n	800431a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80042d0:	f000 f912 	bl	80044f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042dc:	d112      	bne.n	8004304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	3324      	adds	r3, #36	@ 0x24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 feee 	bl	80050cc <xTaskRemoveFromEventList>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e007      	b.n	8004314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004308:	3301      	adds	r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	b25a      	sxtb	r2, r3
 800430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004318:	e001      	b.n	800431e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800431a:	2300      	movs	r3, #0
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f383 8811 	msr	BASEPRI, r3
}
 8004328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800432c:	4618      	mov	r0, r3
 800432e:	3740      	adds	r7, #64	@ 0x40
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	@ 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <xQueueReceive+0x32>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	623b      	str	r3, [r7, #32]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <xQueueReceive+0x40>
 800436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <xQueueReceive+0x44>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <xQueueReceive+0x46>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <xQueueReceive+0x62>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61fb      	str	r3, [r7, #28]
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	e7fd      	b.n	8004392 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004396:	f001 f85f 	bl	8005458 <xTaskGetSchedulerState>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <xQueueReceive+0x72>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueReceive+0x76>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueReceive+0x78>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <xQueueReceive+0x94>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	61bb      	str	r3, [r7, #24]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c8:	f7ff fbd0 	bl	8003b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01f      	beq.n	8004418 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043dc:	f000 f8f6 	bl	80045cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	3310      	adds	r3, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fe69 	bl	80050cc <xTaskRemoveFromEventList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004400:	4b3c      	ldr	r3, [pc, #240]	@ (80044f4 <xQueueReceive+0x1c0>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004410:	f7ff fbdc 	bl	8003bcc <vPortExitCritical>
				return pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	e069      	b.n	80044ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800441e:	f7ff fbd5 	bl	8003bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004422:	2300      	movs	r3, #0
 8004424:	e062      	b.n	80044ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800442c:	f107 0310 	add.w	r3, r7, #16
 8004430:	4618      	mov	r0, r3
 8004432:	f000 feaf 	bl	8005194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800443a:	f7ff fbc7 	bl	8003bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800443e:	f000 fc1d 	bl	8004c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004442:	f7ff fb93 	bl	8003b6c <vPortEnterCritical>
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004452:	d103      	bne.n	800445c <xQueueReceive+0x128>
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004462:	b25b      	sxtb	r3, r3
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004468:	d103      	bne.n	8004472 <xQueueReceive+0x13e>
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004472:	f7ff fbab 	bl	8003bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004476:	1d3a      	adds	r2, r7, #4
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe9e 	bl	80051c0 <xTaskCheckForTimeOut>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d123      	bne.n	80044d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800448c:	f000 f916 	bl	80046bc <prvIsQueueEmpty>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d017      	beq.n	80044c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fdc2 	bl	8005028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a6:	f000 f8b7 	bl	8004618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044aa:	f000 fbf5 	bl	8004c98 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d189      	bne.n	80043c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <xQueueReceive+0x1c0>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	e780      	b.n	80043c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044c8:	f000 f8a6 	bl	8004618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044cc:	f000 fbe4 	bl	8004c98 <xTaskResumeAll>
 80044d0:	e77a      	b.n	80043c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044d4:	f000 f8a0 	bl	8004618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044d8:	f000 fbde 	bl	8004c98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044de:	f000 f8ed 	bl	80046bc <prvIsQueueEmpty>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f43f af6f 	beq.w	80043c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	@ 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d14d      	bne.n	80045ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 ffb6 	bl	8005494 <xTaskPriorityDisinherit>
 8004528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	e043      	b.n	80045ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d119      	bne.n	800456c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6858      	ldr	r0, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	461a      	mov	r2, r3
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	f001 fcf2 	bl	8005f2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d32b      	bcc.n	80045ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	e026      	b.n	80045ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68d8      	ldr	r0, [r3, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	461a      	mov	r2, r3
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	f001 fcd8 	bl	8005f2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	425b      	negs	r3, r3
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d207      	bcs.n	80045a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	425b      	negs	r3, r3
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d105      	bne.n	80045ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80045c2:	697b      	ldr	r3, [r7, #20]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	441a      	add	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d303      	bcc.n	8004600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	461a      	mov	r2, r3
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	f001 fc8e 	bl	8005f2c <memcpy>
	}
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004620:	f7ff faa4 	bl	8003b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800462a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800462c:	e011      	b.n	8004652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d012      	beq.n	800465c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3324      	adds	r3, #36	@ 0x24
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fd46 	bl	80050cc <xTaskRemoveFromEventList>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004646:	f000 fe1f 	bl	8005288 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	3b01      	subs	r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	dce9      	bgt.n	800462e <prvUnlockQueue+0x16>
 800465a:	e000      	b.n	800465e <prvUnlockQueue+0x46>
					break;
 800465c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	22ff      	movs	r2, #255	@ 0xff
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004666:	f7ff fab1 	bl	8003bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800466a:	f7ff fa7f 	bl	8003b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004676:	e011      	b.n	800469c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3310      	adds	r3, #16
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fd21 	bl	80050cc <xTaskRemoveFromEventList>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004690:	f000 fdfa 	bl	8005288 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004694:	7bbb      	ldrb	r3, [r7, #14]
 8004696:	3b01      	subs	r3, #1
 8004698:	b2db      	uxtb	r3, r3
 800469a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800469c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	dce9      	bgt.n	8004678 <prvUnlockQueue+0x60>
 80046a4:	e000      	b.n	80046a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	22ff      	movs	r2, #255	@ 0xff
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80046b0:	f7ff fa8c 	bl	8003bcc <vPortExitCritical>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c4:	f7ff fa52 	bl	8003b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e001      	b.n	80046da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046da:	f7ff fa77 	bl	8003bcc <vPortExitCritical>

	return xReturn;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046f0:	f7ff fa3c 	bl	8003b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d102      	bne.n	8004706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e001      	b.n	800470a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800470a:	f7ff fa5f 	bl	8003bcc <vPortExitCritical>

	return xReturn;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e014      	b.n	8004752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004728:	4a0e      	ldr	r2, [pc, #56]	@ (8004764 <vQueueAddToRegistry+0x4c>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004734:	490b      	ldr	r1, [pc, #44]	@ (8004764 <vQueueAddToRegistry+0x4c>)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <vQueueAddToRegistry+0x4c>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800474a:	e006      	b.n	800475a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b07      	cmp	r3, #7
 8004756:	d9e7      	bls.n	8004728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	20001a04 	.word	0x20001a04

08004768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004778:	f7ff f9f8 	bl	8003b6c <vPortEnterCritical>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004782:	b25b      	sxtb	r3, r3
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004788:	d103      	bne.n	8004792 <vQueueWaitForMessageRestricted+0x2a>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004798:	b25b      	sxtb	r3, r3
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800479e:	d103      	bne.n	80047a8 <vQueueWaitForMessageRestricted+0x40>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047a8:	f7ff fa10 	bl	8003bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	3324      	adds	r3, #36	@ 0x24
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fc59 	bl	8005074 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7ff ff28 	bl	8004618 <prvUnlockQueue>
	}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	@ 0x38
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	61fb      	str	r3, [r7, #28]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800481a:	23a0      	movs	r3, #160	@ 0xa0
 800481c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2ba0      	cmp	r3, #160	@ 0xa0
 8004822:	d00b      	beq.n	800483c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61bb      	str	r3, [r7, #24]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800483c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01e      	beq.n	8004882 <xTaskCreateStatic+0xb2>
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01b      	beq.n	8004882 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	2202      	movs	r2, #2
 8004858:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800485c:	2300      	movs	r3, #0
 800485e:	9303      	str	r3, [sp, #12]
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	9302      	str	r3, [sp, #8]
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f851 	bl	800491c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800487a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800487c:	f000 f8ee 	bl	8004a5c <prvAddNewTaskToReadyList>
 8004880:	e001      	b.n	8004886 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004886:	697b      	ldr	r3, [r7, #20]
	}
 8004888:	4618      	mov	r0, r3
 800488a:	3728      	adds	r7, #40	@ 0x28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	@ 0x30
 8004894:	af04      	add	r7, sp, #16
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fdd1 	bl	800344c <pvPortMalloc>
 80048aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00e      	beq.n	80048d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048b2:	20a0      	movs	r0, #160	@ 0xa0
 80048b4:	f7fe fdca 	bl	800344c <pvPortMalloc>
 80048b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80048c6:	e005      	b.n	80048d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	f7fe fe8d 	bl	80035e8 <vPortFree>
 80048ce:	e001      	b.n	80048d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	2300      	movs	r3, #0
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f80f 	bl	800491c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048fe:	69f8      	ldr	r0, [r7, #28]
 8004900:	f000 f8ac 	bl	8004a5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004904:	2301      	movs	r3, #1
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e002      	b.n	8004910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800490e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004910:	69bb      	ldr	r3, [r7, #24]
	}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004934:	3b01      	subs	r3, #1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f023 0307 	bic.w	r3, r3, #7
 8004942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	617b      	str	r3, [r7, #20]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01f      	beq.n	80049ac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e012      	b.n	8004998 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	7819      	ldrb	r1, [r3, #0]
 800497a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	3334      	adds	r3, #52	@ 0x34
 8004982:	460a      	mov	r2, r1
 8004984:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	d9e9      	bls.n	8004972 <prvInitialiseNewTask+0x56>
 800499e:	e000      	b.n	80049a2 <prvInitialiseNewTask+0x86>
			{
				break;
 80049a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049aa:	e003      	b.n	80049b4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d901      	bls.n	80049be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049ba:	2306      	movs	r3, #6
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe ff44 	bl	8003862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	3318      	adds	r3, #24
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe ff3f 	bl	8003862 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	f1c3 0207 	rsb	r2, r3, #7
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	334c      	adds	r3, #76	@ 0x4c
 8004a0e:	224c      	movs	r2, #76	@ 0x4c
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fa06 	bl	8005e24 <memset>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a50 <prvInitialiseNewTask+0x134>)
 8004a1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <prvInitialiseNewTask+0x138>)
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	4a0c      	ldr	r2, [pc, #48]	@ (8004a58 <prvInitialiseNewTask+0x13c>)
 8004a28:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	69b8      	ldr	r0, [r7, #24]
 8004a30:	f7fe ffa8 	bl	8003984 <pxPortInitialiseStack>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a46:	bf00      	nop
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20001c6c 	.word	0x20001c6c
 8004a54:	20001cd4 	.word	0x20001cd4
 8004a58:	20001d3c 	.word	0x20001d3c

08004a5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a64:	f7ff f882 	bl	8003b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a68:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <prvAddNewTaskToReadyList+0xb8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a29      	ldr	r2, [pc, #164]	@ (8004b14 <prvAddNewTaskToReadyList+0xb8>)
 8004a70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a72:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <prvAddNewTaskToReadyList+0xbc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a7a:	4a27      	ldr	r2, [pc, #156]	@ (8004b18 <prvAddNewTaskToReadyList+0xbc>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a80:	4b24      	ldr	r3, [pc, #144]	@ (8004b14 <prvAddNewTaskToReadyList+0xb8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d110      	bne.n	8004aaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a88:	f000 fc22 	bl	80052d0 <prvInitialiseTaskLists>
 8004a8c:	e00d      	b.n	8004aaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a8e:	4b23      	ldr	r3, [pc, #140]	@ (8004b1c <prvAddNewTaskToReadyList+0xc0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a96:	4b20      	ldr	r3, [pc, #128]	@ (8004b18 <prvAddNewTaskToReadyList+0xbc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d802      	bhi.n	8004aaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <prvAddNewTaskToReadyList+0xbc>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8004b20 <prvAddNewTaskToReadyList+0xc4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <prvAddNewTaskToReadyList+0xc4>)
 8004ab2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <prvAddNewTaskToReadyList+0xc8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	4a18      	ldr	r2, [pc, #96]	@ (8004b24 <prvAddNewTaskToReadyList+0xc8>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4a15      	ldr	r2, [pc, #84]	@ (8004b28 <prvAddNewTaskToReadyList+0xcc>)
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7fe fecc 	bl	800387a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ae2:	f7ff f873 	bl	8003bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <prvAddNewTaskToReadyList+0xc0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00e      	beq.n	8004b0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aee:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <prvAddNewTaskToReadyList+0xbc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d207      	bcs.n	8004b0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <prvAddNewTaskToReadyList+0xd0>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20001b44 	.word	0x20001b44
 8004b18:	20001a44 	.word	0x20001a44
 8004b1c:	20001b50 	.word	0x20001b50
 8004b20:	20001b60 	.word	0x20001b60
 8004b24:	20001b4c 	.word	0x20001b4c
 8004b28:	20001a48 	.word	0x20001a48
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b42:	4b14      	ldr	r3, [pc, #80]	@ (8004b94 <vTaskDelay+0x64>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <vTaskDelay+0x32>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b62:	f000 f88b 	bl	8004c7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b66:	2100      	movs	r1, #0
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fd1b 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b6e:	f000 f893 	bl	8004c98 <xTaskResumeAll>
 8004b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b7a:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <vTaskDelay+0x68>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20001b6c 	.word	0x20001b6c
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	@ 0x28
 8004ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004baa:	463a      	mov	r2, r7
 8004bac:	1d39      	adds	r1, r7, #4
 8004bae:	f107 0308 	add.w	r3, r7, #8
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb ff28 	bl	8000a08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	9202      	str	r2, [sp, #8]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	460a      	mov	r2, r1
 8004bca:	4924      	ldr	r1, [pc, #144]	@ (8004c5c <vTaskStartScheduler+0xc0>)
 8004bcc:	4824      	ldr	r0, [pc, #144]	@ (8004c60 <vTaskStartScheduler+0xc4>)
 8004bce:	f7ff fdff 	bl	80047d0 <xTaskCreateStatic>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a23      	ldr	r2, [pc, #140]	@ (8004c64 <vTaskStartScheduler+0xc8>)
 8004bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bd8:	4b22      	ldr	r3, [pc, #136]	@ (8004c64 <vTaskStartScheduler+0xc8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e001      	b.n	8004bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bf0:	f000 fd3e 	bl	8005670 <xTimerCreateTimerTask>
 8004bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d11b      	bne.n	8004c34 <vTaskStartScheduler+0x98>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	613b      	str	r3, [r7, #16]
}
 8004c0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c10:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <vTaskStartScheduler+0xcc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	334c      	adds	r3, #76	@ 0x4c
 8004c16:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <vTaskStartScheduler+0xd0>)
 8004c18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <vTaskStartScheduler+0xd4>)
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c22:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <vTaskStartScheduler+0xd8>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c28:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <vTaskStartScheduler+0xdc>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2e:	f7fe ff2b 	bl	8003a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c32:	e00f      	b.n	8004c54 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c3a:	d10b      	bne.n	8004c54 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60fb      	str	r3, [r7, #12]
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	e7fd      	b.n	8004c50 <vTaskStartScheduler+0xb4>
}
 8004c54:	bf00      	nop
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	080060cc 	.word	0x080060cc
 8004c60:	080052a1 	.word	0x080052a1
 8004c64:	20001b68 	.word	0x20001b68
 8004c68:	20001a44 	.word	0x20001a44
 8004c6c:	20000014 	.word	0x20000014
 8004c70:	20001b64 	.word	0x20001b64
 8004c74:	20001b50 	.word	0x20001b50
 8004c78:	20001b48 	.word	0x20001b48

08004c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c80:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <vTaskSuspendAll+0x18>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3301      	adds	r3, #1
 8004c86:	4a03      	ldr	r2, [pc, #12]	@ (8004c94 <vTaskSuspendAll+0x18>)
 8004c88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c8a:	bf00      	nop
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20001b6c 	.word	0x20001b6c

08004c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ca6:	4b42      	ldr	r3, [pc, #264]	@ (8004db0 <xTaskResumeAll+0x118>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	603b      	str	r3, [r7, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	e7fd      	b.n	8004cc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cc6:	f7fe ff51 	bl	8003b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <xTaskResumeAll+0x118>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4a37      	ldr	r2, [pc, #220]	@ (8004db0 <xTaskResumeAll+0x118>)
 8004cd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd4:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <xTaskResumeAll+0x118>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d161      	bne.n	8004da0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cdc:	4b35      	ldr	r3, [pc, #212]	@ (8004db4 <xTaskResumeAll+0x11c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05d      	beq.n	8004da0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ce4:	e02e      	b.n	8004d44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce6:	4b34      	ldr	r3, [pc, #208]	@ (8004db8 <xTaskResumeAll+0x120>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3318      	adds	r3, #24
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fe1c 	bl	8003930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fe17 	bl	8003930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dbc <xTaskResumeAll+0x124>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <xTaskResumeAll+0x124>)
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4a27      	ldr	r2, [pc, #156]	@ (8004dc0 <xTaskResumeAll+0x128>)
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7fe fda5 	bl	800387a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <xTaskResumeAll+0x12c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d3e:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <xTaskResumeAll+0x130>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d44:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <xTaskResumeAll+0x120>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1cc      	bne.n	8004ce6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d52:	f000 fb61 	bl	8005418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d56:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <xTaskResumeAll+0x134>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d62:	f000 f845 	bl	8004df0 <xTaskIncrementTick>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d6c:	4b16      	ldr	r3, [pc, #88]	@ (8004dc8 <xTaskResumeAll+0x130>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f1      	bne.n	8004d62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d7e:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <xTaskResumeAll+0x134>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d84:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <xTaskResumeAll+0x130>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d90:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <xTaskResumeAll+0x138>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da0:	f7fe ff14 	bl	8003bcc <vPortExitCritical>

	return xAlreadyYielded;
 8004da4:	68bb      	ldr	r3, [r7, #8]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20001b6c 	.word	0x20001b6c
 8004db4:	20001b44 	.word	0x20001b44
 8004db8:	20001b04 	.word	0x20001b04
 8004dbc:	20001b4c 	.word	0x20001b4c
 8004dc0:	20001a48 	.word	0x20001a48
 8004dc4:	20001a44 	.word	0x20001a44
 8004dc8:	20001b58 	.word	0x20001b58
 8004dcc:	20001b54 	.word	0x20001b54
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dda:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <xTaskGetTickCount+0x18>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004de0:	687b      	ldr	r3, [r7, #4]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bc80      	pop	{r7}
 8004dea:	4770      	bx	lr
 8004dec:	20001b48 	.word	0x20001b48

08004df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004f38 <xTaskIncrementTick+0x148>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 808f 	bne.w	8004f22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e04:	4b4d      	ldr	r3, [pc, #308]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f3c <xTaskIncrementTick+0x14c>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d121      	bne.n	8004e5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e18:	4b49      	ldr	r3, [pc, #292]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	603b      	str	r3, [r7, #0]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xTaskIncrementTick+0x46>
 8004e3a:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3e      	ldr	r2, [pc, #248]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4a3e      	ldr	r2, [pc, #248]	@ (8004f44 <xTaskIncrementTick+0x154>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a3c      	ldr	r2, [pc, #240]	@ (8004f48 <xTaskIncrementTick+0x158>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	f000 fade 	bl	8005418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d348      	bcc.n	8004ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e70:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e76:	601a      	str	r2, [r3, #0]
					break;
 8004e78:	e03e      	b.n	8004ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <xTaskIncrementTick+0x150>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d203      	bcs.n	8004e9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e92:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <xTaskIncrementTick+0x15c>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e98:	e02e      	b.n	8004ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fd46 	bl	8003930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fd3d 	bl	8003930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a22      	ldr	r2, [pc, #136]	@ (8004f50 <xTaskIncrementTick+0x160>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fccb 	bl	800387a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b9      	bcc.n	8004e66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	e7b6      	b.n	8004e66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ef8:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <xTaskIncrementTick+0x168>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4915      	ldr	r1, [pc, #84]	@ (8004f54 <xTaskIncrementTick+0x164>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d901      	bls.n	8004f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f14:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <xTaskIncrementTick+0x16c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e004      	b.n	8004f2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f22:	4b0f      	ldr	r3, [pc, #60]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	4a0d      	ldr	r2, [pc, #52]	@ (8004f60 <xTaskIncrementTick+0x170>)
 8004f2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f2c:	697b      	ldr	r3, [r7, #20]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20001b6c 	.word	0x20001b6c
 8004f3c:	20001b48 	.word	0x20001b48
 8004f40:	20001afc 	.word	0x20001afc
 8004f44:	20001b00 	.word	0x20001b00
 8004f48:	20001b5c 	.word	0x20001b5c
 8004f4c:	20001b64 	.word	0x20001b64
 8004f50:	20001b4c 	.word	0x20001b4c
 8004f54:	20001a48 	.word	0x20001a48
 8004f58:	20001a44 	.word	0x20001a44
 8004f5c:	20001b58 	.word	0x20001b58
 8004f60:	20001b54 	.word	0x20001b54

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b29      	ldr	r3, [pc, #164]	@ (8005010 <vTaskSwitchContext+0xac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b28      	ldr	r3, [pc, #160]	@ (8005014 <vTaskSwitchContext+0xb0>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e045      	b.n	8005006 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004f7a:	4b26      	ldr	r3, [pc, #152]	@ (8005014 <vTaskSwitchContext+0xb0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b25      	ldr	r3, [pc, #148]	@ (8005018 <vTaskSwitchContext+0xb4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
 8004f90:	f1c3 031f 	rsb	r3, r3, #31
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	4921      	ldr	r1, [pc, #132]	@ (800501c <vTaskSwitchContext+0xb8>)
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	e7fd      	b.n	8004fbe <vTaskSwitchContext+0x5a>
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4a13      	ldr	r2, [pc, #76]	@ (800501c <vTaskSwitchContext+0xb8>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d104      	bne.n	8004ff2 <vTaskSwitchContext+0x8e>
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a09      	ldr	r2, [pc, #36]	@ (8005020 <vTaskSwitchContext+0xbc>)
 8004ffa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ffc:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <vTaskSwitchContext+0xbc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	334c      	adds	r3, #76	@ 0x4c
 8005002:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <vTaskSwitchContext+0xc0>)
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	20001b6c 	.word	0x20001b6c
 8005014:	20001b58 	.word	0x20001b58
 8005018:	20001b4c 	.word	0x20001b4c
 800501c:	20001a48 	.word	0x20001a48
 8005020:	20001a44 	.word	0x20001a44
 8005024:	20000014 	.word	0x20000014

08005028 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60fb      	str	r3, [r7, #12]
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005050:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <vTaskPlaceOnEventList+0x48>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3318      	adds	r3, #24
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fe fc31 	bl	80038c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800505e:	2101      	movs	r1, #1
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f000 fa9f 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20001a44 	.word	0x20001a44

08005074 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	617b      	str	r3, [r7, #20]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800509e:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3318      	adds	r3, #24
 80050a4:	4619      	mov	r1, r3
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7fe fbe7 	bl	800387a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	f000 fa72 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
	}
 80050c0:	bf00      	nop
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20001a44 	.word	0x20001a44

080050cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3318      	adds	r3, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fc16 	bl	8003930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005104:	4b1d      	ldr	r3, [pc, #116]	@ (800517c <xTaskRemoveFromEventList+0xb0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11c      	bne.n	8005146 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fc0d 	bl	8003930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	4b18      	ldr	r3, [pc, #96]	@ (8005180 <xTaskRemoveFromEventList+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	4a16      	ldr	r2, [pc, #88]	@ (8005180 <xTaskRemoveFromEventList+0xb4>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a13      	ldr	r2, [pc, #76]	@ (8005184 <xTaskRemoveFromEventList+0xb8>)
 8005136:	441a      	add	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fb9b 	bl	800387a <vListInsertEnd>
 8005144:	e005      	b.n	8005152 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3318      	adds	r3, #24
 800514a:	4619      	mov	r1, r3
 800514c:	480e      	ldr	r0, [pc, #56]	@ (8005188 <xTaskRemoveFromEventList+0xbc>)
 800514e:	f7fe fb94 	bl	800387a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <xTaskRemoveFromEventList+0xc0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	429a      	cmp	r2, r3
 800515e:	d905      	bls.n	800516c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005164:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <xTaskRemoveFromEventList+0xc4>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e001      	b.n	8005170 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005170:	697b      	ldr	r3, [r7, #20]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20001b6c 	.word	0x20001b6c
 8005180:	20001b4c 	.word	0x20001b4c
 8005184:	20001a48 	.word	0x20001a48
 8005188:	20001b04 	.word	0x20001b04
 800518c:	20001a44 	.word	0x20001a44
 8005190:	20001b58 	.word	0x20001b58

08005194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <vTaskInternalSetTimeOutState+0x24>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <vTaskInternalSetTimeOutState+0x28>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	605a      	str	r2, [r3, #4]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20001b5c 	.word	0x20001b5c
 80051bc:	20001b48 	.word	0x20001b48

080051c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	613b      	str	r3, [r7, #16]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005206:	f7fe fcb1 	bl	8003b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800520a:	4b1d      	ldr	r3, [pc, #116]	@ (8005280 <xTaskCheckForTimeOut+0xc0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005222:	d102      	bne.n	800522a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e023      	b.n	8005272 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <xTaskCheckForTimeOut+0xc4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d007      	beq.n	8005246 <xTaskCheckForTimeOut+0x86>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	e015      	b.n	8005272 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d20b      	bcs.n	8005268 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff99 	bl	8005194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e004      	b.n	8005272 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005272:	f7fe fcab 	bl	8003bcc <vPortExitCritical>

	return xReturn;
 8005276:	69fb      	ldr	r3, [r7, #28]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20001b48 	.word	0x20001b48
 8005284:	20001b5c 	.word	0x20001b5c

08005288 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <vTaskMissedYield+0x14>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20001b58 	.word	0x20001b58

080052a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052a8:	f000 f852 	bl	8005350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <prvIdleTask+0x28>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d9f9      	bls.n	80052a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <prvIdleTask+0x2c>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052c4:	e7f0      	b.n	80052a8 <prvIdleTask+0x8>
 80052c6:	bf00      	nop
 80052c8:	20001a48 	.word	0x20001a48
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	e00c      	b.n	80052f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <prvInitialiseTaskLists+0x60>)
 80052e8:	4413      	add	r3, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fa9a 	bl	8003824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d9ef      	bls.n	80052dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052fc:	480d      	ldr	r0, [pc, #52]	@ (8005334 <prvInitialiseTaskLists+0x64>)
 80052fe:	f7fe fa91 	bl	8003824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005302:	480d      	ldr	r0, [pc, #52]	@ (8005338 <prvInitialiseTaskLists+0x68>)
 8005304:	f7fe fa8e 	bl	8003824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005308:	480c      	ldr	r0, [pc, #48]	@ (800533c <prvInitialiseTaskLists+0x6c>)
 800530a:	f7fe fa8b 	bl	8003824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800530e:	480c      	ldr	r0, [pc, #48]	@ (8005340 <prvInitialiseTaskLists+0x70>)
 8005310:	f7fe fa88 	bl	8003824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005314:	480b      	ldr	r0, [pc, #44]	@ (8005344 <prvInitialiseTaskLists+0x74>)
 8005316:	f7fe fa85 	bl	8003824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <prvInitialiseTaskLists+0x78>)
 800531c:	4a05      	ldr	r2, [pc, #20]	@ (8005334 <prvInitialiseTaskLists+0x64>)
 800531e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <prvInitialiseTaskLists+0x7c>)
 8005322:	4a05      	ldr	r2, [pc, #20]	@ (8005338 <prvInitialiseTaskLists+0x68>)
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20001a48 	.word	0x20001a48
 8005334:	20001ad4 	.word	0x20001ad4
 8005338:	20001ae8 	.word	0x20001ae8
 800533c:	20001b04 	.word	0x20001b04
 8005340:	20001b18 	.word	0x20001b18
 8005344:	20001b30 	.word	0x20001b30
 8005348:	20001afc 	.word	0x20001afc
 800534c:	20001b00 	.word	0x20001b00

08005350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005356:	e019      	b.n	800538c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005358:	f7fe fc08 	bl	8003b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800535c:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <prvCheckTasksWaitingTermination+0x50>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fae1 	bl	8003930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <prvCheckTasksWaitingTermination+0x54>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3b01      	subs	r3, #1
 8005374:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <prvCheckTasksWaitingTermination+0x54>)
 8005376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	4a0a      	ldr	r2, [pc, #40]	@ (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 8005380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005382:	f7fe fc23 	bl	8003bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f810 	bl	80053ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800538c:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <prvCheckTasksWaitingTermination+0x58>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e1      	bne.n	8005358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20001b18 	.word	0x20001b18
 80053a4:	20001b44 	.word	0x20001b44
 80053a8:	20001b2c 	.word	0x20001b2c

080053ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	334c      	adds	r3, #76	@ 0x4c
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd3b 	bl	8005e34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d108      	bne.n	80053da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe f90b 	bl	80035e8 <vPortFree>
				vPortFree( pxTCB );
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe f908 	bl	80035e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053d8:	e019      	b.n	800540e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d103      	bne.n	80053ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fe f8ff 	bl	80035e8 <vPortFree>
	}
 80053ea:	e010      	b.n	800540e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d00b      	beq.n	800540e <prvDeleteTCB+0x62>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <prvDeleteTCB+0x5e>
	}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 800542a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800542e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005430:	e008      	b.n	8005444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005432:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20001afc 	.word	0x20001afc
 8005454:	20001b64 	.word	0x20001b64

08005458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <xTaskGetSchedulerState+0x34>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005466:	2301      	movs	r3, #1
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	e008      	b.n	800547e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546c:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <xTaskGetSchedulerState+0x38>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005474:	2302      	movs	r3, #2
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	e001      	b.n	800547e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800547e:	687b      	ldr	r3, [r7, #4]
	}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	20001b50 	.word	0x20001b50
 8005490:	20001b6c 	.word	0x20001b6c

08005494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d070      	beq.n	800558c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005598 <xTaskPriorityDisinherit+0x104>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d00b      	beq.n	80054cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	60fb      	str	r3, [r7, #12]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10b      	bne.n	80054ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	60bb      	str	r3, [r7, #8]
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	429a      	cmp	r2, r3
 8005500:	d044      	beq.n	800558c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005506:	2b00      	cmp	r3, #0
 8005508:	d140      	bne.n	800558c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fa0e 	bl	8003930 <uxListRemove>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d115      	bne.n	8005546 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551e:	491f      	ldr	r1, [pc, #124]	@ (800559c <xTaskPriorityDisinherit+0x108>)
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xTaskPriorityDisinherit+0xb2>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	2201      	movs	r2, #1
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43da      	mvns	r2, r3
 800553c:	4b18      	ldr	r3, [pc, #96]	@ (80055a0 <xTaskPriorityDisinherit+0x10c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4013      	ands	r3, r2
 8005542:	4a17      	ldr	r2, [pc, #92]	@ (80055a0 <xTaskPriorityDisinherit+0x10c>)
 8005544:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	f1c3 0207 	rsb	r2, r3, #7
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	2201      	movs	r2, #1
 8005560:	409a      	lsls	r2, r3
 8005562:	4b0f      	ldr	r3, [pc, #60]	@ (80055a0 <xTaskPriorityDisinherit+0x10c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	4a0d      	ldr	r2, [pc, #52]	@ (80055a0 <xTaskPriorityDisinherit+0x10c>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4a08      	ldr	r2, [pc, #32]	@ (800559c <xTaskPriorityDisinherit+0x108>)
 800557a:	441a      	add	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe f979 	bl	800387a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800558c:	697b      	ldr	r3, [r7, #20]
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20001a44 	.word	0x20001a44
 800559c:	20001a48 	.word	0x20001a48
 80055a0:	20001b4c 	.word	0x20001b4c

080055a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b29      	ldr	r3, [pc, #164]	@ (8005654 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b4:	4b28      	ldr	r3, [pc, #160]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe f9b8 	bl	8003930 <uxListRemove>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	2201      	movs	r2, #1
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43da      	mvns	r2, r3
 80055d4:	4b21      	ldr	r3, [pc, #132]	@ (800565c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4013      	ands	r3, r2
 80055da:	4a20      	ldr	r2, [pc, #128]	@ (800565c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e4:	d10a      	bne.n	80055fc <prvAddCurrentTaskToDelayedList+0x58>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	481a      	ldr	r0, [pc, #104]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055f6:	f7fe f940 	bl	800387a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055fa:	e026      	b.n	800564a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005604:	4b14      	ldr	r3, [pc, #80]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d209      	bcs.n	8005628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005614:	4b13      	ldr	r3, [pc, #76]	@ (8005664 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b0f      	ldr	r3, [pc, #60]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fe f94d 	bl	80038c0 <vListInsert>
}
 8005626:	e010      	b.n	800564a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005628:	4b0f      	ldr	r3, [pc, #60]	@ (8005668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fe f943 	bl	80038c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <prvAddCurrentTaskToDelayedList+0xc8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	d202      	bcs.n	800564a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005644:	4a09      	ldr	r2, [pc, #36]	@ (800566c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6013      	str	r3, [r2, #0]
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20001b48 	.word	0x20001b48
 8005658:	20001a44 	.word	0x20001a44
 800565c:	20001b4c 	.word	0x20001b4c
 8005660:	20001b30 	.word	0x20001b30
 8005664:	20001b00 	.word	0x20001b00
 8005668:	20001afc 	.word	0x20001afc
 800566c:	20001b64 	.word	0x20001b64

08005670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800567a:	f000 fb93 	bl	8005da4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <xTimerCreateTimerTask+0x84>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d021      	beq.n	80056ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800568e:	1d3a      	adds	r2, r7, #4
 8005690:	f107 0108 	add.w	r1, r7, #8
 8005694:	f107 030c 	add.w	r3, r7, #12
 8005698:	4618      	mov	r0, r3
 800569a:	f7fb f9cd 	bl	8000a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	9202      	str	r2, [sp, #8]
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	2302      	movs	r3, #2
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2300      	movs	r3, #0
 80056ae:	460a      	mov	r2, r1
 80056b0:	4911      	ldr	r1, [pc, #68]	@ (80056f8 <xTimerCreateTimerTask+0x88>)
 80056b2:	4812      	ldr	r0, [pc, #72]	@ (80056fc <xTimerCreateTimerTask+0x8c>)
 80056b4:	f7ff f88c 	bl	80047d0 <xTaskCreateStatic>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4a11      	ldr	r2, [pc, #68]	@ (8005700 <xTimerCreateTimerTask+0x90>)
 80056bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80056be:	4b10      	ldr	r3, [pc, #64]	@ (8005700 <xTimerCreateTimerTask+0x90>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056c6:	2301      	movs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056e8:	697b      	ldr	r3, [r7, #20]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20001ba0 	.word	0x20001ba0
 80056f8:	080060d4 	.word	0x080060d4
 80056fc:	08005979 	.word	0x08005979
 8005700:	20001ba4 	.word	0x20001ba4

08005704 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005712:	2028      	movs	r0, #40	@ 0x28
 8005714:	f7fd fe9a 	bl	800344c <pvPortMalloc>
 8005718:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f845 	bl	80057c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800573c:	697b      	ldr	r3, [r7, #20]
	}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08a      	sub	sp, #40	@ 0x28
 800574a:	af02      	add	r7, sp, #8
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005754:	2328      	movs	r3, #40	@ 0x28
 8005756:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b28      	cmp	r3, #40	@ 0x28
 800575c:	d00b      	beq.n	8005776 <xTimerCreateStatic+0x30>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	61bb      	str	r3, [r7, #24]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <xTimerCreateStatic+0x50>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005798:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f805 	bl	80057c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80057bc:	69fb      	ldr	r3, [r7, #28]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	617b      	str	r3, [r7, #20]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01e      	beq.n	8005836 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80057f8:	f000 fad4 	bl	8005da4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	3304      	adds	r3, #4
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe f822 	bl	8003862 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	b2da      	uxtb	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	@ 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800584e:	2300      	movs	r3, #0
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <xTimerGenericCommand+0x30>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	623b      	str	r3, [r7, #32]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005870:	4b19      	ldr	r3, [pc, #100]	@ (80058d8 <xTimerGenericCommand+0x98>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02a      	beq.n	80058ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b05      	cmp	r3, #5
 8005888:	dc18      	bgt.n	80058bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800588a:	f7ff fde5 	bl	8005458 <xTaskGetSchedulerState>
 800588e:	4603      	mov	r3, r0
 8005890:	2b02      	cmp	r3, #2
 8005892:	d109      	bne.n	80058a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005894:	4b10      	ldr	r3, [pc, #64]	@ (80058d8 <xTimerGenericCommand+0x98>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	f107 0114 	add.w	r1, r7, #20
 800589c:	2300      	movs	r3, #0
 800589e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a0:	f7fe fba8 	bl	8003ff4 <xQueueGenericSend>
 80058a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80058a6:	e012      	b.n	80058ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <xTimerGenericCommand+0x98>)
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	f107 0114 	add.w	r1, r7, #20
 80058b0:	2300      	movs	r3, #0
 80058b2:	2200      	movs	r2, #0
 80058b4:	f7fe fb9e 	bl	8003ff4 <xQueueGenericSend>
 80058b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80058ba:	e008      	b.n	80058ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <xTimerGenericCommand+0x98>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	f107 0114 	add.w	r1, r7, #20
 80058c4:	2300      	movs	r3, #0
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	f7fe fc96 	bl	80041f8 <xQueueGenericSendFromISR>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	@ 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20001ba0 	.word	0x20001ba0

080058dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e6:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <prvProcessExpiredTimer+0x98>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe f81b 	bl	8003930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d023      	beq.n	8005950 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	18d1      	adds	r1, r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	6978      	ldr	r0, [r7, #20]
 8005916:	f000 f8d3 	bl	8005ac0 <prvInsertTimerInActiveList>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005920:	2300      	movs	r3, #0
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	2100      	movs	r1, #0
 800592a:	6978      	ldr	r0, [r7, #20]
 800592c:	f7ff ff88 	bl	8005840 <xTimerGenericCommand>
 8005930:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d114      	bne.n	8005962 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	4798      	blx	r3
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20001b98 	.word	0x20001b98

08005978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f000 f859 	bl	8005a3c <prvGetNextExpireTime>
 800598a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f805 	bl	80059a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005996:	f000 f8d5 	bl	8005b44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800599a:	bf00      	nop
 800599c:	e7f0      	b.n	8005980 <prvTimerTask+0x8>
	...

080059a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059aa:	f7ff f967 	bl	8004c7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f864 	bl	8005a80 <prvSampleTimeNow>
 80059b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d130      	bne.n	8005a22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <prvProcessTimerOrBlockTask+0x3c>
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d806      	bhi.n	80059dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059ce:	f7ff f963 	bl	8004c98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ff81 	bl	80058dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059da:	e024      	b.n	8005a26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059e2:	4b13      	ldr	r3, [pc, #76]	@ (8005a30 <prvProcessTimerOrBlockTask+0x90>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <prvProcessTimerOrBlockTask+0x50>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <prvProcessTimerOrBlockTask+0x52>
 80059f0:	2300      	movs	r3, #0
 80059f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005a34 <prvProcessTimerOrBlockTask+0x94>)
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7fe feb1 	bl	8004768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a06:	f7ff f947 	bl	8004c98 <xTaskResumeAll>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a10:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <prvProcessTimerOrBlockTask+0x98>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
}
 8005a20:	e001      	b.n	8005a26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a22:	f7ff f939 	bl	8004c98 <xTaskResumeAll>
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20001b9c 	.word	0x20001b9c
 8005a34:	20001ba0 	.word	0x20001ba0
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a44:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <prvGetNextExpireTime+0x40>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <prvGetNextExpireTime+0x16>
 8005a4e:	2201      	movs	r2, #1
 8005a50:	e000      	b.n	8005a54 <prvGetNextExpireTime+0x18>
 8005a52:	2200      	movs	r2, #0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <prvGetNextExpireTime+0x40>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e001      	b.n	8005a70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a70:	68fb      	ldr	r3, [r7, #12]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	20001b98 	.word	0x20001b98

08005a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a88:	f7ff f9a4 	bl	8004dd4 <xTaskGetTickCount>
 8005a8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005abc <prvSampleTimeNow+0x3c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d205      	bcs.n	8005aa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a98:	f000 f91e 	bl	8005cd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005aaa:	4a04      	ldr	r2, [pc, #16]	@ (8005abc <prvSampleTimeNow+0x3c>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20001ba8 	.word	0x20001ba8

08005ac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d812      	bhi.n	8005b0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d302      	bcc.n	8005afa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e01b      	b.n	8005b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <prvInsertTimerInActiveList+0x7c>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7fd fedb 	bl	80038c0 <vListInsert>
 8005b0a:	e012      	b.n	8005b32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d206      	bcs.n	8005b22 <prvInsertTimerInActiveList+0x62>
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e007      	b.n	8005b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b22:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <prvInsertTimerInActiveList+0x80>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fd fec7 	bl	80038c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b32:	697b      	ldr	r3, [r7, #20]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20001b9c 	.word	0x20001b9c
 8005b40:	20001b98 	.word	0x20001b98

08005b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	@ 0x30
 8005b48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b4a:	e0b2      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f2c0 80af 	blt.w	8005cb2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	3304      	adds	r3, #4
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fd fee3 	bl	8003930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff87 	bl	8005a80 <prvSampleTimeNow>
 8005b72:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b09      	cmp	r3, #9
 8005b78:	f200 8098 	bhi.w	8005cac <prvProcessReceivedCommands+0x168>
 8005b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <prvProcessReceivedCommands+0x40>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bad 	.word	0x08005bad
 8005b8c:	08005bad 	.word	0x08005bad
 8005b90:	08005c23 	.word	0x08005c23
 8005b94:	08005c37 	.word	0x08005c37
 8005b98:	08005c83 	.word	0x08005c83
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bad 	.word	0x08005bad
 8005ba4:	08005c23 	.word	0x08005c23
 8005ba8:	08005c37 	.word	0x08005c37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	18d1      	adds	r1, r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bcc:	f7ff ff78 	bl	8005ac0 <prvInsertTimerInActiveList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d06c      	beq.n	8005cb0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d061      	beq.n	8005cb0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bfe:	f7ff fe1f 	bl	8005840 <xTimerGenericCommand>
 8005c02:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d152      	bne.n	8005cb0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	61bb      	str	r3, [r7, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005c34:	e03d      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	617b      	str	r3, [r7, #20]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	18d1      	adds	r1, r2, r3
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c7c:	f7ff ff20 	bl	8005ac0 <prvInsertTimerInActiveList>
					break;
 8005c80:	e017      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c92:	f7fd fca9 	bl	80035e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c96:	e00c      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005caa:	e002      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <prvProcessReceivedCommands+0x16e>
					break;
 8005cb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cb2:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <prvProcessReceivedCommands+0x190>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f107 0108 	add.w	r1, r7, #8
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fb39 	bl	8004334 <xQueueReceive>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f47f af41 	bne.w	8005b4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	3728      	adds	r7, #40	@ 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20001ba0 	.word	0x20001ba0

08005cd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cde:	e049      	b.n	8005d74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cea:	4b2c      	ldr	r3, [pc, #176]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd fe19 	bl	8003930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02f      	beq.n	8005d74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d90e      	bls.n	8005d44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d32:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f7fd fdbf 	bl	80038c0 <vListInsert>
 8005d42:	e017      	b.n	8005d74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d44:	2300      	movs	r3, #0
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff fd76 	bl	8005840 <xTimerGenericCommand>
 8005d54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	603b      	str	r3, [r7, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1b0      	bne.n	8005ce0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d7e:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <prvSwitchTimerLists+0xc8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <prvSwitchTimerLists+0xc4>)
 8005d8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d8c:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <prvSwitchTimerLists+0xc8>)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6013      	str	r3, [r2, #0]
}
 8005d92:	bf00      	nop
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20001b98 	.word	0x20001b98
 8005da0:	20001b9c 	.word	0x20001b9c

08005da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005daa:	f7fd fedf 	bl	8003b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <prvCheckForValidListAndQueue+0x60>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d120      	bne.n	8005df8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005db6:	4814      	ldr	r0, [pc, #80]	@ (8005e08 <prvCheckForValidListAndQueue+0x64>)
 8005db8:	f7fd fd34 	bl	8003824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dbc:	4813      	ldr	r0, [pc, #76]	@ (8005e0c <prvCheckForValidListAndQueue+0x68>)
 8005dbe:	f7fd fd31 	bl	8003824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <prvCheckForValidListAndQueue+0x6c>)
 8005dc4:	4a10      	ldr	r2, [pc, #64]	@ (8005e08 <prvCheckForValidListAndQueue+0x64>)
 8005dc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005dc8:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <prvCheckForValidListAndQueue+0x70>)
 8005dca:	4a10      	ldr	r2, [pc, #64]	@ (8005e0c <prvCheckForValidListAndQueue+0x68>)
 8005dcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dce:	2300      	movs	r3, #0
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4b11      	ldr	r3, [pc, #68]	@ (8005e18 <prvCheckForValidListAndQueue+0x74>)
 8005dd4:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <prvCheckForValidListAndQueue+0x78>)
 8005dd6:	210c      	movs	r1, #12
 8005dd8:	200a      	movs	r0, #10
 8005dda:	f7fe f833 	bl	8003e44 <xQueueGenericCreateStatic>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4a08      	ldr	r2, [pc, #32]	@ (8005e04 <prvCheckForValidListAndQueue+0x60>)
 8005de2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005de4:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <prvCheckForValidListAndQueue+0x60>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <prvCheckForValidListAndQueue+0x60>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	490b      	ldr	r1, [pc, #44]	@ (8005e20 <prvCheckForValidListAndQueue+0x7c>)
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fc90 	bl	8004718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005df8:	f7fd fee8 	bl	8003bcc <vPortExitCritical>
}
 8005dfc:	bf00      	nop
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20001ba0 	.word	0x20001ba0
 8005e08:	20001b70 	.word	0x20001b70
 8005e0c:	20001b84 	.word	0x20001b84
 8005e10:	20001b98 	.word	0x20001b98
 8005e14:	20001b9c 	.word	0x20001b9c
 8005e18:	20001c24 	.word	0x20001c24
 8005e1c:	20001bac 	.word	0x20001bac
 8005e20:	080060dc 	.word	0x080060dc

08005e24 <memset>:
 8005e24:	4603      	mov	r3, r0
 8005e26:	4402      	add	r2, r0
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <memset+0xa>
 8005e2c:	4770      	bx	lr
 8005e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e32:	e7f9      	b.n	8005e28 <memset+0x4>

08005e34 <_reclaim_reent>:
 8005e34:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <_reclaim_reent+0xa8>)
 8005e36:	b570      	push	{r4, r5, r6, lr}
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4283      	cmp	r3, r0
 8005e3e:	d04b      	beq.n	8005ed8 <_reclaim_reent+0xa4>
 8005e40:	69c3      	ldr	r3, [r0, #28]
 8005e42:	b1ab      	cbz	r3, 8005e70 <_reclaim_reent+0x3c>
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	b16b      	cbz	r3, 8005e64 <_reclaim_reent+0x30>
 8005e48:	2500      	movs	r5, #0
 8005e4a:	69e3      	ldr	r3, [r4, #28]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	5959      	ldr	r1, [r3, r5]
 8005e50:	2900      	cmp	r1, #0
 8005e52:	d13b      	bne.n	8005ecc <_reclaim_reent+0x98>
 8005e54:	3504      	adds	r5, #4
 8005e56:	2d80      	cmp	r5, #128	@ 0x80
 8005e58:	d1f7      	bne.n	8005e4a <_reclaim_reent+0x16>
 8005e5a:	69e3      	ldr	r3, [r4, #28]
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	68d9      	ldr	r1, [r3, #12]
 8005e60:	f000 f872 	bl	8005f48 <_free_r>
 8005e64:	69e3      	ldr	r3, [r4, #28]
 8005e66:	6819      	ldr	r1, [r3, #0]
 8005e68:	b111      	cbz	r1, 8005e70 <_reclaim_reent+0x3c>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f86c 	bl	8005f48 <_free_r>
 8005e70:	6961      	ldr	r1, [r4, #20]
 8005e72:	b111      	cbz	r1, 8005e7a <_reclaim_reent+0x46>
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 f867 	bl	8005f48 <_free_r>
 8005e7a:	69e1      	ldr	r1, [r4, #28]
 8005e7c:	b111      	cbz	r1, 8005e84 <_reclaim_reent+0x50>
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f862 	bl	8005f48 <_free_r>
 8005e84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e86:	b111      	cbz	r1, 8005e8e <_reclaim_reent+0x5a>
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 f85d 	bl	8005f48 <_free_r>
 8005e8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e90:	b111      	cbz	r1, 8005e98 <_reclaim_reent+0x64>
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f858 	bl	8005f48 <_free_r>
 8005e98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e9a:	b111      	cbz	r1, 8005ea2 <_reclaim_reent+0x6e>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f853 	bl	8005f48 <_free_r>
 8005ea2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ea4:	b111      	cbz	r1, 8005eac <_reclaim_reent+0x78>
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f84e 	bl	8005f48 <_free_r>
 8005eac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005eae:	b111      	cbz	r1, 8005eb6 <_reclaim_reent+0x82>
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 f849 	bl	8005f48 <_free_r>
 8005eb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005eb8:	b111      	cbz	r1, 8005ec0 <_reclaim_reent+0x8c>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 f844 	bl	8005f48 <_free_r>
 8005ec0:	6a23      	ldr	r3, [r4, #32]
 8005ec2:	b14b      	cbz	r3, 8005ed8 <_reclaim_reent+0xa4>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005eca:	4718      	bx	r3
 8005ecc:	680e      	ldr	r6, [r1, #0]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f83a 	bl	8005f48 <_free_r>
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	e7bb      	b.n	8005e50 <_reclaim_reent+0x1c>
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
 8005eda:	bf00      	nop
 8005edc:	20000014 	.word	0x20000014

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	4d0c      	ldr	r5, [pc, #48]	@ (8005f18 <__libc_init_array+0x38>)
 8005ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8005f1c <__libc_init_array+0x3c>)
 8005ee8:	1b64      	subs	r4, r4, r5
 8005eea:	10a4      	asrs	r4, r4, #2
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	f000 f87e 	bl	8005ff0 <_init>
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	4d0a      	ldr	r5, [pc, #40]	@ (8005f20 <__libc_init_array+0x40>)
 8005ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8005f24 <__libc_init_array+0x44>)
 8005efa:	1b64      	subs	r4, r4, r5
 8005efc:	10a4      	asrs	r4, r4, #2
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	080061c4 	.word	0x080061c4
 8005f1c:	080061c4 	.word	0x080061c4
 8005f20:	080061c4 	.word	0x080061c4
 8005f24:	080061c8 	.word	0x080061c8

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <memcpy>:
 8005f2c:	440a      	add	r2, r1
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f34:	d100      	bne.n	8005f38 <memcpy+0xc>
 8005f36:	4770      	bx	lr
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f44:	d1f9      	bne.n	8005f3a <memcpy+0xe>
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <_free_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d040      	beq.n	8005fd2 <_free_r+0x8a>
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f0c      	subs	r4, r1, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	18e4      	addlt	r4, r4, r3
 8005f5c:	f000 f83c 	bl	8005fd8 <__malloc_lock>
 8005f60:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd4 <_free_r+0x8c>)
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	b933      	cbnz	r3, 8005f74 <_free_r+0x2c>
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6014      	str	r4, [r2, #0]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f70:	f000 b838 	b.w	8005fe4 <__malloc_unlock>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d908      	bls.n	8005f8a <_free_r+0x42>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	1821      	adds	r1, r4, r0
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf01      	itttt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	1809      	addeq	r1, r1, r0
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	e7ed      	b.n	8005f66 <_free_r+0x1e>
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b10b      	cbz	r3, 8005f94 <_free_r+0x4c>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d9fa      	bls.n	8005f8a <_free_r+0x42>
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	1850      	adds	r0, r2, r1
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d10b      	bne.n	8005fb4 <_free_r+0x6c>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	4401      	add	r1, r0
 8005fa0:	1850      	adds	r0, r2, r1
 8005fa2:	4283      	cmp	r3, r0
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	d1e0      	bne.n	8005f6a <_free_r+0x22>
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4408      	add	r0, r1
 8005fae:	6010      	str	r0, [r2, #0]
 8005fb0:	6053      	str	r3, [r2, #4]
 8005fb2:	e7da      	b.n	8005f6a <_free_r+0x22>
 8005fb4:	d902      	bls.n	8005fbc <_free_r+0x74>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	e7d6      	b.n	8005f6a <_free_r+0x22>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	1821      	adds	r1, r4, r0
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	bf01      	itttt	eq
 8005fc4:	6819      	ldreq	r1, [r3, #0]
 8005fc6:	685b      	ldreq	r3, [r3, #4]
 8005fc8:	1809      	addeq	r1, r1, r0
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6054      	str	r4, [r2, #4]
 8005fd0:	e7cb      	b.n	8005f6a <_free_r+0x22>
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20001da8 	.word	0x20001da8

08005fd8 <__malloc_lock>:
 8005fd8:	4801      	ldr	r0, [pc, #4]	@ (8005fe0 <__malloc_lock+0x8>)
 8005fda:	f7ff bfa5 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005fde:	bf00      	nop
 8005fe0:	20001da4 	.word	0x20001da4

08005fe4 <__malloc_unlock>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	@ (8005fec <__malloc_unlock+0x8>)
 8005fe6:	f7ff bfa0 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005fea:	bf00      	nop
 8005fec:	20001da4 	.word	0x20001da4

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr
