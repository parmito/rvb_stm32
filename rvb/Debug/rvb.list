
rvb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006ae8  08006ae8  00007ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006d4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  20000060  08006dac  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab8  08006dac  00008ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ff7  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ba4  00000000  00000000  0001c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c82  00000000  00000000  00020cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a79b  00000000  00000000  00021942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155c2  00000000  00000000  0003c0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6d8  00000000  00000000  0005169f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ded77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004678  00000000  00000000  000dedbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e3434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ad0 	.word	0x08006ad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006ad0 	.word	0x08006ad0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//
//////////////////////////////////////////////

extern void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000168:	2014      	movs	r0, #20
 800016a:	f002 f8a4 	bl	80022b6 <HAL_NVIC_DisableIRQ>
	HAL_ResumeTick();
 800016e:	f001 f935 	bl	80013dc <HAL_ResumeTick>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 8000172:	4b0c      	ldr	r3, [pc, #48]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000174:	2201      	movs	r2, #1
 8000176:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 8000178:	4b0a      	ldr	r3, [pc, #40]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800017a:	2200      	movs	r2, #0
 800017c:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_WAKEUP;
 800017e:	4b09      	ldr	r3, [pc, #36]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000180:	2206      	movs	r2, #6
 8000182:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 8000184:	4b07      	ldr	r3, [pc, #28]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000186:	2200      	movs	r2, #0
 8000188:	605a      	str	r2, [r3, #4]
    xQueueGenericSendFromISR(*pstQueueIO, &stAppCANMsg, 0,0);
 800018a:	4b07      	ldr	r3, [pc, #28]	@ (80001a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	6818      	ldr	r0, [r3, #0]
 8000190:	2300      	movs	r3, #0
 8000192:	2200      	movs	r2, #0
 8000194:	4903      	ldr	r1, [pc, #12]	@ (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000196:	f004 f97f 	bl	8004498 <xQueueGenericSendFromISR>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	2000007c 	.word	0x2000007c
 80001a8:	20000094 	.word	0x20000094

080001ac <TaskAppCAN_getQueue>:
//              TaskAppCAN_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppCAN_getQueue()
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	return &xQueueAppCAN;
 80001b0:	4b02      	ldr	r3, [pc, #8]	@ (80001bc <TaskAppCAN_getQueue+0x10>)
}
 80001b2:	4618      	mov	r0, r3
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000088 	.word	0x20000088

080001c0 <TaskAppCAN_Entry>:
//              TaskAppCAN_Entry
//
//
//////////////////////////////////////////////
void TaskAppCAN_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
    xQueueAppCAN = xQueue;
 80001ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000208 <TaskAppCAN_Entry+0x48>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	6013      	str	r3, [r2, #0]
    xTimerAppCAN = xTimer;
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <TaskAppCAN_Entry+0x4c>)
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	6013      	str	r3, [r2, #0]

    hCAN = hGet_CAN_Handler();
 80001d6:	f000 fcd3 	bl	8000b80 <hGet_CAN_Handler>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000210 <TaskAppCAN_Entry+0x50>)
 80001de:	6013      	str	r3, [r2, #0]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <TaskAppCAN_Entry+0x54>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPCAN;
 80001e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000214 <TaskAppCAN_Entry+0x54>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPCAN_INIT;
 80001ec:	4b09      	ldr	r3, [pc, #36]	@ (8000214 <TaskAppCAN_Entry+0x54>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <TaskAppCAN_Entry+0x48>)
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	2300      	movs	r3, #0
 80001f8:	2200      	movs	r2, #0
 80001fa:	4906      	ldr	r1, [pc, #24]	@ (8000214 <TaskAppCAN_Entry+0x54>)
 80001fc:	f004 f84a 	bl	8004294 <xQueueGenericSend>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000088 	.word	0x20000088
 800020c:	2000008c 	.word	0x2000008c
 8000210:	20000098 	.word	0x20000098
 8000214:	2000007c 	.word	0x2000007c

08000218 <TaskAppCAN_Start>:
//              TaskAppCAN_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_Start(sMessageType *psMessage)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000220:	2301      	movs	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]

    (void)stHAL_CAN_FilterConfig();
 8000224:	f000 fcb6 	bl	8000b94 <stHAL_CAN_FilterConfig>
    (void)HAL_CAN_Start(hCAN);
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <TaskAppCAN_Start+0x3c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f001 faf2 	bl	8001816 <HAL_CAN_Start>

    pstQueueAppSerial  = TaskAppSerial_getQueue();
 8000232:	f000 f9a7 	bl	8000584 <TaskAppSerial_getQueue>
 8000236:	4603      	mov	r3, r0
 8000238:	4a07      	ldr	r2, [pc, #28]	@ (8000258 <TaskAppCAN_Start+0x40>)
 800023a:	6013      	str	r3, [r2, #0]
    pstQueueIO = TaskIO_getQueue();
 800023c:	f000 faee 	bl	800081c <TaskIO_getQueue>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <TaskAppCAN_Start+0x44>)
 8000246:	601a      	str	r2, [r3, #0]
    /*u16SizeSerialTxBuffer =  TaskAppSerial_getTxBuffer(&u8SerialTxBuffer);
    pu8SerialTxBuffer = &u8SerialTxBuffer;*/
	return boError;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000098 	.word	0x20000098
 8000258:	20000090 	.word	0x20000090
 800025c:	20000094 	.word	0x20000094

08000260 <TaskAppCAN_ReceiveEvent>:
//              TaskAppCAN_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_ReceiveEvent(sMessageType *psMessage)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]

    tstFrameCAN *pstFrameCAN = (tstFrameCAN*)(psMessage->pcMessageData);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	60bb      	str	r3, [r7, #8]
        HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
        HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
    	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    }*/

    memset((char*)u8SerialTxBuffer,0x00,sizeof(u8SerialTxBuffer));
 8000272:	2240      	movs	r2, #64	@ 0x40
 8000274:	2100      	movs	r1, #0
 8000276:	4826      	ldr	r0, [pc, #152]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 8000278:	f005 ff44 	bl	8006104 <memset>
    sprintf((char*)&u8SerialTxBuffer[0],"%8X    ",(uint32_t)pstFrameCAN->u32DID);
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	461a      	mov	r2, r3
 8000282:	4924      	ldr	r1, [pc, #144]	@ (8000314 <TaskAppCAN_ReceiveEvent+0xb4>)
 8000284:	4822      	ldr	r0, [pc, #136]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 8000286:	f005 ff1d 	bl	80060c4 <siprintf>
    size_t u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 800028a:	4821      	ldr	r0, [pc, #132]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 800028c:	f7ff ff60 	bl	8000150 <strlen>
 8000290:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
 8000296:	e012      	b.n	80002be <TaskAppCAN_ReceiveEvent+0x5e>
    {
    	sprintf((char*)&u8SerialTxBuffer[u16Len],"%02X ",(uint16_t)pstFrameCAN->u8Data[u32]);
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	4a1d      	ldr	r2, [pc, #116]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 800029c:	1898      	adds	r0, r3, r2
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	4413      	add	r3, r2
 80002a4:	3308      	adds	r3, #8
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	491b      	ldr	r1, [pc, #108]	@ (8000318 <TaskAppCAN_ReceiveEvent+0xb8>)
 80002ac:	f005 ff0a 	bl	80060c4 <siprintf>
    	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002b0:	4817      	ldr	r0, [pc, #92]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 80002b2:	f7ff ff4d 	bl	8000150 <strlen>
 80002b6:	6178      	str	r0, [r7, #20]
    for(uint32_t u32 = 0; u32 < pstFrameCAN->u32DLC; u32++)
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	3301      	adds	r3, #1
 80002bc:	613b      	str	r3, [r7, #16]
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	693a      	ldr	r2, [r7, #16]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d3e7      	bcc.n	8000298 <TaskAppCAN_ReceiveEvent+0x38>
    }
	u16Len = strlen((char*)&u8SerialTxBuffer[0]);
 80002c8:	4811      	ldr	r0, [pc, #68]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 80002ca:	f7ff ff41 	bl	8000150 <strlen>
 80002ce:	6178      	str	r0, [r7, #20]
	sprintf((char*)&u8SerialTxBuffer[u16Len],"\r\n");
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 80002d4:	4413      	add	r3, r2
 80002d6:	4911      	ldr	r1, [pc, #68]	@ (800031c <TaskAppCAN_ReceiveEvent+0xbc>)
 80002d8:	4618      	mov	r0, r3
 80002da:	f005 fef3 	bl	80060c4 <siprintf>

    stAppCANMsg.ucSrc = SRC_APPCAN;
 80002de:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_APPSERIAL;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc0>)
 80002e6:	2202      	movs	r2, #2
 80002e8:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc0>)
 80002ec:	2203      	movs	r2, #3
 80002ee:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = (char*)&u8SerialTxBuffer[0];
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc0>)
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <TaskAppCAN_ReceiveEvent+0xb0>)
 80002f4:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <TaskAppCAN_ReceiveEvent+0xc4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	2200      	movs	r2, #0
 8000300:	4907      	ldr	r1, [pc, #28]	@ (8000320 <TaskAppCAN_ReceiveEvent+0xc0>)
 8000302:	f003 ffc7 	bl	8004294 <xQueueGenericSend>

	return boError;
 8000306:	7bfb      	ldrb	r3, [r7, #15]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000013c 	.word	0x2000013c
 8000314:	08006ae8 	.word	0x08006ae8
 8000318:	08006af0 	.word	0x08006af0
 800031c:	08006af8 	.word	0x08006af8
 8000320:	2000007c 	.word	0x2000007c
 8000324:	20000090 	.word	0x20000090

08000328 <TaskAppCAN_TransmitEvent>:
//              TaskAppCAN_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_TransmitEvent(sMessageType *psMessage)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000330:	2301      	movs	r3, #1
 8000332:	73fb      	strb	r3, [r7, #15]
    stAppCANMsg.ucEvent = EVENT_APPSERIAL_TX;
    strcpy((char*)pu8SerialTxBuffer,"SURDAO\r\n");
    stAppCANMsg.pcMessageData = (char*)pu8SerialTxBuffer;
    xQueueGenericSend(*pstQueueAppSerial, &stAppCANMsg, 0,0);*/

	return boError;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <TaskAppCAN_PSEvent>:
//             TaskAppCAN_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_PSEvent(sMessageType *psMessage)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000348:	2301      	movs	r3, #1
 800034a:	73fb      	strb	r3, [r7, #15]

    stAppCANMsg.ucSrc = SRC_APPCAN;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <TaskAppCAN_PSEvent+0x40>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
    stAppCANMsg.ucDest = SRC_IO;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <TaskAppCAN_PSEvent+0x40>)
 8000354:	2200      	movs	r2, #0
 8000356:	705a      	strb	r2, [r3, #1]
    stAppCANMsg.ucEvent = EVENT_IO_PS;
 8000358:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <TaskAppCAN_PSEvent+0x40>)
 800035a:	2205      	movs	r2, #5
 800035c:	709a      	strb	r2, [r3, #2]
    stAppCANMsg.pcMessageData = NULL;
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <TaskAppCAN_PSEvent+0x40>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueIO, &stAppCANMsg, 0,0);
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <TaskAppCAN_PSEvent+0x44>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	2200      	movs	r2, #0
 800036e:	4904      	ldr	r1, [pc, #16]	@ (8000380 <TaskAppCAN_PSEvent+0x40>)
 8000370:	f003 ff90 	bl	8004294 <xQueueGenericSend>

	return boError;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000007c 	.word	0x2000007c
 8000384:	20000094 	.word	0x20000094

08000388 <TaskAppCAN_SleepEvent>:
//             TaskAppCAN_SleepEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_SleepEvent(sMessageType *psMessage)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000390:	2301      	movs	r3, #1
 8000392:	73fb      	strb	r3, [r7, #15]

	HAL_SuspendTick();
 8000394:	f001 f814 	bl	80013c0 <HAL_SuspendTick>
	/*Configure GPIO pin Output Level */

	HAL_CAN_Stop(hCAN);
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <TaskAppCAN_SleepEvent+0x5c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f001 fa7e 	bl	800189e <HAL_CAN_Stop>
	HAL_CAN_MspDeInit(hCAN);
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <TaskAppCAN_SleepEvent+0x5c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fbcc 	bl	8000b44 <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(hCAN);
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <TaskAppCAN_SleepEvent+0x5c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fb61 	bl	8000a78 <HAL_CAN_MspInit>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003b6:	2014      	movs	r0, #20
 80003b8:	f001 ff6f 	bl	800229a <HAL_NVIC_EnableIRQ>
	HAL_CAN_Start(hCAN);
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <TaskAppCAN_SleepEvent+0x5c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fa28 	bl	8001816 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(hCAN, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003c6:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <TaskAppCAN_SleepEvent+0x5c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2102      	movs	r1, #2
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fbf7 	bl	8001bc0 <HAL_CAN_ActivateNotification>
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2000      	movs	r0, #0
 80003d6:	f002 f9d1 	bl	800277c <HAL_PWR_EnterSLEEPMode>

	return boError;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000098 	.word	0x20000098

080003e8 <TaskAppCAN_IgnoreEvent>:
//              TaskAppCAN_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppCAN_IgnoreEvent(sMessageType *psMessage)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]

    return(boError);
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <vTaskAppCAN>:
};

/*static uint8_t u8TogglePin = 0;*/

void vTaskAppCAN(void const * argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if( HAL_CAN_GetRxFifoFillLevel(hCAN, CAN_RX_FIFO0) > 0)
 8000408:	4b55      	ldr	r3, [pc, #340]	@ (8000560 <vTaskAppCAN+0x160>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fbaf 	bl	8001b72 <HAL_CAN_GetRxFifoFillLevel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d066      	beq.n	80004e8 <vTaskAppCAN+0xe8>
	{
		u16TimeToSleep = 0;
 800041a:	4b52      	ldr	r3, [pc, #328]	@ (8000564 <vTaskAppCAN+0x164>)
 800041c:	2200      	movs	r2, #0
 800041e:	801a      	strh	r2, [r3, #0]

		memset(&pRxHeader,0x00,sizeof(CAN_RxHeaderTypeDef));
 8000420:	221c      	movs	r2, #28
 8000422:	2100      	movs	r1, #0
 8000424:	4850      	ldr	r0, [pc, #320]	@ (8000568 <vTaskAppCAN+0x168>)
 8000426:	f005 fe6d 	bl	8006104 <memset>
		memset(stFrameRxCAN[u8FifoRxCAN].u8Data,0xFF,sizeof(tstFrameCAN));
 800042a:	4b50      	ldr	r3, [pc, #320]	@ (800056c <vTaskAppCAN+0x16c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	3308      	adds	r3, #8
 8000432:	4a4f      	ldr	r2, [pc, #316]	@ (8000570 <vTaskAppCAN+0x170>)
 8000434:	4413      	add	r3, r2
 8000436:	2210      	movs	r2, #16
 8000438:	21ff      	movs	r1, #255	@ 0xff
 800043a:	4618      	mov	r0, r3
 800043c:	f005 fe62 	bl	8006104 <memset>

		if(HAL_CAN_GetRxMessage(hCAN, CAN_RX_FIFO0,&pRxHeader,stFrameRxCAN[u8FifoRxCAN].u8Data) == HAL_OK)
 8000440:	4b47      	ldr	r3, [pc, #284]	@ (8000560 <vTaskAppCAN+0x160>)
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	4b49      	ldr	r3, [pc, #292]	@ (800056c <vTaskAppCAN+0x16c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	3308      	adds	r3, #8
 800044c:	4a48      	ldr	r2, [pc, #288]	@ (8000570 <vTaskAppCAN+0x170>)
 800044e:	4413      	add	r3, r2
 8000450:	4a45      	ldr	r2, [pc, #276]	@ (8000568 <vTaskAppCAN+0x168>)
 8000452:	2100      	movs	r1, #0
 8000454:	f001 fa6c 	bl	8001930 <HAL_CAN_GetRxMessage>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d166      	bne.n	800052c <vTaskAppCAN+0x12c>
		{
			stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.StdId;
 800045e:	4b43      	ldr	r3, [pc, #268]	@ (800056c <vTaskAppCAN+0x16c>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	4b40      	ldr	r3, [pc, #256]	@ (8000568 <vTaskAppCAN+0x168>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4941      	ldr	r1, [pc, #260]	@ (8000570 <vTaskAppCAN+0x170>)
 800046a:	0103      	lsls	r3, r0, #4
 800046c:	440b      	add	r3, r1
 800046e:	601a      	str	r2, [r3, #0]
			if(pRxHeader.ExtId != 0)
 8000470:	4b3d      	ldr	r3, [pc, #244]	@ (8000568 <vTaskAppCAN+0x168>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <vTaskAppCAN+0x8a>
			{
				stFrameRxCAN[u8FifoRxCAN].u32DID = pRxHeader.ExtId;
 8000478:	4b3c      	ldr	r3, [pc, #240]	@ (800056c <vTaskAppCAN+0x16c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	4b3a      	ldr	r3, [pc, #232]	@ (8000568 <vTaskAppCAN+0x168>)
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	493b      	ldr	r1, [pc, #236]	@ (8000570 <vTaskAppCAN+0x170>)
 8000484:	0103      	lsls	r3, r0, #4
 8000486:	440b      	add	r3, r1
 8000488:	601a      	str	r2, [r3, #0]
			}
			stFrameRxCAN[u8FifoRxCAN].u32DLC = pRxHeader.DLC;
 800048a:	4b38      	ldr	r3, [pc, #224]	@ (800056c <vTaskAppCAN+0x16c>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4618      	mov	r0, r3
 8000490:	4b35      	ldr	r3, [pc, #212]	@ (8000568 <vTaskAppCAN+0x168>)
 8000492:	691a      	ldr	r2, [r3, #16]
 8000494:	4936      	ldr	r1, [pc, #216]	@ (8000570 <vTaskAppCAN+0x170>)
 8000496:	0103      	lsls	r3, r0, #4
 8000498:	440b      	add	r3, r1
 800049a:	3304      	adds	r3, #4
 800049c:	601a      	str	r2, [r3, #0]

			stAppCANMsg.ucSrc = SRC_APPCAN;
 800049e:	4b35      	ldr	r3, [pc, #212]	@ (8000574 <vTaskAppCAN+0x174>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 80004a4:	4b33      	ldr	r3, [pc, #204]	@ (8000574 <vTaskAppCAN+0x174>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_RX;
 80004aa:	4b32      	ldr	r3, [pc, #200]	@ (8000574 <vTaskAppCAN+0x174>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = (char*)&stFrameRxCAN[u8FifoRxCAN];
 80004b0:	4b2e      	ldr	r3, [pc, #184]	@ (800056c <vTaskAppCAN+0x16c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	011b      	lsls	r3, r3, #4
 80004b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000570 <vTaskAppCAN+0x170>)
 80004b8:	4413      	add	r3, r2
 80004ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000574 <vTaskAppCAN+0x174>)
 80004bc:	6053      	str	r3, [r2, #4]
			if(++u8FifoRxCAN >= FIFO_SIZE)
 80004be:	4b2b      	ldr	r3, [pc, #172]	@ (800056c <vTaskAppCAN+0x16c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b29      	ldr	r3, [pc, #164]	@ (800056c <vTaskAppCAN+0x16c>)
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	4b28      	ldr	r3, [pc, #160]	@ (800056c <vTaskAppCAN+0x16c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d902      	bls.n	80004d8 <vTaskAppCAN+0xd8>
			{
				u8FifoRxCAN = 0;
 80004d2:	4b26      	ldr	r3, [pc, #152]	@ (800056c <vTaskAppCAN+0x16c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
			}
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 80004d8:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <vTaskAppCAN+0x178>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	2300      	movs	r3, #0
 80004de:	2200      	movs	r2, #0
 80004e0:	4924      	ldr	r1, [pc, #144]	@ (8000574 <vTaskAppCAN+0x174>)
 80004e2:	f003 fed7 	bl	8004294 <xQueueGenericSend>
 80004e6:	e021      	b.n	800052c <vTaskAppCAN+0x12c>
		}
	}
	else
	{
		if(++u16TimeToSleep >= 3000)
 80004e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000564 <vTaskAppCAN+0x164>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <vTaskAppCAN+0x164>)
 80004f2:	801a      	strh	r2, [r3, #0]
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <vTaskAppCAN+0x164>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d915      	bls.n	800052c <vTaskAppCAN+0x12c>
		{
			u16TimeToSleep = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <vTaskAppCAN+0x164>)
 8000502:	2200      	movs	r2, #0
 8000504:	801a      	strh	r2, [r3, #0]
			stAppCANMsg.ucSrc = SRC_APPCAN;
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <vTaskAppCAN+0x174>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
			stAppCANMsg.ucDest = SRC_APPCAN;
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <vTaskAppCAN+0x174>)
 800050e:	2201      	movs	r2, #1
 8000510:	705a      	strb	r2, [r3, #1]
			stAppCANMsg.ucEvent = EVENT_APPCAN_PS;
 8000512:	4b18      	ldr	r3, [pc, #96]	@ (8000574 <vTaskAppCAN+0x174>)
 8000514:	2204      	movs	r2, #4
 8000516:	709a      	strb	r2, [r3, #2]
			stAppCANMsg.pcMessageData = NULL;
 8000518:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <vTaskAppCAN+0x174>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
			xQueueGenericSend(xQueueAppCAN, ( void * )&stAppCANMsg, 0,0);
 800051e:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <vTaskAppCAN+0x178>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	4913      	ldr	r1, [pc, #76]	@ (8000574 <vTaskAppCAN+0x174>)
 8000528:	f003 feb4 	bl	8004294 <xQueueGenericSend>
		}
	}

	if( xQueueReceive(xQueueAppCAN, &stAppCANMsg, 0 ) )
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <vTaskAppCAN+0x178>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	4910      	ldr	r1, [pc, #64]	@ (8000574 <vTaskAppCAN+0x174>)
 8000534:	4618      	mov	r0, r3
 8000536:	f004 f84d 	bl	80045d4 <xQueueReceive>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d00a      	beq.n	8000556 <vTaskAppCAN+0x156>
	{
		(void)eEventHandler ((unsigned char)SRC_APPCAN,gpasTaskAppCAN_StateMachine[ucCurrentStateAppCAN], &ucCurrentStateAppCAN, &stAppCANMsg);
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <vTaskAppCAN+0x17c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <vTaskAppCAN+0x180>)
 8000548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <vTaskAppCAN+0x174>)
 800054e:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <vTaskAppCAN+0x17c>)
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fd5a 	bl	800100a <eEventHandler>
	}
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000098 	.word	0x20000098
 8000564:	2000017c 	.word	0x2000017c
 8000568:	2000009c 	.word	0x2000009c
 800056c:	200000b8 	.word	0x200000b8
 8000570:	200000bc 	.word	0x200000bc
 8000574:	2000007c 	.word	0x2000007c
 8000578:	20000088 	.word	0x20000088
 800057c:	20000084 	.word	0x20000084
 8000580:	08006c38 	.word	0x08006c38

08000584 <TaskAppSerial_getQueue>:
//              TaskAppSerial_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskAppSerial_getQueue()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	return &xQueueAppSerial;
 8000588:	4b02      	ldr	r3, [pc, #8]	@ (8000594 <TaskAppSerial_getQueue+0x10>)
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000180 	.word	0x20000180

08000598 <TaskAppSerial_Entry>:
//
//
//////////////////////////////////////////////

void TaskAppSerial_Entry(QueueHandle_t xQueue,TimerHandle_t xTimer)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    xQueueAppSerial = xQueue;
 80005a2:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <TaskAppSerial_Entry+0x48>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6013      	str	r3, [r2, #0]
    xTimerAppSerial = xTimer;
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <TaskAppSerial_Entry+0x4c>)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	6013      	str	r3, [r2, #0]

    hUSART = hGet_USART_Handler();
 80005ae:	f000 fe75 	bl	800129c <hGet_USART_Handler>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0c      	ldr	r2, [pc, #48]	@ (80005e8 <TaskAppSerial_Entry+0x50>)
 80005b6:	6013      	str	r3, [r2, #0]

    stAppSerialMsg.ucSrc = SRC_APPSERIAL;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <TaskAppSerial_Entry+0x54>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	701a      	strb	r2, [r3, #0]
    stAppSerialMsg.ucDest = SRC_APPSERIAL;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <TaskAppSerial_Entry+0x54>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	705a      	strb	r2, [r3, #1]
    stAppSerialMsg.ucEvent = EVENT_APPSERIAL_INIT;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <TaskAppSerial_Entry+0x54>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
 80005ca:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <TaskAppSerial_Entry+0x48>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2200      	movs	r2, #0
 80005d2:	4906      	ldr	r1, [pc, #24]	@ (80005ec <TaskAppSerial_Entry+0x54>)
 80005d4:	f003 fe5e 	bl	8004294 <xQueueGenericSend>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000180 	.word	0x20000180
 80005e4:	20000184 	.word	0x20000184
 80005e8:	20000190 	.word	0x20000190
 80005ec:	20000188 	.word	0x20000188

080005f0 <TaskAppSerial_Start>:
//              TaskAppSerial_Start
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_Start(sMessageType *psMessage)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]

	return boError;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <TaskAppSerial_ReceiveEvent>:
//              TaskAppSerial_ReceiveEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_ReceiveEvent(sMessageType *psMessage)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]

	return boError;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <TaskAppSerial_TransmitEvent>:
//              TaskAppSerial_TransmitEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_TransmitEvent(sMessageType *psMessage)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]

	memset((char*)&stFrameTxUSART[u8FifoTxUSART],0x00,sizeof(tstFrameUSART));
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	01db      	lsls	r3, r3, #7
 8000632:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <TaskAppSerial_TransmitEvent+0x94>)
 8000634:	4413      	add	r3, r2
 8000636:	2280      	movs	r2, #128	@ 0x80
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fd62 	bl	8006104 <memset>
	memcpy((char*)&stFrameTxUSART[u8FifoTxUSART],psMessage->pcMessageData,strlen(psMessage->pcMessageData));
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	01db      	lsls	r3, r3, #7
 8000646:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <TaskAppSerial_TransmitEvent+0x94>)
 8000648:	189c      	adds	r4, r3, r2
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685d      	ldr	r5, [r3, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fd7c 	bl	8000150 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4629      	mov	r1, r5
 800065e:	4620      	mov	r0, r4
 8000660:	f005 fdda 	bl	8006218 <memcpy>
	(void)HAL_UART_Transmit(hUSART,(uint8_t*)&stFrameTxUSART[u8FifoTxUSART], strlen(psMessage->pcMessageData),5);
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <TaskAppSerial_TransmitEvent+0x98>)
 8000666:	681c      	ldr	r4, [r3, #0]
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	01db      	lsls	r3, r3, #7
 800066e:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <TaskAppSerial_TransmitEvent+0x94>)
 8000670:	189d      	adds	r5, r3, r2
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fd6a 	bl	8000150 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	2305      	movs	r3, #5
 8000682:	4629      	mov	r1, r5
 8000684:	4620      	mov	r0, r4
 8000686:	f002 fcf5 	bl	8003074 <HAL_UART_Transmit>
	if(++u8FifoTxUSART >= 2)
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d902      	bls.n	80006a4 <TaskAppSerial_TransmitEvent+0x84>
	{
		u8FifoTxUSART = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <TaskAppSerial_TransmitEvent+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	}

	return boError;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000294 	.word	0x20000294
 80006b4:	20000194 	.word	0x20000194
 80006b8:	20000190 	.word	0x20000190

080006bc <TaskAppSerial_IgnoreEvent>:
//              TaskAppSerial_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskAppSerial_IgnoreEvent(sMessageType *psMessage)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

    return(boError);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <vTaskAppSerial>:
	gasTaskAppSerial_Initializing,
	gasTaskAppSerial_Running
};

void vTaskAppSerial(void const * argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if( xQueueReceive(xQueueAppSerial, &stAppSerialMsg, 0 ) )
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <vTaskAppSerial+0x3c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	490c      	ldr	r1, [pc, #48]	@ (8000714 <vTaskAppSerial+0x40>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 ff75 	bl	80045d4 <xQueueReceive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00a      	beq.n	8000706 <vTaskAppSerial+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_APPSERIAL,gpasTaskAppSerial_StateMachine[ucCurrentStateAppSerial], &ucCurrentStateAppSerial, &stAppSerialMsg);
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <vTaskAppSerial+0x44>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <vTaskAppSerial+0x48>)
 80006f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <vTaskAppSerial+0x40>)
 80006fe:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <vTaskAppSerial+0x44>)
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fc82 	bl	800100a <eEventHandler>
		stAppSerialMsg.ucEvent = EVENT_APPSERIAL_TX;
		stAppSerialMsg.pcMessageData = NULL;
		xQueueGenericSend(xQueueAppSerial, ( void * )&stAppSerialMsg, 0,0);
		u16TimeSlice = 0;
	}*/
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000180 	.word	0x20000180
 8000714:	20000188 	.word	0x20000188
 8000718:	2000017e 	.word	0x2000017e
 800071c:	08006c80 	.word	0x08006c80

08000720 <TaskIO_Entry>:
//              TaskIO_Entry
//
//
//////////////////////////////////////////////
void TaskIO_Entry(QueueHandle_t *xQueue,TimerHandle_t xTimer)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
    xQueueIO = xQueue;
 800072a:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <TaskIO_Entry+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6013      	str	r3, [r2, #0]
    xTimerIO = xTimer;
 8000730:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <TaskIO_Entry+0x44>)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	6013      	str	r3, [r2, #0]

    stIOMsg.ucSrc = SRC_IO;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <TaskIO_Entry+0x48>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <TaskIO_Entry+0x48>)
 800073e:	2200      	movs	r2, #0
 8000740:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_INIT;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <TaskIO_Entry+0x48>)
 8000744:	2201      	movs	r2, #1
 8000746:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <TaskIO_Entry+0x40>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	2200      	movs	r2, #0
 8000750:	4905      	ldr	r1, [pc, #20]	@ (8000768 <TaskIO_Entry+0x48>)
 8000752:	f003 fd9f 	bl	8004294 <xQueueGenericSend>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200002a4 	.word	0x200002a4
 8000764:	200002a8 	.word	0x200002a8
 8000768:	20000298 	.word	0x20000298

0800076c <TaskIO_Start>:
//              TaskIO_Start
//
//
//////////////////////////////////////////////
unsigned char TaskIO_Start(sMessageType *psMessage)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]

    pstQueueAppCAN  = TaskAppCAN_getQueue();
 8000778:	f7ff fd18 	bl	80001ac <TaskAppCAN_getQueue>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <TaskIO_Start+0x80>)
 8000782:	601a      	str	r2, [r3, #0]

    stIOMsg.ucSrc = SRC_IO;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <TaskIO_Start+0x84>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
    stIOMsg.ucDest = SRC_IO;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <TaskIO_Start+0x84>)
 800078c:	2200      	movs	r2, #0
 800078e:	705a      	strb	r2, [r3, #1]
    stIOMsg.ucEvent = EVENT_IO_LED_NULL;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <TaskIO_Start+0x84>)
 8000792:	2200      	movs	r2, #0
 8000794:	709a      	strb	r2, [r3, #2]
    xQueueGenericSend(xQueueIO, ( void * )&stIOMsg, 0,0);
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <TaskIO_Start+0x88>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	4914      	ldr	r1, [pc, #80]	@ (80007f0 <TaskIO_Start+0x84>)
 80007a0:	f003 fd78 	bl	8004294 <xQueueGenericSend>

    ulCountPulse = 0;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <TaskIO_Start+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOn = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <TaskIO_Start+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
    ulCountTimePulseOff = 0;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <TaskIO_Start+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
    ulCountPeriod = 0;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <TaskIO_Start+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]

	ulQtyPulse = 5;	/* 5 pulses*/
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <TaskIO_Start+0x9c>)
 80007be:	2205      	movs	r2, #5
 80007c0:	601a      	str	r2, [r3, #0]
	ulTimePulseOn = 2; 	/* 2*50 = 100ms*/
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <TaskIO_Start+0xa0>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
	ulTimePulseOff = 2; 	/* 2*50 = 100ms*/
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <TaskIO_Start+0xa4>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
	ulPeriod = 40; 		/* 20*50 = 1s*/
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <TaskIO_Start+0xa8>)
 80007d0:	2228      	movs	r2, #40	@ 0x28
 80007d2:	601a      	str	r2, [r3, #0]

    (void)osTimerStart(xTimerIO,50);
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <TaskIO_Start+0xac>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2132      	movs	r1, #50	@ 0x32
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fee2 	bl	80035a4 <osTimerStart>
	return boError;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002cc 	.word	0x200002cc
 80007f0:	20000298 	.word	0x20000298
 80007f4:	200002a4 	.word	0x200002a4
 80007f8:	200002ac 	.word	0x200002ac
 80007fc:	200002b0 	.word	0x200002b0
 8000800:	200002b4 	.word	0x200002b4
 8000804:	200002b8 	.word	0x200002b8
 8000808:	200002bc 	.word	0x200002bc
 800080c:	200002c0 	.word	0x200002c0
 8000810:	200002c4 	.word	0x200002c4
 8000814:	200002c8 	.word	0x200002c8
 8000818:	200002a8 	.word	0x200002a8

0800081c <TaskIO_getQueue>:
//              TaskIO_getQueue
//
//
//////////////////////////////////////////////
QueueHandle_t *TaskIO_getQueue()
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	return &xQueueIO;
 8000820:	4b02      	ldr	r3, [pc, #8]	@ (800082c <TaskIO_getQueue+0x10>)
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200002a4 	.word	0x200002a4

08000830 <TaskIO_PSEvent>:
//              TaskIO_PSEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_PSEvent(sMessageType *psMessage)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 8000838:	2301      	movs	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStop(xTimerIO);
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <TaskIO_PSEvent+0x54>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fef3 	bl	800362c <osTimerStop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <TaskIO_PSEvent+0x58>)
 800084e:	f001 ff7d 	bl	800274c <HAL_GPIO_WritePin>

	stIOMsg.ucSrc = SRC_IO;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <TaskIO_PSEvent+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
	stIOMsg.ucDest = SRC_APPCAN;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <TaskIO_PSEvent+0x5c>)
 800085a:	2201      	movs	r2, #1
 800085c:	705a      	strb	r2, [r3, #1]
	stIOMsg.ucEvent = EVENT_APPCAN_SLEEP;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <TaskIO_PSEvent+0x5c>)
 8000860:	2205      	movs	r2, #5
 8000862:	709a      	strb	r2, [r3, #2]
	stIOMsg.pcMessageData = NULL;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <TaskIO_PSEvent+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
    xQueueGenericSend(*pstQueueAppCAN, &stIOMsg, 0,0);
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <TaskIO_PSEvent+0x60>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	2300      	movs	r3, #0
 8000872:	2200      	movs	r2, #0
 8000874:	4905      	ldr	r1, [pc, #20]	@ (800088c <TaskIO_PSEvent+0x5c>)
 8000876:	f003 fd0d 	bl	8004294 <xQueueGenericSend>

    return(boError);
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200002a8 	.word	0x200002a8
 8000888:	40011000 	.word	0x40011000
 800088c:	20000298 	.word	0x20000298
 8000890:	200002cc 	.word	0x200002cc

08000894 <TaskIO_WakeupEvent>:
//              TaskIO_WakeupEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_WakeupEvent(sMessageType *psMessage)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    unsigned char boError = true;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]

    (void)osTimerStart(xTimerIO,50);
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <TaskIO_WakeupEvent+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2132      	movs	r1, #50	@ 0x32
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fe7c 	bl	80035a4 <osTimerStart>

    return(boError);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002a8 	.word	0x200002a8

080008bc <TaskIO_IgnoreEvent>:
//              TaskIO_IgnoreEvent
//
//
//////////////////////////////////////////////
unsigned char TaskIO_IgnoreEvent(sMessageType *psMessage)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    unsigned char boError = false;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

    return(boError);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <vLocalTimerCallbackIo>:
//              vTimerCallbackIo
//
//
//////////////////////////////////////////////
void vLocalTimerCallbackIo(void const * argument)
 {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	ulCountPeriod++;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <vLocalTimerCallbackIo+0xc4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000998 <vLocalTimerCallbackIo+0xc4>)
 80008e4:	6013      	str	r3, [r2, #0]
    if(ulCountPeriod <= ulPeriod)
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <vLocalTimerCallbackIo+0xc4>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <vLocalTimerCallbackIo+0xc8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d83c      	bhi.n	800096c <vLocalTimerCallbackIo+0x98>
    {
    	if(ulCountPulse <= ((ulQtyPulse) * (ulTimePulseOn+ulTimePulseOff)))
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <vLocalTimerCallbackIo+0xcc>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <vLocalTimerCallbackIo+0xd0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a2a      	ldr	r2, [pc, #168]	@ (80009a8 <vLocalTimerCallbackIo+0xd4>)
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	fb03 f202 	mul.w	r2, r3, r2
 8000904:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <vLocalTimerCallbackIo+0xd8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d341      	bcc.n	8000990 <vLocalTimerCallbackIo+0xbc>
    	{
			if(ulCountTimePulseOn < ulTimePulseOn)
 800090c:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <vLocalTimerCallbackIo+0xdc>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <vLocalTimerCallbackIo+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d20b      	bcs.n	8000930 <vLocalTimerCallbackIo+0x5c>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091e:	4825      	ldr	r0, [pc, #148]	@ (80009b4 <vLocalTimerCallbackIo+0xe0>)
 8000920:	f001 ff14 	bl	800274c <HAL_GPIO_WritePin>
				ulCountTimePulseOn++;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <vLocalTimerCallbackIo+0xdc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <vLocalTimerCallbackIo+0xdc>)
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	e017      	b.n	8000960 <vLocalTimerCallbackIo+0x8c>
			}
			else
			{
				if(ulCountTimePulseOff < ulTimePulseOff )
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <vLocalTimerCallbackIo+0xe4>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <vLocalTimerCallbackIo+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d20b      	bcs.n	8000954 <vLocalTimerCallbackIo+0x80>
				{
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000942:	481c      	ldr	r0, [pc, #112]	@ (80009b4 <vLocalTimerCallbackIo+0xe0>)
 8000944:	f001 ff02 	bl	800274c <HAL_GPIO_WritePin>
					ulCountTimePulseOff++;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <vLocalTimerCallbackIo+0xe4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a1a      	ldr	r2, [pc, #104]	@ (80009b8 <vLocalTimerCallbackIo+0xe4>)
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e005      	b.n	8000960 <vLocalTimerCallbackIo+0x8c>
				}
				else
				{
					ulCountTimePulseOn = 0;
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <vLocalTimerCallbackIo+0xdc>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
					ulCountTimePulseOff= 0;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <vLocalTimerCallbackIo+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
				}
			}
			ulCountPulse++;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <vLocalTimerCallbackIo+0xd8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <vLocalTimerCallbackIo+0xd8>)
 8000968:	6013      	str	r3, [r2, #0]
      lastStateChangeTime = currentTime;
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, ledState);
#endif
 }
 800096a:	e011      	b.n	8000990 <vLocalTimerCallbackIo+0xbc>
        ulCountPulse = 0;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <vLocalTimerCallbackIo+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOn = 0;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <vLocalTimerCallbackIo+0xdc>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
        ulCountTimePulseOff = 0;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <vLocalTimerCallbackIo+0xe4>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
        ulCountPeriod = 0;
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <vLocalTimerCallbackIo+0xc4>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098a:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <vLocalTimerCallbackIo+0xe0>)
 800098c:	f001 fede 	bl	800274c <HAL_GPIO_WritePin>
 }
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200002b8 	.word	0x200002b8
 800099c:	200002c8 	.word	0x200002c8
 80009a0:	200002c0 	.word	0x200002c0
 80009a4:	200002c4 	.word	0x200002c4
 80009a8:	200002bc 	.word	0x200002bc
 80009ac:	200002ac 	.word	0x200002ac
 80009b0:	200002b0 	.word	0x200002b0
 80009b4:	40011000 	.word	0x40011000
 80009b8:	200002b4 	.word	0x200002b4

080009bc <vTaskIO>:
	gasTaskIO_Running,
	gasTaskIO_Sleeping
};

void vTaskIO(void const * argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	if( xQueueReceive( xQueueIO, &stIOMsg, 0 ) )
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <vTaskIO+0x3c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2200      	movs	r2, #0
 80009ca:	490c      	ldr	r1, [pc, #48]	@ (80009fc <vTaskIO+0x40>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fe01 	bl	80045d4 <xQueueReceive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00a      	beq.n	80009ee <vTaskIO+0x32>
	{
		(void)eEventHandler ((unsigned char)SRC_IO,gpasTaskIO_StateMachine[ucCurrentStateIO], &ucCurrentStateIO, &stIOMsg);
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <vTaskIO+0x44>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <vTaskIO+0x48>)
 80009e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <vTaskIO+0x40>)
 80009e6:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <vTaskIO+0x44>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fb0e 	bl	800100a <eEventHandler>
	}
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002a4 	.word	0x200002a4
 80009fc:	20000298 	.word	0x20000298
 8000a00:	200002a0 	.word	0x200002a0
 8000a04:	08006cd0 	.word	0x08006cd0

08000a08 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <MX_CAN_Init+0x6c>)
 8000a10:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a20:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000a24:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a2c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a30:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8000a34:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_CAN_Init+0x68>)
 8000a5c:	f000 fccc 	bl	80013f8 <HAL_CAN_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a66:	f000 faae 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200002d0 	.word	0x200002d0
 8000a74:	40006400 	.word	0x40006400

08000a78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a28      	ldr	r2, [pc, #160]	@ (8000b34 <HAL_CAN_MspInit+0xbc>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d148      	bne.n	8000b2a <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa2:	61d3      	str	r3, [r2, #28]
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_CAN_MspInit+0xc0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4817      	ldr	r0, [pc, #92]	@ (8000b3c <HAL_CAN_MspInit+0xc4>)
 8000ade:	f001 fc05 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <HAL_CAN_MspInit+0xc4>)
 8000af8:	f001 fbf8 	bl	80022ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000afc:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <HAL_CAN_MspInit+0xc8>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b04:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b1a:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <HAL_CAN_MspInit+0xc8>)
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2105      	movs	r1, #5
 8000b24:	2014      	movs	r0, #20
 8000b26:	f001 fb9c 	bl	8002262 <HAL_NVIC_SetPriority>
    /*HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);  */
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	@ 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40006400 	.word	0x40006400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	40010000 	.word	0x40010000

08000b44 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_CAN_MspDeInit+0x30>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10a      	bne.n	8000b6c <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_CAN_MspDeInit+0x34>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_CAN_MspDeInit+0x34>)
 8000b5c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000b60:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8000b62:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_CAN_MspDeInit+0x38>)
 8000b68:	f001 fd3c 	bl	80025e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40006400 	.word	0x40006400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <hGet_CAN_Handler>:

/* USER CODE BEGIN 1 */
CAN_HandleTypeDef *hGet_CAN_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	return &hcan;
 8000b84:	4b02      	ldr	r3, [pc, #8]	@ (8000b90 <hGet_CAN_Handler+0x10>)
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200002d0 	.word	0x200002d0

08000b94 <stHAL_CAN_FilterConfig>:

HAL_StatusTypeDef stHAL_CAN_FilterConfig(void)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig0 =
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <stHAL_CAN_FilterConfig+0x30>)
 8000b9c:	463c      	mov	r4, r7
 8000b9e:	461d      	mov	r5, r3
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bac:	e884 0003 	stmia.w	r4, {r0, r1}
			.FilterMode =  /*CAN_FILTERMODE_IDLIST*/CAN_FILTERMODE_IDMASK,
			.FilterScale = CAN_FILTERSCALE_32BIT,
			.SlaveStartFilterBank  = 14
	};

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig0);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <stHAL_CAN_FilterConfig+0x34>)
 8000bb6:	f000 fd65 	bl	8001684 <HAL_CAN_ConfigFilter>

	return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3728      	adds	r7, #40	@ 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc4:	08006afc 	.word	0x08006afc
 8000bc8:	200002d0 	.word	0x200002d0

08000bcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <vApplicationGetIdleTaskMemory+0x28>)
 8000bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000350 	.word	0x20000350
 8000bf8:	200003f0 	.word	0x200003f0

08000bfc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <vApplicationGetTimerTaskMemory+0x30>)
 8000c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c1a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200005f0 	.word	0x200005f0
 8000c2c:	20000690 	.word	0x20000690

08000c30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b0a4      	sub	sp, #144	@ 0x90
 8000c34:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of TimerIO */
  osTimerDef(TimerIO, vTimerCallbackIo);
 8000c36:	4b3c      	ldr	r3, [pc, #240]	@ (8000d28 <MX_FREERTOS_Init+0xf8>)
 8000c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  TimerIOHandle = osTimerCreate(osTimer(TimerIO), osTimerPeriodic, NULL);
 8000c42:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000c46:	2200      	movs	r2, #0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fc76 	bl	800353c <osTimerCreate>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a36      	ldr	r2, [pc, #216]	@ (8000d2c <MX_FREERTOS_Init+0xfc>)
 8000c54:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of QueueIO */
  osMessageQDef(QueueIO, 8, sMessageType);
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <MX_FREERTOS_Init+0x100>)
 8000c58:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueIOHandle = osMessageCreate(osMessageQ(QueueIO), NULL);
 8000c62:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fd1b 	bl	80036a4 <osMessageCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a30      	ldr	r2, [pc, #192]	@ (8000d34 <MX_FREERTOS_Init+0x104>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppCAN */
  osMessageQDef(QueueAppCAN, 16, sMessageType);
 8000c74:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <MX_FREERTOS_Init+0x108>)
 8000c76:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppCANHandle = osMessageCreate(osMessageQ(QueueAppCAN), NULL);
 8000c80:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fd0c 	bl	80036a4 <osMessageCreate>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d3c <MX_FREERTOS_Init+0x10c>)
 8000c90:	6013      	str	r3, [r2, #0]

  /* definition and creation of QueueAppSerial */
  osMessageQDef(QueueAppSerial, 16, sMessageType);
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <MX_FREERTOS_Init+0x108>)
 8000c94:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueAppSerialHandle = osMessageCreate(osMessageQ(QueueAppSerial), NULL);
 8000c9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fcfd 	bl	80036a4 <osMessageCreate>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <MX_FREERTOS_Init+0x110>)
 8000cae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskIO */
  osThreadDef(TaskIO, TaskIO_Init, osPriorityIdle, 0, 128);
 8000cb0:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_FREERTOS_Init+0x114>)
 8000cb2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskIOHandle = osThreadCreate(osThread(TaskIO), NULL);
 8000cc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fbd5 	bl	800347a <osThreadCreate>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d48 <MX_FREERTOS_Init+0x118>)
 8000cd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppCAN */
  osThreadDef(TaskAppCAN, TaskAppCAN_Init, osPriorityIdle, 0, 128);
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_FREERTOS_Init+0x11c>)
 8000cd8:	f107 0420 	add.w	r4, r7, #32
 8000cdc:	461d      	mov	r5, r3
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppCANHandle = osThreadCreate(osThread(TaskAppCAN), NULL);
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fbc2 	bl	800347a <osThreadCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_FREERTOS_Init+0x120>)
 8000cfa:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskAppSerial */
  osThreadDef(TaskAppSerial, TaskAppSerial_Init, osPriorityIdle, 0, 128);
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_FREERTOS_Init+0x124>)
 8000cfe:	1d3c      	adds	r4, r7, #4
 8000d00:	461d      	mov	r5, r3
 8000d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAppSerialHandle = osThreadCreate(osThread(TaskAppSerial), NULL);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fbb1 	bl	800347a <osThreadCreate>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <MX_FREERTOS_Init+0x128>)
 8000d1c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d1e:	bf00      	nop
 8000d20:	3790      	adds	r7, #144	@ 0x90
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08000ddd 	.word	0x08000ddd
 8000d2c:	2000034c 	.word	0x2000034c
 8000d30:	08006b24 	.word	0x08006b24
 8000d34:	20000340 	.word	0x20000340
 8000d38:	08006b34 	.word	0x08006b34
 8000d3c:	20000344 	.word	0x20000344
 8000d40:	20000348 	.word	0x20000348
 8000d44:	08006b4c 	.word	0x08006b4c
 8000d48:	20000334 	.word	0x20000334
 8000d4c:	08006b74 	.word	0x08006b74
 8000d50:	20000338 	.word	0x20000338
 8000d54:	08006ba0 	.word	0x08006ba0
 8000d58:	2000033c 	.word	0x2000033c

08000d5c <TaskIO_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskIO_Init */
void TaskIO_Init(void const * argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskIO_Init */
  /* Infinite loop */
  TaskIO_Entry(QueueIOHandle,TimerIOHandle);
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <TaskIO_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <TaskIO_Init+0x2c>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcd6 	bl	8000720 <TaskIO_Entry>
  for(;;)
  {
    osDelay(50);
 8000d74:	2032      	movs	r0, #50	@ 0x32
 8000d76:	f002 fbcc 	bl	8003512 <osDelay>
    vTaskIO(argument);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fe1e 	bl	80009bc <vTaskIO>
    osDelay(50);
 8000d80:	bf00      	nop
 8000d82:	e7f7      	b.n	8000d74 <TaskIO_Init+0x18>
 8000d84:	20000340 	.word	0x20000340
 8000d88:	2000034c 	.word	0x2000034c

08000d8c <TaskAppCAN_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppCAN_Init */
void TaskAppCAN_Init(void const * argument)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppCAN_Init */
  /* Infinite loop */
  TaskAppCAN_Entry(QueueAppCANHandle,NULL);
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <TaskAppCAN_Init+0x24>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa10 	bl	80001c0 <TaskAppCAN_Entry>
  for(;;)
  {
    osDelay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f002 fbb6 	bl	8003512 <osDelay>
    vTaskAppCAN(argument);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fb2a 	bl	8000400 <vTaskAppCAN>
    osDelay(1);
 8000dac:	bf00      	nop
 8000dae:	e7f7      	b.n	8000da0 <TaskAppCAN_Init+0x14>
 8000db0:	20000344 	.word	0x20000344

08000db4 <TaskAppSerial_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskAppSerial_Init */
void TaskAppSerial_Init(void const * argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskAppSerial_Init */
  /* Infinite loop */
  TaskAppSerial_Entry(QueueAppSerialHandle,NULL);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <TaskAppSerial_Init+0x24>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fbe8 	bl	8000598 <TaskAppSerial_Entry>
  for(;;)
  {
    osDelay(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f002 fba2 	bl	8003512 <osDelay>
    vTaskAppSerial(argument);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fc80 	bl	80006d4 <vTaskAppSerial>
    osDelay(1);
 8000dd4:	bf00      	nop
 8000dd6:	e7f7      	b.n	8000dc8 <TaskAppSerial_Init+0x14>
 8000dd8:	20000348 	.word	0x20000348

08000ddc <vTimerCallbackIo>:
  /* USER CODE END TaskAppSerial_Init */
}

/* vTimerCallbackIo function */
void vTimerCallbackIo(void const * argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTimerCallbackIo */
	vLocalTimerCallbackIo(argument);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fd75 	bl	80008d4 <vLocalTimerCallbackIo>
  /* USER CODE END vTimerCallbackIo */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b3c      	ldr	r3, [pc, #240]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a38      	ldr	r2, [pc, #224]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a32      	ldr	r2, [pc, #200]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b30      	ldr	r3, [pc, #192]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a2c      	ldr	r2, [pc, #176]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <MX_GPIO_Init+0x114>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6e:	4827      	ldr	r0, [pc, #156]	@ (8000f0c <MX_GPIO_Init+0x118>)
 8000e70:	f001 fc6c 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7a:	4825      	ldr	r0, [pc, #148]	@ (8000f10 <MX_GPIO_Init+0x11c>)
 8000e7c:	f001 fc66 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	4619      	mov	r1, r3
 8000e98:	481c      	ldr	r0, [pc, #112]	@ (8000f0c <MX_GPIO_Init+0x118>)
 8000e9a:	f001 fa27 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e9e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x118>)
 8000eb0:	f001 fa1c 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb4:	f649 13ff 	movw	r3, #39423	@ 0x99ff
 8000eb8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4813      	ldr	r0, [pc, #76]	@ (8000f14 <MX_GPIO_Init+0x120>)
 8000ec6:	f001 fa11 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000eca:	f64e 43ff 	movw	r3, #60671	@ 0xecff
 8000ece:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_GPIO_Init+0x11c>)
 8000edc:	f001 fa06 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_GPIO_Init+0x11c>)
 8000efa:	f001 f9f7 	bl	80022ec <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40010800 	.word	0x40010800

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 f9ee 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f80c 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff ff66 	bl	8000df4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f28:	f7ff fd6e 	bl	8000a08 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000f2c:	f000 f940 	bl	80011b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f30:	f7ff fe7e 	bl	8000c30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f34:	f002 fa9a 	bl	800346c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <main+0x20>

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	@ 0x40
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2228      	movs	r2, #40	@ 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 f8da 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f7a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fc15 	bl	80027b4 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f90:	f000 f819 	bl	8000fc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fe82 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fba:	f000 f804 	bl	8000fc6 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3740      	adds	r7, #64	@ 0x40
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fca:	b672      	cpsid	i
}
 8000fcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <Error_Handler+0x8>

08000fd2 <psSearchEvent>:

#include "state.h"


const sStateMachineType *psSearchEvent (const sStateMachineType *psStateTable,unsigned char ucIncoming)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
    unsigned char ucEvent;

    for (;; psStateTable++)
    {
        ucEvent = psStateTable->ucEvent;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	73fb      	strb	r3, [r7, #15]
        if ((ucEvent != 0)&&(ucEvent != ucIncoming))
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <psSearchEvent+0x20>
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d101      	bne.n	8000ff6 <psSearchEvent+0x24>
        {
           continue;
        }
        return psStateTable;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	e004      	b.n	8001000 <psSearchEvent+0x2e>
           continue;
 8000ff6:	bf00      	nop
    for (;; psStateTable++)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	607b      	str	r3, [r7, #4]
        ucEvent = psStateTable->ucEvent;
 8000ffe:	e7ee      	b.n	8000fde <psSearchEvent+0xc>
    }

}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <eEventHandler>:

void eEventHandler (unsigned char ucDest,const sStateMachineType *psStateTable, unsigned char *piState, sMessageType *psMessage)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
    unsigned char eError = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	75fb      	strb	r3, [r7, #23]

    if(ucDest == psMessage->ucDest)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	429a      	cmp	r2, r3
 8001026:	d118      	bne.n	800105a <eEventHandler+0x50>
    {
        psStateTable = psSearchEvent(psStateTable, psMessage->ucEvent);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	4619      	mov	r1, r3
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff ffcf 	bl	8000fd2 <psSearchEvent>
 8001034:	60b8      	str	r0, [r7, #8]

        eError = (*psStateTable->ActionFun)(psMessage);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	4798      	blx	r3
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]

        if (eError == 1)
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d104      	bne.n	8001052 <eEventHandler+0x48>
        {
            *piState = psStateTable->ucStateSuccess;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	7a1a      	ldrb	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	701a      	strb	r2, [r3, #0]
        else
        {
            *piState = psStateTable->ucStateFailure;
        }
    }
}
 8001050:	e003      	b.n	800105a <eEventHandler+0x50>
            *piState = psStateTable->ucStateFailure;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	7a5a      	ldrb	r2, [r3, #9]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	701a      	strb	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106a:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_MspInit+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <HAL_MspInit+0x68>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6193      	str	r3, [r2, #24]
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_MspInit+0x68>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_MspInit+0x68>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a11      	ldr	r2, [pc, #68]	@ (80010cc <HAL_MspInit+0x68>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_MspInit+0x68>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	210f      	movs	r1, #15
 800109e:	f06f 0001 	mvn.w	r0, #1
 80010a2:	f001 f8de 	bl	8002262 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_MspInit+0x6c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_MspInit+0x6c>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <NMI_Handler+0x4>

080010dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <MemManage_Handler+0x4>

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <BusFault_Handler+0x4>

080010f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <UsageFault_Handler+0x4>

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f93c 	bl	8001388 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001110:	f004 faf2 	bl	80056f8 <xTaskGetSchedulerState>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d001      	beq.n	800111e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800111a:	f002 fef5 	bl	8003f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
#if 1
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800112a:	f000 fd6e 	bl	8001c0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002d0 	.word	0x200002d0

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f005 f82a 	bl	80061c0 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20002800 	.word	0x20002800
 8001198:	00000400 	.word	0x00000400
 800119c:	20000a90 	.word	0x20000a90
 80011a0:	20001ab8 	.word	0x20001ab8

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011b6:	4a11      	ldr	r2, [pc, #68]	@ (80011fc <MX_USART1_UART_Init+0x4c>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011bc:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <MX_USART1_UART_Init+0x50>)
 80011be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011d4:	220c      	movs	r2, #12
 80011d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_USART1_UART_Init+0x48>)
 80011e6:	f001 fef5 	bl	8002fd4 <HAL_UART_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80011f0:	f7ff fee9 	bl	8000fc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000a94 	.word	0x20000a94
 80011fc:	40013800 	.word	0x40013800
 8001200:	001e8480 	.word	0x001e8480

08001204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <HAL_UART_MspInit+0x8c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d131      	bne.n	8001288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_UART_MspInit+0x90>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_UART_MspInit+0x90>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_UART_MspInit+0x90>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_UART_MspInit+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <HAL_UART_MspInit+0x90>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_UART_MspInit+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <HAL_UART_MspInit+0x94>)
 800126a:	f001 f83f 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_UART_MspInit+0x94>)
 8001284:	f001 f832 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40013800 	.word	0x40013800
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800

0800129c <hGet_USART_Handler>:
  }
}

/* USER CODE BEGIN 1 */
UART_HandleTypeDef *hGet_USART_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	return &huart1;
 80012a0:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <hGet_USART_Handler+0x10>)
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000a94 	.word	0x20000a94

080012b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff ff78 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012b6:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012b8:	4a0c      	ldr	r2, [pc, #48]	@ (80012ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012cc:	4c09      	ldr	r4, [pc, #36]	@ (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f004 ff77 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7ff fe1b 	bl	8000f18 <main>
  bx lr
 80012e2:	4770      	bx	lr
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012ec:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 80012f0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012f4:	20001ab8 	.word	0x20001ab8

080012f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_2_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_Init+0x28>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_Init+0x28>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 ff9d 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	200f      	movs	r0, #15
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fea4 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 ffc3 	bl	80022d2 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001364:	f000 ff7d 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_IncTick+0x1c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_IncTick+0x20>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a03      	ldr	r2, [pc, #12]	@ (80013a8 <HAL_IncTick+0x20>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000adc 	.word	0x20000adc

080013ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <HAL_GetTick+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000adc 	.word	0x20000adc

080013c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <HAL_SuspendTick+0x18>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <HAL_SuspendTick+0x18>)
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <HAL_ResumeTick+0x18>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a03      	ldr	r2, [pc, #12]	@ (80013f4 <HAL_ResumeTick+0x18>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e11c      	b.n	8001644 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d131      	bne.n	800147a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a8c      	ldr	r2, [pc, #560]	@ (800164c <HAL_CAN_Init+0x254>)
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a8c      	ldr	r2, [pc, #560]	@ (8001650 <HAL_CAN_Init+0x258>)
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a8b      	ldr	r2, [pc, #556]	@ (8001654 <HAL_CAN_Init+0x25c>)
 8001426:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a8b      	ldr	r2, [pc, #556]	@ (8001658 <HAL_CAN_Init+0x260>)
 800142c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a8a      	ldr	r2, [pc, #552]	@ (800165c <HAL_CAN_Init+0x264>)
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a8a      	ldr	r2, [pc, #552]	@ (8001660 <HAL_CAN_Init+0x268>)
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a89      	ldr	r2, [pc, #548]	@ (8001664 <HAL_CAN_Init+0x26c>)
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a89      	ldr	r2, [pc, #548]	@ (8001668 <HAL_CAN_Init+0x270>)
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a88      	ldr	r2, [pc, #544]	@ (800166c <HAL_CAN_Init+0x274>)
 800144a:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a88      	ldr	r2, [pc, #544]	@ (8001670 <HAL_CAN_Init+0x278>)
 8001450:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a87      	ldr	r2, [pc, #540]	@ (8001674 <HAL_CAN_Init+0x27c>)
 8001456:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a87      	ldr	r2, [pc, #540]	@ (8001678 <HAL_CAN_Init+0x280>)
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a86      	ldr	r2, [pc, #536]	@ (800167c <HAL_CAN_Init+0x284>)
 8001462:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a84      	ldr	r2, [pc, #528]	@ (8001680 <HAL_CAN_Init+0x288>)
 8001470:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148a:	f7ff ff8f 	bl	80013ac <HAL_GetTick>
 800148e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001490:	e012      	b.n	80014b8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001492:	f7ff ff8b 	bl	80013ac <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b0a      	cmp	r3, #10
 800149e:	d90b      	bls.n	80014b8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0c5      	b.n	8001644 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0e5      	beq.n	8001492 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0202 	bic.w	r2, r2, #2
 80014d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d6:	f7ff ff69 	bl	80013ac <HAL_GetTick>
 80014da:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014dc:	e012      	b.n	8001504 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014de:	f7ff ff65 	bl	80013ac <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	d90b      	bls.n	8001504 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2205      	movs	r2, #5
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e09f      	b.n	8001644 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e5      	bne.n	80014de <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7e1b      	ldrb	r3, [r3, #24]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d108      	bne.n	800152c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e007      	b.n	800153c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800153a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e5b      	ldrb	r3, [r3, #25]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e9b      	ldrb	r3, [r3, #26]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0220 	orr.w	r2, r2, #32
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0220 	bic.w	r2, r2, #32
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7edb      	ldrb	r3, [r3, #27]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0210 	bic.w	r2, r2, #16
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0210 	orr.w	r2, r2, #16
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7f1b      	ldrb	r3, [r3, #28]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0208 	orr.w	r2, r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0208 	bic.w	r2, r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7f5b      	ldrb	r3, [r3, #29]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0204 	orr.w	r2, r2, #4
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0204 	bic.w	r2, r2, #4
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	ea42 0103 	orr.w	r1, r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	1e5a      	subs	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	08000161 	.word	0x08000161
 8001650:	08002001 	.word	0x08002001
 8001654:	08002013 	.word	0x08002013
 8001658:	08002025 	.word	0x08002025
 800165c:	08001f95 	.word	0x08001f95
 8001660:	08001fa7 	.word	0x08001fa7
 8001664:	08001fb9 	.word	0x08001fb9
 8001668:	08001fcb 	.word	0x08001fcb
 800166c:	08001fdd 	.word	0x08001fdd
 8001670:	08001fef 	.word	0x08001fef
 8001674:	08002037 	.word	0x08002037
 8001678:	08002049 	.word	0x08002049
 800167c:	0800205b 	.word	0x0800205b
 8001680:	08000a79 	.word	0x08000a79

08001684 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800169c:	7cfb      	ldrb	r3, [r7, #19]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <HAL_CAN_ConfigFilter+0x26>
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 80aa 	bne.w	80017fe <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2201      	movs	r2, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d123      	bne.n	800172c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001706:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3248      	adds	r2, #72	@ 0x48
 800170c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001720:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001722:	6979      	ldr	r1, [r7, #20]
 8001724:	3348      	adds	r3, #72	@ 0x48
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d122      	bne.n	800177a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001754:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3248      	adds	r2, #72	@ 0x48
 800175a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800176e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001770:	6979      	ldr	r1, [r7, #20]
 8001772:	3348      	adds	r3, #72	@ 0x48
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	401a      	ands	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001794:	e007      	b.n	80017a6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	431a      	orrs	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	401a      	ands	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017c0:	e007      	b.n	80017d2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f0:	f023 0201 	bic.w	r2, r3, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e006      	b.n	800180c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d12e      	bne.n	8001888 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001842:	f7ff fdb3 	bl	80013ac <HAL_GetTick>
 8001846:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001848:	e012      	b.n	8001870 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184a:	f7ff fdaf 	bl	80013ac <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d90b      	bls.n	8001870 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e012      	b.n	8001896 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e5      	bne.n	800184a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e006      	b.n	8001896 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d133      	bne.n	800191a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018c2:	f7ff fd73 	bl	80013ac <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018c8:	e012      	b.n	80018f0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ca:	f7ff fd6f 	bl	80013ac <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b0a      	cmp	r3, #10
 80018d6:	d90b      	bls.n	80018f0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2205      	movs	r2, #5
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e01b      	b.n	8001928 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0e5      	beq.n	80018ca <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0202 	bic.w	r2, r2, #2
 800190c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e006      	b.n	8001928 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001944:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d003      	beq.n	8001954 <HAL_CAN_GetRxMessage+0x24>
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b02      	cmp	r3, #2
 8001950:	f040 8103 	bne.w	8001b5a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10e      	bne.n	8001978 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d116      	bne.n	8001996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0f7      	b.n	8001b68 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0e8      	b.n	8001b68 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	331b      	adds	r3, #27
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0204 	and.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10c      	bne.n	80019ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	331b      	adds	r3, #27
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	0d5b      	lsrs	r3, r3, #21
 80019c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e00b      	b.n	80019e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	331b      	adds	r3, #27
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	331b      	adds	r3, #27
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0202 	and.w	r2, r3, #2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	331b      	adds	r3, #27
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2208      	movs	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	e00b      	b.n	8001a34 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	331b      	adds	r3, #27
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 020f 	and.w	r2, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	331b      	adds	r3, #27
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	331b      	adds	r3, #27
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0a1a      	lsrs	r2, r3, #8
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0c1a      	lsrs	r2, r3, #16
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e1a      	lsrs	r2, r3, #24
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0a1a      	lsrs	r2, r3, #8
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3305      	adds	r3, #5
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0c1a      	lsrs	r2, r3, #16
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3306      	adds	r3, #6
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e1a      	lsrs	r2, r3, #24
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3307      	adds	r3, #7
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e006      	b.n	8001b68 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
  }
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b86:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d002      	beq.n	8001b94 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001b8e:	7afb      	ldrb	r3, [r7, #11]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d10f      	bne.n	8001bb4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e005      	b.n	8001bb4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d002      	beq.n	8001bde <HAL_CAN_ActivateNotification+0x1e>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d109      	bne.n	8001bf2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6959      	ldr	r1, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e006      	b.n	8001c00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b08a      	sub	sp, #40	@ 0x28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8083 	beq.w	8001d58 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d025      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
 8001c76:	e017      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8a:	e00d      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	e003      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d026      	beq.n	8001d00 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
 8001cce:	e017      	b.n	8001d00 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce2:	e00d      	b.n	8001d00 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf6:	e003      	b.n	8001d00 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d026      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
 8001d26:	e017      	b.n	8001d58 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3a:	e00d      	b.n	8001d58 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	e003      	b.n	8001d58 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2208      	movs	r2, #8
 8001d96:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2208      	movs	r2, #8
 8001e66:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07b      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d072      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d043      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d03e      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef2:	2b60      	cmp	r3, #96	@ 0x60
 8001ef4:	d02b      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x344>
 8001ef6:	2b60      	cmp	r3, #96	@ 0x60
 8001ef8:	d82e      	bhi.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
 8001efa:	2b50      	cmp	r3, #80	@ 0x50
 8001efc:	d022      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x33a>
 8001efe:	2b50      	cmp	r3, #80	@ 0x50
 8001f00:	d82a      	bhi.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
 8001f02:	2b40      	cmp	r3, #64	@ 0x40
 8001f04:	d019      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x330>
 8001f06:	2b40      	cmp	r3, #64	@ 0x40
 8001f08:	d826      	bhi.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
 8001f0a:	2b30      	cmp	r3, #48	@ 0x30
 8001f0c:	d010      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x326>
 8001f0e:	2b30      	cmp	r3, #48	@ 0x30
 8001f10:	d822      	bhi.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d002      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x312>
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d005      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f1a:	e01d      	b.n	8001f58 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f24:	e019      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	f043 0310 	orr.w	r3, r3, #16
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2e:	e014      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f38:	e00f      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f42:	e00a      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f4c:	e005      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f56:	e000      	b.n	8001f5a <HAL_CAN_IRQHandler+0x350>
            break;
 8001f58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4906      	ldr	r1, [pc, #24]	@ (8002104 <__NVIC_EnableIRQ+0x34>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db12      	blt.n	8002140 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	490a      	ldr	r1, [pc, #40]	@ (800214c <__NVIC_DisableIRQ+0x44>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	3320      	adds	r3, #32
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002134:	f3bf 8f4f 	dsb	sy
}
 8002138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213a:	f3bf 8f6f 	isb	sy
}
 800213e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	@ (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	@ 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800222c:	f7ff ff90 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff09 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff1e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff11 	bl	80020d0 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff1f 	bl	8002108 <__NVIC_DisableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff94 	bl	8002208 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b08b      	sub	sp, #44	@ 0x2c
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	e161      	b.n	80025c4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002300:	2201      	movs	r2, #1
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8150 	bne.w	80025be <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a97      	ldr	r2, [pc, #604]	@ (8002580 <HAL_GPIO_Init+0x294>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d05e      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002328:	4a95      	ldr	r2, [pc, #596]	@ (8002580 <HAL_GPIO_Init+0x294>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d875      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800232e:	4a95      	ldr	r2, [pc, #596]	@ (8002584 <HAL_GPIO_Init+0x298>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d058      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002334:	4a93      	ldr	r2, [pc, #588]	@ (8002584 <HAL_GPIO_Init+0x298>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d86f      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800233a:	4a93      	ldr	r2, [pc, #588]	@ (8002588 <HAL_GPIO_Init+0x29c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d052      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002340:	4a91      	ldr	r2, [pc, #580]	@ (8002588 <HAL_GPIO_Init+0x29c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d869      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002346:	4a91      	ldr	r2, [pc, #580]	@ (800258c <HAL_GPIO_Init+0x2a0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04c      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 800234c:	4a8f      	ldr	r2, [pc, #572]	@ (800258c <HAL_GPIO_Init+0x2a0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d863      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002352:	4a8f      	ldr	r2, [pc, #572]	@ (8002590 <HAL_GPIO_Init+0x2a4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d046      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002358:	4a8d      	ldr	r2, [pc, #564]	@ (8002590 <HAL_GPIO_Init+0x2a4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d85d      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800235e:	2b12      	cmp	r3, #18
 8002360:	d82a      	bhi.n	80023b8 <HAL_GPIO_Init+0xcc>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d859      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002366:	a201      	add	r2, pc, #4	@ (adr r2, 800236c <HAL_GPIO_Init+0x80>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	080023e7 	.word	0x080023e7
 8002370:	080023c1 	.word	0x080023c1
 8002374:	080023d3 	.word	0x080023d3
 8002378:	08002415 	.word	0x08002415
 800237c:	0800241b 	.word	0x0800241b
 8002380:	0800241b 	.word	0x0800241b
 8002384:	0800241b 	.word	0x0800241b
 8002388:	0800241b 	.word	0x0800241b
 800238c:	0800241b 	.word	0x0800241b
 8002390:	0800241b 	.word	0x0800241b
 8002394:	0800241b 	.word	0x0800241b
 8002398:	0800241b 	.word	0x0800241b
 800239c:	0800241b 	.word	0x0800241b
 80023a0:	0800241b 	.word	0x0800241b
 80023a4:	0800241b 	.word	0x0800241b
 80023a8:	0800241b 	.word	0x0800241b
 80023ac:	0800241b 	.word	0x0800241b
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	4a76      	ldr	r2, [pc, #472]	@ (8002594 <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023be:	e02c      	b.n	800241a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e029      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	3304      	adds	r3, #4
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e024      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	3308      	adds	r3, #8
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e01f      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	330c      	adds	r3, #12
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e01a      	b.n	800241c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ee:	2304      	movs	r3, #4
 80023f0:	623b      	str	r3, [r7, #32]
          break;
 80023f2:	e013      	b.n	800241c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023fc:	2308      	movs	r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	611a      	str	r2, [r3, #16]
          break;
 8002406:	e009      	b.n	800241c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	615a      	str	r2, [r3, #20]
          break;
 8002412:	e003      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
          break;
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x130>
          break;
 800241a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2bff      	cmp	r3, #255	@ 0xff
 8002420:	d801      	bhi.n	8002426 <HAL_GPIO_Init+0x13a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	e001      	b.n	800242a <HAL_GPIO_Init+0x13e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d802      	bhi.n	8002438 <HAL_GPIO_Init+0x14c>
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x152>
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	3b08      	subs	r3, #8
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	210f      	movs	r1, #15
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	431a      	orrs	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80a9 	beq.w	80025be <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800246c:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <HAL_GPIO_Init+0x2ac>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a49      	ldr	r2, [pc, #292]	@ (8002598 <HAL_GPIO_Init+0x2ac>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <HAL_GPIO_Init+0x2ac>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002484:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_GPIO_Init+0x2b0>)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	@ (80025a0 <HAL_GPIO_Init+0x2b4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3c      	ldr	r2, [pc, #240]	@ (80025a4 <HAL_GPIO_Init+0x2b8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	@ (80025a8 <HAL_GPIO_Init+0x2bc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1d8>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e004      	b.n	80024ce <HAL_GPIO_Init+0x1e2>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e002      	b.n	80024ce <HAL_GPIO_Init+0x1e2>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_GPIO_Init+0x1e2>
 80024cc:	2300      	movs	r3, #0
 80024ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d0:	f002 0203 	and.w	r2, r2, #3
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	4093      	lsls	r3, r2
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024de:	492f      	ldr	r1, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x2b0>)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024f8:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	492b      	ldr	r1, [pc, #172]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4927      	ldr	r1, [pc, #156]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002510:	4013      	ands	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4921      	ldr	r1, [pc, #132]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	491d      	ldr	r1, [pc, #116]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002538:	4013      	ands	r3, r2
 800253a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4917      	ldr	r1, [pc, #92]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	43db      	mvns	r3, r3
 800255e:	4913      	ldr	r1, [pc, #76]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002560:	4013      	ands	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002570:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	490d      	ldr	r1, [pc, #52]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
 800257c:	e01f      	b.n	80025be <HAL_GPIO_Init+0x2d2>
 800257e:	bf00      	nop
 8002580:	10320000 	.word	0x10320000
 8002584:	10310000 	.word	0x10310000
 8002588:	10220000 	.word	0x10220000
 800258c:	10210000 	.word	0x10210000
 8002590:	10120000 	.word	0x10120000
 8002594:	10110000 	.word	0x10110000
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_GPIO_Init+0x2f4>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4909      	ldr	r1, [pc, #36]	@ (80025e0 <HAL_GPIO_Init+0x2f4>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	3301      	adds	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f ae96 	bne.w	8002300 <HAL_GPIO_Init+0x14>
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	372c      	adds	r7, #44	@ 0x2c
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80025f2:	e094      	b.n	800271e <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800260a:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <HAL_GPIO_DeInit+0x154>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4013      	ands	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a43      	ldr	r2, [pc, #268]	@ (800273c <HAL_GPIO_DeInit+0x158>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00d      	beq.n	8002650 <HAL_GPIO_DeInit+0x6c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_GPIO_DeInit+0x15c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d007      	beq.n	800264c <HAL_GPIO_DeInit+0x68>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a41      	ldr	r2, [pc, #260]	@ (8002744 <HAL_GPIO_DeInit+0x160>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_GPIO_DeInit+0x64>
 8002644:	2302      	movs	r3, #2
 8002646:	e004      	b.n	8002652 <HAL_GPIO_DeInit+0x6e>
 8002648:	2303      	movs	r3, #3
 800264a:	e002      	b.n	8002652 <HAL_GPIO_DeInit+0x6e>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_GPIO_DeInit+0x6e>
 8002650:	2300      	movs	r3, #0
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d132      	bne.n	80026c8 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4937      	ldr	r1, [pc, #220]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 800266c:	4013      	ands	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002670:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	43db      	mvns	r3, r3
 8002678:	4933      	ldr	r1, [pc, #204]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 800267a:	4013      	ands	r3, r2
 800267c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4930      	ldr	r1, [pc, #192]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 8002688:	4013      	ands	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800268c:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	43db      	mvns	r3, r3
 8002694:	492c      	ldr	r1, [pc, #176]	@ (8002748 <HAL_GPIO_DeInit+0x164>)
 8002696:	4013      	ands	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80026aa:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <HAL_GPIO_DeInit+0x154>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	481f      	ldr	r0, [pc, #124]	@ (8002738 <HAL_GPIO_DeInit+0x154>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	400a      	ands	r2, r1
 80026c2:	3302      	adds	r3, #2
 80026c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	@ 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_DeInit+0xee>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_DeInit+0xf2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_DeInit+0x100>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_DeInit+0x106>
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	2104      	movs	r1, #4
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3301      	adds	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	f47f af64 	bne.w	80025f4 <HAL_GPIO_DeInit+0x10>
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40010000 	.word	0x40010000
 800273c:	40010800 	.word	0x40010800
 8002740:	40010c00 	.word	0x40010c00
 8002744:	40011000 	.word	0x40011000
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	611a      	str	r2, [r3, #16]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800279a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800279c:	e002      	b.n	80027a4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800279e:	bf40      	sev
    __WFE();
 80027a0:	bf20      	wfe
    __WFE();
 80027a2:	bf20      	wfe
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e272      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8087 	beq.w	80028e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d4:	4b92      	ldr	r3, [pc, #584]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d00c      	beq.n	80027fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d112      	bne.n	8002812 <HAL_RCC_OscConfig+0x5e>
 80027ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d10b      	bne.n	8002812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fa:	4b89      	ldr	r3, [pc, #548]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d06c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x12c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d168      	bne.n	80028e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e24c      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x76>
 800281c:	4b80      	ldr	r3, [pc, #512]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a7f      	ldr	r2, [pc, #508]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	e02e      	b.n	8002888 <HAL_RCC_OscConfig+0xd4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b7b      	ldr	r3, [pc, #492]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7a      	ldr	r2, [pc, #488]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b78      	ldr	r3, [pc, #480]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a77      	ldr	r2, [pc, #476]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002844:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xd4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0xbc>
 8002856:	4b72      	ldr	r3, [pc, #456]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a71      	ldr	r2, [pc, #452]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b6f      	ldr	r3, [pc, #444]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6e      	ldr	r2, [pc, #440]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xd4>
 8002870:	4b6b      	ldr	r3, [pc, #428]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a6a      	ldr	r2, [pc, #424]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a67      	ldr	r2, [pc, #412]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002886:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fd8c 	bl	80013ac <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fd88 	bl	80013ac <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e200      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xe4>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fd78 	bl	80013ac <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fd74 	bl	80013ac <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1ec      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	4b53      	ldr	r3, [pc, #332]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x10c>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028fa:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x18c>
 8002906:	4b46      	ldr	r3, [pc, #280]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x176>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e1c0      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4939      	ldr	r1, [pc, #228]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e03a      	b.n	80029b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <HAL_RCC_OscConfig+0x270>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe fd2d 	bl	80013ac <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fd29 	bl	80013ac <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1a1      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b2d      	ldr	r3, [pc, #180]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b2a      	ldr	r3, [pc, #168]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4927      	ldr	r1, [pc, #156]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_RCC_OscConfig+0x270>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fd0c 	bl	80013ac <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fd08 	bl	80013ac <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e180      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03a      	beq.n	8002a38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d019      	beq.n	80029fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <HAL_RCC_OscConfig+0x274>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe fcec 	bl	80013ac <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fce8 	bl	80013ac <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e160      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f000 face 	bl	8002f98 <RCC_Delay>
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_RCC_OscConfig+0x274>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7fe fcd2 	bl	80013ac <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0a:	e00f      	b.n	8002a2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fcce 	bl	80013ac <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d908      	bls.n	8002a2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e146      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	42420000 	.word	0x42420000
 8002a28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b92      	ldr	r3, [pc, #584]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e9      	bne.n	8002a0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a6 	beq.w	8002b92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b88      	ldr	r3, [pc, #544]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a87      	ldr	r2, [pc, #540]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b85      	ldr	r3, [pc, #532]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b82      	ldr	r3, [pc, #520]	@ (8002c7c <HAL_RCC_OscConfig+0x4c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c7c <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7e      	ldr	r2, [pc, #504]	@ (8002c7c <HAL_RCC_OscConfig+0x4c8>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fc8f 	bl	80013ac <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fc8b 	bl	80013ac <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	@ 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e103      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b75      	ldr	r3, [pc, #468]	@ (8002c7c <HAL_RCC_OscConfig+0x4c8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x312>
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	e02d      	b.n	8002b22 <HAL_RCC_OscConfig+0x36e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002ace:	4b6a      	ldr	r3, [pc, #424]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a69      	ldr	r2, [pc, #420]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a66      	ldr	r2, [pc, #408]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	e01c      	b.n	8002b22 <HAL_RCC_OscConfig+0x36e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x356>
 8002af0:	4b61      	ldr	r3, [pc, #388]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a60      	ldr	r2, [pc, #384]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a5d      	ldr	r2, [pc, #372]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x36e>
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4b58      	ldr	r3, [pc, #352]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a57      	ldr	r2, [pc, #348]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fc3f 	bl	80013ac <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fc3b 	bl	80013ac <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0b1      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	4b4b      	ldr	r3, [pc, #300]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RCC_OscConfig+0x37e>
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fc29 	bl	80013ac <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fc25 	bl	80013ac <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e09b      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b74:	4b40      	ldr	r3, [pc, #256]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d105      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b86:	4b3c      	ldr	r3, [pc, #240]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8087 	beq.w	8002caa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b9c:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d061      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d146      	bne.n	8002c3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fbf9 	bl	80013ac <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fbf5 	bl	80013ac <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e06d      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd0:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be4:	d108      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4921      	ldr	r1, [pc, #132]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a19      	ldr	r1, [r3, #32]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	491b      	ldr	r1, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe fbc9 	bl	80013ac <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fbc5 	bl	80013ac <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e03d      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x46a>
 8002c3c:	e035      	b.n	8002caa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fbb2 	bl	80013ac <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fbae 	bl	80013ac <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e026      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x498>
 8002c6a:	e01e      	b.n	8002caa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e019      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_OscConfig+0x500>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0d0      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b67      	ldr	r3, [pc, #412]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4965      	ldr	r1, [pc, #404]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a52      	ldr	r2, [pc, #328]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d040      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d115      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e073      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4936      	ldr	r1, [pc, #216]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da8:	f7fe fb00 	bl	80013ac <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe fafc 	bl	80013ac <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e053      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b27      	ldr	r3, [pc, #156]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d210      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b24      	ldr	r3, [pc, #144]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	4922      	ldr	r1, [pc, #136]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e32:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1cc>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x1d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa5e 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08006cdc 	.word	0x08006cdc
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d002      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x30>
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eba:	e027      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebe:	613b      	str	r3, [r7, #16]
      break;
 8002ec0:	e027      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	0c9b      	lsrs	r3, r3, #18
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	0c5b      	lsrs	r3, r3, #17
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	4a11      	ldr	r2, [pc, #68]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ee6:	5cd3      	ldrb	r3, [r2, r3]
 8002ee8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eee:	fb03 f202 	mul.w	r2, r3, r2
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e004      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	613b      	str	r3, [r7, #16]
      break;
 8002f0a:	e002      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0e:	613b      	str	r3, [r7, #16]
      break;
 8002f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f12:	693b      	ldr	r3, [r7, #16]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	007a1200 	.word	0x007a1200
 8002f28:	08006cf4 	.word	0x08006cf4
 8002f2c:	08006d04 	.word	0x08006d04
 8002f30:	003d0900 	.word	0x003d0900

08002f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b02      	ldr	r3, [pc, #8]	@ (8002f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000000 	.word	0x20000000

08002f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f4c:	f7ff fff2 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	@ (8002f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	08006cec 	.word	0x08006cec

08002f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f74:	f7ff ffde 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08006cec 	.word	0x08006cec

08002f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <RCC_Delay+0x34>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <RCC_Delay+0x38>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a5b      	lsrs	r3, r3, #9
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb4:	bf00      	nop
  }
  while (Delay --);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	60fa      	str	r2, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <RCC_Delay+0x1c>
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e042      	b.n	800306c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe f902 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	@ 0x24
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f971 	bl	8003300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800302c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800303c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800304c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	d175      	bne.n	8003180 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Transmit+0x2c>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e06e      	b.n	8003182 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	@ 0x21
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b2:	f7fe f97b 	bl	80013ac <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030cc:	d108      	bne.n	80030e0 <HAL_UART_Transmit+0x6c>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e003      	b.n	80030e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030e8:	e02e      	b.n	8003148 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2180      	movs	r1, #128	@ 0x80
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f848 	bl	800318a <UART_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e03a      	b.n	8003182 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3302      	adds	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e007      	b.n	800313a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cb      	bne.n	80030ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	@ 0x40
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f814 	bl	800318a <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e006      	b.n	8003182 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	e03b      	b.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031a2:	d037      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe f902 	bl	80013ac <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <UART_WaitOnFlagUntilTimeout+0x30>
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e03a      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d023      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b80      	cmp	r3, #128	@ 0x80
 80031d0:	d020      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d01d      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d116      	bne.n	8003214 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f81d 	bl	800323c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2208      	movs	r2, #8
 8003206:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e00f      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d0b4      	beq.n	800319c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b095      	sub	sp, #84	@ 0x54
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003264:	643a      	str	r2, [r7, #64]	@ 0x40
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800326a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	61fb      	str	r3, [r7, #28]
   return(result);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800329a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800329e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d119      	bne.n	80032e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032d4:	61ba      	str	r2, [r7, #24]
 80032d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6979      	ldr	r1, [r7, #20]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	613b      	str	r3, [r7, #16]
   return(result);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e5      	bne.n	80032b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032f6:	bf00      	nop
 80032f8:	3754      	adds	r7, #84	@ 0x54
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800333a:	f023 030c 	bic.w	r3, r3, #12
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	430b      	orrs	r3, r1
 8003346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <UART_SetConfig+0x114>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7ff fe02 	bl	8002f70 <HAL_RCC_GetPCLK2Freq>
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	e002      	b.n	8003376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7ff fdea 	bl	8002f48 <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <UART_SetConfig+0x118>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	0119      	lsls	r1, r3, #4
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <UART_SetConfig+0x118>)
 80033ae:	fba3 0302 	umull	r0, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2064      	movs	r0, #100	@ 0x64
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	3332      	adds	r3, #50	@ 0x32
 80033c0:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <UART_SetConfig+0x118>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033cc:	4419      	add	r1, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009a      	lsls	r2, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <UART_SetConfig+0x118>)
 80033e6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2064      	movs	r0, #100	@ 0x64
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	@ 0x32
 80033f8:	4a07      	ldr	r2, [pc, #28]	@ (8003418 <UART_SetConfig+0x118>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	440a      	add	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40013800 	.word	0x40013800
 8003418:	51eb851f 	.word	0x51eb851f

0800341c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800342a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342e:	2b84      	cmp	r3, #132	@ 0x84
 8003430:	d005      	beq.n	800343e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	3303      	adds	r3, #3
 800343c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003450:	f3ef 8305 	mrs	r3, IPSR
 8003454:	607b      	str	r3, [r7, #4]
  return(result);
 8003456:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003470:	f001 fce4 	bl	8004e3c <vTaskStartScheduler>
  
  return osOK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}

0800347a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800347a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347c:	b089      	sub	sp, #36	@ 0x24
 800347e:	af04      	add	r7, sp, #16
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <osThreadCreate+0x54>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01c      	beq.n	80034ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685c      	ldr	r4, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691e      	ldr	r6, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ffb8 	bl	800341c <makeFreeRtosPriority>
 80034ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034b6:	9202      	str	r2, [sp, #8]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	9100      	str	r1, [sp, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4632      	mov	r2, r6
 80034c0:	4629      	mov	r1, r5
 80034c2:	4620      	mov	r0, r4
 80034c4:	f001 fad4 	bl	8004a70 <xTaskCreateStatic>
 80034c8:	4603      	mov	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e01c      	b.n	8003508 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685c      	ldr	r4, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ff9a 	bl	800341c <makeFreeRtosPriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	4632      	mov	r2, r6
 80034f6:	4629      	mov	r1, r5
 80034f8:	4620      	mov	r0, r4
 80034fa:	f001 fb19 	bl	8004b30 <xTaskCreate>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003512 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <osDelay+0x16>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	e000      	b.n	800352a <osDelay+0x18>
 8003528:	2301      	movs	r3, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fc50 	bl	8004dd0 <vTaskDelay>
  
  return osOK;
 8003530:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	460b      	mov	r3, r1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d013      	beq.n	800357a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <osTimerCreate+0x20>
 8003558:	2101      	movs	r1, #1
 800355a:	e000      	b.n	800355e <osTimerCreate+0x22>
 800355c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	460a      	mov	r2, r1
 800356e:	2101      	movs	r1, #1
 8003570:	480b      	ldr	r0, [pc, #44]	@ (80035a0 <osTimerCreate+0x64>)
 8003572:	f002 fa38 	bl	80059e6 <xTimerCreateStatic>
 8003576:	4603      	mov	r3, r0
 8003578:	e00e      	b.n	8003598 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <osTimerCreate+0x48>
 8003580:	2201      	movs	r2, #1
 8003582:	e000      	b.n	8003586 <osTimerCreate+0x4a>
 8003584:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2101      	movs	r1, #1
 8003590:	4803      	ldr	r0, [pc, #12]	@ (80035a0 <osTimerCreate+0x64>)
 8003592:	f002 fa07 	bl	80059a4 <xTimerCreate>
 8003596:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	08006bbc 	.word	0x08006bbc

080035a4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <osTimerStart+0x20>
    ticks = 1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80035c4:	f7ff ff41 	bl	800344a <inHandlerMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01a      	beq.n	8003604 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	2200      	movs	r2, #0
 80035d4:	9200      	str	r2, [sp, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	2109      	movs	r1, #9
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f002 fa80 	bl	8005ae0 <xTimerGenericCommand>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d002      	beq.n	80035ec <osTimerStart+0x48>
    {
      result = osErrorOS;
 80035e6:	23ff      	movs	r3, #255	@ 0xff
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e018      	b.n	800361e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <osTimerStart+0x7a>
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <osTimerStart+0x84>)
 80035f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	e00c      	b.n	800361e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003604:	2300      	movs	r3, #0
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	2104      	movs	r1, #4
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f002 fa66 	bl	8005ae0 <xTimerGenericCommand>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <osTimerStart+0x7a>
      result = osErrorOS;
 800361a:	23ff      	movs	r3, #255	@ 0xff
 800361c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800361e:	697b      	ldr	r3, [r7, #20]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800363c:	f7ff ff05 	bl	800344a <inHandlerMode>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	2200      	movs	r2, #0
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	2108      	movs	r1, #8
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f002 fa44 	bl	8005ae0 <xTimerGenericCommand>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <osTimerStop+0x36>
      return osErrorOS;
 800365e:	23ff      	movs	r3, #255	@ 0xff
 8003660:	e019      	b.n	8003696 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <osTimerStop+0x68>
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <osTimerStop+0x74>)
 800366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	e00c      	b.n	8003694 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	2200      	movs	r2, #0
 8003682:	2103      	movs	r1, #3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f002 fa2b 	bl	8005ae0 <xTimerGenericCommand>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <osTimerStop+0x68>
      result = osErrorOS;
 8003690:	23ff      	movs	r3, #255	@ 0xff
 8003692:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <osMessageCreate+0x36>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2400      	movs	r4, #0
 80036d0:	9400      	str	r4, [sp, #0]
 80036d2:	f000 fd07 	bl	80040e4 <xQueueGenericCreateStatic>
 80036d6:	4603      	mov	r3, r0
 80036d8:	e008      	b.n	80036ec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	4619      	mov	r1, r3
 80036e6:	f000 fd7a 	bl	80041de <xQueueGenericCreate>
 80036ea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}

080036f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003700:	f001 fc0c 	bl	8004f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003704:	4b5c      	ldr	r3, [pc, #368]	@ (8003878 <pvPortMalloc+0x184>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800370c:	f000 f924 	bl	8003958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003710:	4b5a      	ldr	r3, [pc, #360]	@ (800387c <pvPortMalloc+0x188>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 8095 	bne.w	8003848 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01e      	beq.n	8003762 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003724:	2208      	movs	r2, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	2b00      	cmp	r3, #0
 8003734:	d015      	beq.n	8003762 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	3308      	adds	r3, #8
 800373e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d06f      	beq.n	8003848 <pvPortMalloc+0x154>
 8003768:	4b45      	ldr	r3, [pc, #276]	@ (8003880 <pvPortMalloc+0x18c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d86a      	bhi.n	8003848 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003772:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <pvPortMalloc+0x190>)
 8003774:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003776:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <pvPortMalloc+0x190>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800377c:	e004      	b.n	8003788 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d903      	bls.n	800379a <pvPortMalloc+0xa6>
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f1      	bne.n	800377e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800379a:	4b37      	ldr	r3, [pc, #220]	@ (8003878 <pvPortMalloc+0x184>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d051      	beq.n	8003848 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4413      	add	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad2      	subs	r2, r2, r3
 80037be:	2308      	movs	r3, #8
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d920      	bls.n	8003808 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <pvPortMalloc+0xfc>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	613b      	str	r3, [r7, #16]
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003802:	69b8      	ldr	r0, [r7, #24]
 8003804:	f000 f90a 	bl	8003a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <pvPortMalloc+0x18c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <pvPortMalloc+0x18c>)
 8003814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003816:	4b1a      	ldr	r3, [pc, #104]	@ (8003880 <pvPortMalloc+0x18c>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <pvPortMalloc+0x194>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d203      	bcs.n	800382a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003822:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <pvPortMalloc+0x18c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <pvPortMalloc+0x194>)
 8003828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <pvPortMalloc+0x188>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	431a      	orrs	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800383e:	4b13      	ldr	r3, [pc, #76]	@ (800388c <pvPortMalloc+0x198>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	4a11      	ldr	r2, [pc, #68]	@ (800388c <pvPortMalloc+0x198>)
 8003846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003848:	f001 fb76 	bl	8004f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <pvPortMalloc+0x17a>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	60fb      	str	r3, [r7, #12]
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <pvPortMalloc+0x176>
	return pvReturn;
 800386e:	69fb      	ldr	r3, [r7, #28]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	@ 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200016e8 	.word	0x200016e8
 800387c:	200016fc 	.word	0x200016fc
 8003880:	200016ec 	.word	0x200016ec
 8003884:	200016e0 	.word	0x200016e0
 8003888:	200016f0 	.word	0x200016f0
 800388c:	200016f4 	.word	0x200016f4

08003890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04f      	beq.n	8003942 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80038a2:	2308      	movs	r3, #8
 80038a4:	425b      	negs	r3, r3
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4413      	add	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <vPortFree+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <vPortFree+0x46>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <vPortFree+0x66>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60bb      	str	r3, [r7, #8]
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <vPortFree+0xbc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01e      	beq.n	8003942 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11a      	bne.n	8003942 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4b0e      	ldr	r3, [pc, #56]	@ (800394c <vPortFree+0xbc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800391c:	f001 fafe 	bl	8004f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <vPortFree+0xc0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4413      	add	r3, r2
 800392a:	4a09      	ldr	r2, [pc, #36]	@ (8003950 <vPortFree+0xc0>)
 800392c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800392e:	6938      	ldr	r0, [r7, #16]
 8003930:	f000 f874 	bl	8003a1c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <vPortFree+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <vPortFree+0xc4>)
 800393c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800393e:	f001 fafb 	bl	8004f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200016fc 	.word	0x200016fc
 8003950:	200016ec 	.word	0x200016ec
 8003954:	200016f8 	.word	0x200016f8

08003958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800395e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <prvHeapInit+0xac>)
 8003966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3307      	adds	r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <prvHeapInit+0xac>)
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003990:	4a1d      	ldr	r2, [pc, #116]	@ (8003a08 <prvHeapInit+0xb0>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003996:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <prvHeapInit+0xb0>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039a4:	2208      	movs	r2, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <prvHeapInit+0xb4>)
 80039b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <prvHeapInit+0xb4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <prvHeapInit+0xb4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <prvHeapInit+0xb4>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a10 <prvHeapInit+0xb8>)
 80039e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <prvHeapInit+0xbc>)
 80039ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <prvHeapInit+0xc0>)
 80039f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039f6:	601a      	str	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000ae0 	.word	0x20000ae0
 8003a08:	200016e0 	.word	0x200016e0
 8003a0c:	200016e8 	.word	0x200016e8
 8003a10:	200016f0 	.word	0x200016f0
 8003a14:	200016ec 	.word	0x200016ec
 8003a18:	200016fc 	.word	0x200016fc

08003a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a24:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e002      	b.n	8003a30 <prvInsertBlockIntoFreeList+0x14>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d8f7      	bhi.n	8003a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d108      	bne.n	8003a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	441a      	add	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d118      	bne.n	8003aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <prvInsertBlockIntoFreeList+0xac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d00d      	beq.n	8003a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e008      	b.n	8003aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <prvInsertBlockIntoFreeList+0xac>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e003      	b.n	8003aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d002      	beq.n	8003aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	200016e0 	.word	0x200016e0
 8003ac8:	200016e8 	.word	0x200016e8

08003acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0208 	add.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f103 0208 	add.w	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f103 0208 	add.w	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b7e:	d103      	bne.n	8003b88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e00c      	b.n	8003ba2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e002      	b.n	8003b96 <vListInsert+0x2e>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d2f6      	bcs.n	8003b90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6892      	ldr	r2, [r2, #8]
 8003bee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6852      	ldr	r2, [r2, #4]
 8003bf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d103      	bne.n	8003c0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
	...

08003c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b04      	subs	r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b04      	subs	r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c5c:	4a08      	ldr	r2, [pc, #32]	@ (8003c80 <pxPortInitialiseStack+0x54>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3b14      	subs	r3, #20
 8003c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b20      	subs	r3, #32
 8003c72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	08003c85 	.word	0x08003c85

08003c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c8e:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <prvTaskExitError+0x54>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c96:	d00b      	beq.n	8003cb0 <prvTaskExitError+0x2c>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <prvTaskExitError+0x28>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60bb      	str	r3, [r7, #8]
}
 8003cc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cc4:	bf00      	nop
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0fc      	beq.n	8003cc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <pxCurrentTCBConst2>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cea:	f380 8809 	msr	PSP, r0
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003cfe:	4770      	bx	lr

08003d00 <pxCurrentTCBConst2>:
 8003d00:	20001748 	.word	0x20001748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop

08003d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d08:	4806      	ldr	r0, [pc, #24]	@ (8003d24 <prvPortStartFirstTask+0x1c>)
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	6800      	ldr	r0, [r0, #0]
 8003d0e:	f380 8808 	msr	MSP, r0
 8003d12:	b662      	cpsie	i
 8003d14:	b661      	cpsie	f
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	df00      	svc	0
 8003d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d22:	bf00      	nop
 8003d24:	e000ed08 	.word	0xe000ed08

08003d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d2e:	4b32      	ldr	r3, [pc, #200]	@ (8003df8 <xPortStartScheduler+0xd0>)
 8003d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	@ 0xff
 8003d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <xPortStartScheduler+0xd4>)
 8003d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d56:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5c:	e009      	b.n	8003d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d0ef      	beq.n	8003d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00b      	beq.n	8003da2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003db4:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dd8:	f000 f8b8 	bl	8003f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <xPortStartScheduler+0xe0>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003de2:	f7ff ff91 	bl	8003d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003de6:	f001 fa0d 	bl	8005204 <vTaskSwitchContext>
	prvTaskExitError();
 8003dea:	f7ff ff4b 	bl	8003c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e000e400 	.word	0xe000e400
 8003dfc:	20001700 	.word	0x20001700
 8003e00:	20001704 	.word	0x20001704
 8003e04:	e000ed20 	.word	0xe000ed20
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
}
 8003e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d110      	bne.n	8003e5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	603b      	str	r3, [r7, #0]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <vPortEnterCritical+0x4a>
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <vPortExitCritical+0x26>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	607b      	str	r3, [r7, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <vPortExitCritical+0x44>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ec0:	f3ef 8009 	mrs	r0, PSP
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <pxCurrentTCBConst>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ed0:	6010      	str	r0, [r2, #0]
 8003ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ed6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003eda:	f380 8811 	msr	BASEPRI, r0
 8003ede:	f001 f991 	bl	8005204 <vTaskSwitchContext>
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8811 	msr	BASEPRI, r0
 8003eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6808      	ldr	r0, [r1, #0]
 8003ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ef6:	f380 8809 	msr	PSP, r0
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	4770      	bx	lr

08003f00 <pxCurrentTCBConst>:
 8003f00:	20001748 	.word	0x20001748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f001 f8b5 	bl	8005090 <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <xPortSysTickHandler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e010 	.word	0xe000e010
 8003f80:	e000e018 	.word	0xe000e018
 8003f84:	20000000 	.word	0x20000000
 8003f88:	10624dd3 	.word	0x10624dd3
 8003f8c:	e000e014 	.word	0xe000e014

08003f90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f96:	f3ef 8305 	mrs	r3, IPSR
 8003f9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d915      	bls.n	8003fce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fa2:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <vPortValidateInterruptPriority+0x70>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fac:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <vPortValidateInterruptPriority+0x74>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	7afa      	ldrb	r2, [r7, #11]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20b      	bcs.n	8003fce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	607b      	str	r3, [r7, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <vPortValidateInterruptPriority+0x78>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <vPortValidateInterruptPriority+0x7c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d90b      	bls.n	8003ff6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <vPortValidateInterruptPriority+0x62>
	}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	e000e3f0 	.word	0xe000e3f0
 8004004:	20001700 	.word	0x20001700
 8004008:	e000ed0c 	.word	0xe000ed0c
 800400c:	20001704 	.word	0x20001704

08004010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <xQueueGenericReset+0x2c>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60bb      	str	r3, [r7, #8]
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800403c:	f7ff fee6 	bl	8003e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	441a      	add	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406c:	3b01      	subs	r3, #1
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	22ff      	movs	r2, #255	@ 0xff
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	22ff      	movs	r2, #255	@ 0xff
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01a      	beq.n	80040d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3310      	adds	r3, #16
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 f964 	bl	800536c <xTaskRemoveFromEventList>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <xQueueGenericReset+0xd0>)
 80040ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	e009      	b.n	80040d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3310      	adds	r3, #16
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fd03 	bl	8003acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3324      	adds	r3, #36	@ 0x24
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fcfe 	bl	8003acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040d0:	f7ff fecc 	bl	8003e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040d4:	2301      	movs	r3, #1
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	@ 0x38
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <xQueueGenericCreateStatic+0x56>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <xQueueGenericCreateStatic+0x5a>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueGenericCreateStatic+0x5c>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	623b      	str	r3, [r7, #32]
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <xQueueGenericCreateStatic+0x84>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <xQueueGenericCreateStatic+0x88>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <xQueueGenericCreateStatic+0x8a>
 800416c:	2300      	movs	r3, #0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61fb      	str	r3, [r7, #28]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800418a:	2348      	movs	r3, #72	@ 0x48
 800418c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b48      	cmp	r3, #72	@ 0x48
 8004192:	d00b      	beq.n	80041ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61bb      	str	r3, [r7, #24]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f840 	bl	8004254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	@ 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08a      	sub	sp, #40	@ 0x28
 80041e2:	af02      	add	r7, sp, #8
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <xQueueGenericCreate+0x2c>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	613b      	str	r3, [r7, #16]
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3348      	adds	r3, #72	@ 0x48
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fa6b 	bl	80036f4 <pvPortMalloc>
 800421e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3348      	adds	r3, #72	@ 0x48
 800422e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004238:	79fa      	ldrb	r2, [r7, #7]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f805 	bl	8004254 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800424a:	69bb      	ldr	r3, [r7, #24]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e002      	b.n	8004276 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004282:	2101      	movs	r1, #1
 8004284:	69b8      	ldr	r0, [r7, #24]
 8004286:	f7ff fec3 	bl	8004010 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	@ 0x38
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <xQueueGenericSend+0x34>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <xQueueGenericSend+0x42>
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <xQueueGenericSend+0x46>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueueGenericSend+0x48>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xQueueGenericSend+0x64>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d103      	bne.n	8004306 <xQueueGenericSend+0x72>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <xQueueGenericSend+0x76>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <xQueueGenericSend+0x78>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <xQueueGenericSend+0x94>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	623b      	str	r3, [r7, #32]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004328:	f001 f9e6 	bl	80056f8 <xTaskGetSchedulerState>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <xQueueGenericSend+0xa4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <xQueueGenericSend+0xa8>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <xQueueGenericSend+0xaa>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xQueueGenericSend+0xc6>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	61fb      	str	r3, [r7, #28]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800435a:	f7ff fd57 	bl	8003e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <xQueueGenericSend+0xdc>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d129      	bne.n	80043c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004376:	f000 fa0f 	bl	8004798 <prvCopyDataToQueue>
 800437a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	3324      	adds	r3, #36	@ 0x24
 8004388:	4618      	mov	r0, r3
 800438a:	f000 ffef 	bl	800536c <xTaskRemoveFromEventList>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004394:	4b3f      	ldr	r3, [pc, #252]	@ (8004494 <xQueueGenericSend+0x200>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	e00a      	b.n	80043bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043ac:	4b39      	ldr	r3, [pc, #228]	@ (8004494 <xQueueGenericSend+0x200>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043bc:	f7ff fd56 	bl	8003e6c <vPortExitCritical>
				return pdPASS;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e063      	b.n	800448c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ca:	f7ff fd4f 	bl	8003e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e05c      	b.n	800448c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 f829 	bl	8005434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e6:	f7ff fd41 	bl	8003e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ea:	f000 fd97 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ee:	f7ff fd0d 	bl	8003e0c <vPortEnterCritical>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043fe:	d103      	bne.n	8004408 <xQueueGenericSend+0x174>
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440e:	b25b      	sxtb	r3, r3
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004414:	d103      	bne.n	800441e <xQueueGenericSend+0x18a>
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441e:	f7ff fd25 	bl	8003e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004422:	1d3a      	adds	r2, r7, #4
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f818 	bl	8005460 <xTaskCheckForTimeOut>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d124      	bne.n	8004480 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004438:	f000 faa6 	bl	8004988 <prvIsQueueFull>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	3310      	adds	r3, #16
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ff3c 	bl	80052c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004452:	f000 fa31 	bl	80048b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004456:	f000 fd6f 	bl	8004f38 <xTaskResumeAll>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f af7c 	bne.w	800435a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <xQueueGenericSend+0x200>)
 8004464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	e772      	b.n	800435a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004476:	f000 fa1f 	bl	80048b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800447a:	f000 fd5d 	bl	8004f38 <xTaskResumeAll>
 800447e:	e76c      	b.n	800435a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004482:	f000 fa19 	bl	80048b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004486:	f000 fd57 	bl	8004f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800448a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800448c:	4618      	mov	r0, r3
 800448e:	3738      	adds	r7, #56	@ 0x38
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b090      	sub	sp, #64	@ 0x40
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSendFromISR+0x3e>
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <xQueueGenericSendFromISR+0x42>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueGenericSendFromISR+0x44>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d103      	bne.n	8004506 <xQueueGenericSendFromISR+0x6e>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <xQueueGenericSendFromISR+0x72>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <xQueueGenericSendFromISR+0x74>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	623b      	str	r3, [r7, #32]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004528:	f7ff fd32 	bl	8003f90 <vPortValidateInterruptPriority>
	__asm volatile
 800452c:	f3ef 8211 	mrs	r2, BASEPRI
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	61fa      	str	r2, [r7, #28]
 8004542:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004544:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <xQueueGenericSendFromISR+0xc2>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d12f      	bne.n	80045ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004560:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004570:	f000 f912 	bl	8004798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004574:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800457c:	d112      	bne.n	80045a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	3324      	adds	r3, #36	@ 0x24
 800458a:	4618      	mov	r0, r3
 800458c:	f000 feee 	bl	800536c <xTaskRemoveFromEventList>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00e      	beq.n	80045b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e007      	b.n	80045b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045a8:	3301      	adds	r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80045b4:	2301      	movs	r3, #1
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80045b8:	e001      	b.n	80045be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c0:	617b      	str	r3, [r7, #20]
	__asm volatile
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f383 8811 	msr	BASEPRI, r3
}
 80045c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3740      	adds	r7, #64	@ 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <xQueueReceive+0x32>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	623b      	str	r3, [r7, #32]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <xQueueReceive+0x40>
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <xQueueReceive+0x44>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <xQueueReceive+0x46>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <xQueueReceive+0x62>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61fb      	str	r3, [r7, #28]
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004636:	f001 f85f 	bl	80056f8 <xTaskGetSchedulerState>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <xQueueReceive+0x72>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <xQueueReceive+0x76>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueReceive+0x78>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <xQueueReceive+0x94>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	61bb      	str	r3, [r7, #24]
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004668:	f7ff fbd0 	bl	8003e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01f      	beq.n	80046b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800467c:	f000 f8f6 	bl	800486c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00f      	beq.n	80046b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	3310      	adds	r3, #16
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fe69 	bl	800536c <xTaskRemoveFromEventList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004794 <xQueueReceive+0x1c0>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046b0:	f7ff fbdc 	bl	8003e6c <vPortExitCritical>
				return pdPASS;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e069      	b.n	800478c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046be:	f7ff fbd5 	bl	8003e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e062      	b.n	800478c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046cc:	f107 0310 	add.w	r3, r7, #16
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 feaf 	bl	8005434 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046da:	f7ff fbc7 	bl	8003e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046de:	f000 fc1d 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046e2:	f7ff fb93 	bl	8003e0c <vPortEnterCritical>
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f2:	d103      	bne.n	80046fc <xQueueReceive+0x128>
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004702:	b25b      	sxtb	r3, r3
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004708:	d103      	bne.n	8004712 <xQueueReceive+0x13e>
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004712:	f7ff fbab 	bl	8003e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004716:	1d3a      	adds	r2, r7, #4
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fe9e 	bl	8005460 <xTaskCheckForTimeOut>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d123      	bne.n	8004772 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800472a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800472c:	f000 f916 	bl	800495c <prvIsQueueEmpty>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	3324      	adds	r3, #36	@ 0x24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fdc2 	bl	80052c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004746:	f000 f8b7 	bl	80048b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800474a:	f000 fbf5 	bl	8004f38 <xTaskResumeAll>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d189      	bne.n	8004668 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <xQueueReceive+0x1c0>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	e780      	b.n	8004668 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004768:	f000 f8a6 	bl	80048b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800476c:	f000 fbe4 	bl	8004f38 <xTaskResumeAll>
 8004770:	e77a      	b.n	8004668 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004774:	f000 f8a0 	bl	80048b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004778:	f000 fbde 	bl	8004f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800477c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800477e:	f000 f8ed 	bl	800495c <prvIsQueueEmpty>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f43f af6f 	beq.w	8004668 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800478a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800478c:	4618      	mov	r0, r3
 800478e:	3730      	adds	r7, #48	@ 0x30
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d14d      	bne.n	800485a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 ffb6 	bl	8005734 <xTaskPriorityDisinherit>
 80047c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	e043      	b.n	800485a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d119      	bne.n	800480c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6858      	ldr	r0, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	461a      	mov	r2, r3
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	f001 fd18 	bl	8006218 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d32b      	bcc.n	800485a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e026      	b.n	800485a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68d8      	ldr	r0, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	461a      	mov	r2, r3
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	f001 fcfe 	bl	8006218 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	425b      	negs	r3, r3
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d207      	bcs.n	8004848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	425b      	negs	r3, r3
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d105      	bne.n	800485a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3b01      	subs	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d303      	bcc.n	80048a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68d9      	ldr	r1, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	6838      	ldr	r0, [r7, #0]
 80048ac:	f001 fcb4 	bl	8006218 <memcpy>
	}
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048c0:	f7ff faa4 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048cc:	e011      	b.n	80048f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3324      	adds	r3, #36	@ 0x24
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fd46 	bl	800536c <xTaskRemoveFromEventList>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048e6:	f000 fe1f 	bl	8005528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dce9      	bgt.n	80048ce <prvUnlockQueue+0x16>
 80048fa:	e000      	b.n	80048fe <prvUnlockQueue+0x46>
					break;
 80048fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	22ff      	movs	r2, #255	@ 0xff
 8004902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004906:	f7ff fab1 	bl	8003e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800490a:	f7ff fa7f 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004916:	e011      	b.n	800493c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d012      	beq.n	8004946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3310      	adds	r3, #16
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fd21 	bl	800536c <xTaskRemoveFromEventList>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004930:	f000 fdfa 	bl	8005528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	3b01      	subs	r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800493c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dce9      	bgt.n	8004918 <prvUnlockQueue+0x60>
 8004944:	e000      	b.n	8004948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	22ff      	movs	r2, #255	@ 0xff
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004950:	f7ff fa8c 	bl	8003e6c <vPortExitCritical>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004964:	f7ff fa52 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e001      	b.n	800497a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800497a:	f7ff fa77 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004990:	f7ff fa3c 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499c:	429a      	cmp	r2, r3
 800499e:	d102      	bne.n	80049a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e001      	b.n	80049aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049aa:	f7ff fa5f 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 80049ae:	68fb      	ldr	r3, [r7, #12]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e014      	b.n	80049f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <vQueueAddToRegistry+0x4c>)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049d4:	490b      	ldr	r1, [pc, #44]	@ (8004a04 <vQueueAddToRegistry+0x4c>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <vQueueAddToRegistry+0x4c>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049ea:	e006      	b.n	80049fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b07      	cmp	r3, #7
 80049f6:	d9e7      	bls.n	80049c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr
 8004a04:	20001708 	.word	0x20001708

08004a08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a18:	f7ff f9f8 	bl	8003e0c <vPortEnterCritical>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a22:	b25b      	sxtb	r3, r3
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a28:	d103      	bne.n	8004a32 <vQueueWaitForMessageRestricted+0x2a>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a38:	b25b      	sxtb	r3, r3
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a3e:	d103      	bne.n	8004a48 <vQueueWaitForMessageRestricted+0x40>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a48:	f7ff fa10 	bl	8003e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3324      	adds	r3, #36	@ 0x24
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fc59 	bl	8005314 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f7ff ff28 	bl	80048b8 <prvUnlockQueue>
	}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	@ 0x38
 8004a74:	af04      	add	r7, sp, #16
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	623b      	str	r3, [r7, #32]
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <xTaskCreateStatic+0x4a>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61fb      	str	r3, [r7, #28]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004aba:	23a0      	movs	r3, #160	@ 0xa0
 8004abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ac2:	d00b      	beq.n	8004adc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	61bb      	str	r3, [r7, #24]
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004adc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01e      	beq.n	8004b22 <xTaskCreateStatic+0xb2>
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01b      	beq.n	8004b22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004afc:	2300      	movs	r3, #0
 8004afe:	9303      	str	r3, [sp, #12]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f851 	bl	8004bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b1c:	f000 f8ee 	bl	8004cfc <prvAddNewTaskToReadyList>
 8004b20:	e001      	b.n	8004b26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b26:	697b      	ldr	r3, [r7, #20]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3728      	adds	r7, #40	@ 0x28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	@ 0x30
 8004b34:	af04      	add	r7, sp, #16
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fdd5 	bl	80036f4 <pvPortMalloc>
 8004b4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00e      	beq.n	8004b70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b52:	20a0      	movs	r0, #160	@ 0xa0
 8004b54:	f7fe fdce 	bl	80036f4 <pvPortMalloc>
 8004b58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b66:	e005      	b.n	8004b74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b68:	6978      	ldr	r0, [r7, #20]
 8004b6a:	f7fe fe91 	bl	8003890 <vPortFree>
 8004b6e:	e001      	b.n	8004b74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	2300      	movs	r3, #0
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	9302      	str	r3, [sp, #8]
 8004b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8e:	9301      	str	r3, [sp, #4]
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f80f 	bl	8004bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b9e:	69f8      	ldr	r0, [r7, #28]
 8004ba0:	f000 f8ac 	bl	8004cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e002      	b.n	8004bb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	617b      	str	r3, [r7, #20]
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01f      	beq.n	8004c4c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e012      	b.n	8004c38 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	7819      	ldrb	r1, [r3, #0]
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	3334      	adds	r3, #52	@ 0x34
 8004c22:	460a      	mov	r2, r1
 8004c24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d9e9      	bls.n	8004c12 <prvInitialiseNewTask+0x56>
 8004c3e:	e000      	b.n	8004c42 <prvInitialiseNewTask+0x86>
			{
				break;
 8004c40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c4a:	e003      	b.n	8004c54 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d901      	bls.n	8004c5e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe ff48 	bl	8003b0a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe ff43 	bl	8003b0a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	f1c3 0207 	rsb	r2, r3, #7
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	334c      	adds	r3, #76	@ 0x4c
 8004cae:	224c      	movs	r2, #76	@ 0x4c
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f001 fa26 	bl	8006104 <memset>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf0 <prvInitialiseNewTask+0x134>)
 8004cbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <prvInitialiseNewTask+0x138>)
 8004cc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf8 <prvInitialiseNewTask+0x13c>)
 8004cc8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	69b8      	ldr	r0, [r7, #24]
 8004cd0:	f7fe ffac 	bl	8003c2c <pxPortInitialiseStack>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20001970 	.word	0x20001970
 8004cf4:	200019d8 	.word	0x200019d8
 8004cf8:	20001a40 	.word	0x20001a40

08004cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d04:	f7ff f882 	bl	8003e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d08:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <prvAddNewTaskToReadyList+0xb8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	4a29      	ldr	r2, [pc, #164]	@ (8004db4 <prvAddNewTaskToReadyList+0xb8>)
 8004d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d12:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <prvAddNewTaskToReadyList+0xbc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d1a:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <prvAddNewTaskToReadyList+0xbc>)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <prvAddNewTaskToReadyList+0xb8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d110      	bne.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d28:	f000 fc22 	bl	8005570 <prvInitialiseTaskLists>
 8004d2c:	e00d      	b.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d2e:	4b23      	ldr	r3, [pc, #140]	@ (8004dbc <prvAddNewTaskToReadyList+0xc0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d36:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <prvAddNewTaskToReadyList+0xbc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d802      	bhi.n	8004d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d44:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <prvAddNewTaskToReadyList+0xbc>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <prvAddNewTaskToReadyList+0xc4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <prvAddNewTaskToReadyList+0xc4>)
 8004d52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	2201      	movs	r2, #1
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <prvAddNewTaskToReadyList+0xc8>)
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <prvAddNewTaskToReadyList+0xcc>)
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fe fed0 	bl	8003b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d82:	f7ff f873 	bl	8003e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <prvAddNewTaskToReadyList+0xc0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <prvAddNewTaskToReadyList+0xbc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d207      	bcs.n	8004dac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <prvAddNewTaskToReadyList+0xd0>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20001848 	.word	0x20001848
 8004db8:	20001748 	.word	0x20001748
 8004dbc:	20001854 	.word	0x20001854
 8004dc0:	20001864 	.word	0x20001864
 8004dc4:	20001850 	.word	0x20001850
 8004dc8:	2000174c 	.word	0x2000174c
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004de2:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <vTaskDelay+0x64>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <vTaskDelay+0x32>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60bb      	str	r3, [r7, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e02:	f000 f88b 	bl	8004f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e06:	2100      	movs	r1, #0
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fd1b 	bl	8005844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e0e:	f000 f893 	bl	8004f38 <xTaskResumeAll>
 8004e12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e1a:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <vTaskDelay+0x68>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20001870 	.word	0x20001870
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	@ 0x28
 8004e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	1d39      	adds	r1, r7, #4
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb feba 	bl	8000bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	9202      	str	r2, [sp, #8]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2300      	movs	r3, #0
 8004e68:	460a      	mov	r2, r1
 8004e6a:	4924      	ldr	r1, [pc, #144]	@ (8004efc <vTaskStartScheduler+0xc0>)
 8004e6c:	4824      	ldr	r0, [pc, #144]	@ (8004f00 <vTaskStartScheduler+0xc4>)
 8004e6e:	f7ff fdff 	bl	8004a70 <xTaskCreateStatic>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a23      	ldr	r2, [pc, #140]	@ (8004f04 <vTaskStartScheduler+0xc8>)
 8004e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e78:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <vTaskStartScheduler+0xc8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e001      	b.n	8004e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d102      	bne.n	8004e96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e90:	f000 fd3e 	bl	8005910 <xTimerCreateTimerTask>
 8004e94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d11b      	bne.n	8004ed4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	613b      	str	r3, [r7, #16]
}
 8004eae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb0:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <vTaskStartScheduler+0xcc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	334c      	adds	r3, #76	@ 0x4c
 8004eb6:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <vTaskStartScheduler+0xd0>)
 8004eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004eba:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <vTaskStartScheduler+0xd4>)
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <vTaskStartScheduler+0xd8>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ec8:	4b13      	ldr	r3, [pc, #76]	@ (8004f18 <vTaskStartScheduler+0xdc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ece:	f7fe ff2b 	bl	8003d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ed2:	e00f      	b.n	8004ef4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eda:	d10b      	bne.n	8004ef4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <vTaskStartScheduler+0xb4>
}
 8004ef4:	bf00      	nop
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08006bc0 	.word	0x08006bc0
 8004f00:	08005541 	.word	0x08005541
 8004f04:	2000186c 	.word	0x2000186c
 8004f08:	20001748 	.word	0x20001748
 8004f0c:	20000010 	.word	0x20000010
 8004f10:	20001868 	.word	0x20001868
 8004f14:	20001854 	.word	0x20001854
 8004f18:	2000184c 	.word	0x2000184c

08004f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <vTaskSuspendAll+0x18>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a03      	ldr	r2, [pc, #12]	@ (8004f34 <vTaskSuspendAll+0x18>)
 8004f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20001870 	.word	0x20001870

08004f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f46:	4b42      	ldr	r3, [pc, #264]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <xTaskResumeAll+0x2e>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	603b      	str	r3, [r7, #0]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f66:	f7fe ff51 	bl	8003e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f6a:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f74:	4b36      	ldr	r3, [pc, #216]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d161      	bne.n	8005040 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f7c:	4b35      	ldr	r3, [pc, #212]	@ (8005054 <xTaskResumeAll+0x11c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05d      	beq.n	8005040 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f84:	e02e      	b.n	8004fe4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f86:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <xTaskResumeAll+0x120>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3318      	adds	r3, #24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fe20 	bl	8003bd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fe1b 	bl	8003bd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	4b2c      	ldr	r3, [pc, #176]	@ (800505c <xTaskResumeAll+0x124>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <xTaskResumeAll+0x124>)
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4a27      	ldr	r2, [pc, #156]	@ (8005060 <xTaskResumeAll+0x128>)
 8004fc2:	441a      	add	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7fe fda9 	bl	8003b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd4:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <xTaskResumeAll+0x12c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004fde:	4b22      	ldr	r3, [pc, #136]	@ (8005068 <xTaskResumeAll+0x130>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8005058 <xTaskResumeAll+0x120>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1cc      	bne.n	8004f86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ff2:	f000 fb61 	bl	80056b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <xTaskResumeAll+0x134>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005002:	f000 f845 	bl	8005090 <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800500c:	4b16      	ldr	r3, [pc, #88]	@ (8005068 <xTaskResumeAll+0x130>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3b01      	subs	r3, #1
 8005016:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f1      	bne.n	8005002 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800501e:	4b13      	ldr	r3, [pc, #76]	@ (800506c <xTaskResumeAll+0x134>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005024:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <xTaskResumeAll+0x130>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005030:	4b0f      	ldr	r3, [pc, #60]	@ (8005070 <xTaskResumeAll+0x138>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005040:	f7fe ff14 	bl	8003e6c <vPortExitCritical>

	return xAlreadyYielded;
 8005044:	68bb      	ldr	r3, [r7, #8]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20001870 	.word	0x20001870
 8005054:	20001848 	.word	0x20001848
 8005058:	20001808 	.word	0x20001808
 800505c:	20001850 	.word	0x20001850
 8005060:	2000174c 	.word	0x2000174c
 8005064:	20001748 	.word	0x20001748
 8005068:	2000185c 	.word	0x2000185c
 800506c:	20001858 	.word	0x20001858
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800507a:	4b04      	ldr	r3, [pc, #16]	@ (800508c <xTaskGetTickCount+0x18>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005080:	687b      	ldr	r3, [r7, #4]
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	2000184c 	.word	0x2000184c

08005090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509a:	4b4f      	ldr	r3, [pc, #316]	@ (80051d8 <xTaskIncrementTick+0x148>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 808f 	bne.w	80051c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050a4:	4b4d      	ldr	r3, [pc, #308]	@ (80051dc <xTaskIncrementTick+0x14c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050ac:	4a4b      	ldr	r2, [pc, #300]	@ (80051dc <xTaskIncrementTick+0x14c>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d121      	bne.n	80050fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80050b8:	4b49      	ldr	r3, [pc, #292]	@ (80051e0 <xTaskIncrementTick+0x150>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <xTaskIncrementTick+0x4a>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	603b      	str	r3, [r7, #0]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <xTaskIncrementTick+0x46>
 80050da:	4b41      	ldr	r3, [pc, #260]	@ (80051e0 <xTaskIncrementTick+0x150>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <xTaskIncrementTick+0x154>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3e      	ldr	r2, [pc, #248]	@ (80051e0 <xTaskIncrementTick+0x150>)
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4a3e      	ldr	r2, [pc, #248]	@ (80051e4 <xTaskIncrementTick+0x154>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b3e      	ldr	r3, [pc, #248]	@ (80051e8 <xTaskIncrementTick+0x158>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a3c      	ldr	r2, [pc, #240]	@ (80051e8 <xTaskIncrementTick+0x158>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f000 fade 	bl	80056b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050fc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <xTaskIncrementTick+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d348      	bcc.n	8005198 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005106:	4b36      	ldr	r3, [pc, #216]	@ (80051e0 <xTaskIncrementTick+0x150>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005110:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <xTaskIncrementTick+0x15c>)
 8005112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005116:	601a      	str	r2, [r3, #0]
					break;
 8005118:	e03e      	b.n	8005198 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <xTaskIncrementTick+0x150>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d203      	bcs.n	800513a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005132:	4a2e      	ldr	r2, [pc, #184]	@ (80051ec <xTaskIncrementTick+0x15c>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005138:	e02e      	b.n	8005198 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	3304      	adds	r3, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fd4a 	bl	8003bd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3318      	adds	r3, #24
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe fd41 	bl	8003bd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	2201      	movs	r2, #1
 800515c:	409a      	lsls	r2, r3
 800515e:	4b24      	ldr	r3, [pc, #144]	@ (80051f0 <xTaskIncrementTick+0x160>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	4a22      	ldr	r2, [pc, #136]	@ (80051f0 <xTaskIncrementTick+0x160>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a1f      	ldr	r2, [pc, #124]	@ (80051f4 <xTaskIncrementTick+0x164>)
 8005176:	441a      	add	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fccf 	bl	8003b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005188:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <xTaskIncrementTick+0x168>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	429a      	cmp	r2, r3
 8005190:	d3b9      	bcc.n	8005106 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005196:	e7b6      	b.n	8005106 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005198:	4b17      	ldr	r3, [pc, #92]	@ (80051f8 <xTaskIncrementTick+0x168>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519e:	4915      	ldr	r1, [pc, #84]	@ (80051f4 <xTaskIncrementTick+0x164>)
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d901      	bls.n	80051b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051b4:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <xTaskIncrementTick+0x16c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	e004      	b.n	80051cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <xTaskIncrementTick+0x170>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005200 <xTaskIncrementTick+0x170>)
 80051ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051cc:	697b      	ldr	r3, [r7, #20]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20001870 	.word	0x20001870
 80051dc:	2000184c 	.word	0x2000184c
 80051e0:	20001800 	.word	0x20001800
 80051e4:	20001804 	.word	0x20001804
 80051e8:	20001860 	.word	0x20001860
 80051ec:	20001868 	.word	0x20001868
 80051f0:	20001850 	.word	0x20001850
 80051f4:	2000174c 	.word	0x2000174c
 80051f8:	20001748 	.word	0x20001748
 80051fc:	2000185c 	.word	0x2000185c
 8005200:	20001858 	.word	0x20001858

08005204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <vTaskSwitchContext+0xac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005212:	4b28      	ldr	r3, [pc, #160]	@ (80052b4 <vTaskSwitchContext+0xb0>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005218:	e045      	b.n	80052a6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800521a:	4b26      	ldr	r3, [pc, #152]	@ (80052b4 <vTaskSwitchContext+0xb0>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005220:	4b25      	ldr	r3, [pc, #148]	@ (80052b8 <vTaskSwitchContext+0xb4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	fab3 f383 	clz	r3, r3
 800522c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800522e:	7afb      	ldrb	r3, [r7, #11]
 8005230:	f1c3 031f 	rsb	r3, r3, #31
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	4921      	ldr	r1, [pc, #132]	@ (80052bc <vTaskSwitchContext+0xb8>)
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <vTaskSwitchContext+0x5e>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <vTaskSwitchContext+0x5a>
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <vTaskSwitchContext+0xb8>)
 800526e:	4413      	add	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	3308      	adds	r3, #8
 8005284:	429a      	cmp	r2, r3
 8005286:	d104      	bne.n	8005292 <vTaskSwitchContext+0x8e>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <vTaskSwitchContext+0xbc>)
 800529a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800529c:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <vTaskSwitchContext+0xbc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	334c      	adds	r3, #76	@ 0x4c
 80052a2:	4a08      	ldr	r2, [pc, #32]	@ (80052c4 <vTaskSwitchContext+0xc0>)
 80052a4:	6013      	str	r3, [r2, #0]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	20001870 	.word	0x20001870
 80052b4:	2000185c 	.word	0x2000185c
 80052b8:	20001850 	.word	0x20001850
 80052bc:	2000174c 	.word	0x2000174c
 80052c0:	20001748 	.word	0x20001748
 80052c4:	20000010 	.word	0x20000010

080052c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	60fb      	str	r3, [r7, #12]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f0:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <vTaskPlaceOnEventList+0x48>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3318      	adds	r3, #24
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fe fc35 	bl	8003b68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052fe:	2101      	movs	r1, #1
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f000 fa9f 	bl	8005844 <prvAddCurrentTaskToDelayedList>
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20001748 	.word	0x20001748

08005314 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	617b      	str	r3, [r7, #20]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800533e:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <vTaskPlaceOnEventListRestricted+0x54>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3318      	adds	r3, #24
 8005344:	4619      	mov	r1, r3
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7fe fbeb 	bl	8003b22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005356:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f000 fa72 	bl	8005844 <prvAddCurrentTaskToDelayedList>
	}
 8005360:	bf00      	nop
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20001748 	.word	0x20001748

0800536c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60fb      	str	r3, [r7, #12]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3318      	adds	r3, #24
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fc1a 	bl	8003bd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a4:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <xTaskRemoveFromEventList+0xb0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11c      	bne.n	80053e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fc11 	bl	8003bd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	2201      	movs	r2, #1
 80053bc:	409a      	lsls	r2, r3
 80053be:	4b18      	ldr	r3, [pc, #96]	@ (8005420 <xTaskRemoveFromEventList+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	4a16      	ldr	r2, [pc, #88]	@ (8005420 <xTaskRemoveFromEventList+0xb4>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <xTaskRemoveFromEventList+0xb8>)
 80053d6:	441a      	add	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7fe fb9f 	bl	8003b22 <vListInsertEnd>
 80053e4:	e005      	b.n	80053f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	3318      	adds	r3, #24
 80053ea:	4619      	mov	r1, r3
 80053ec:	480e      	ldr	r0, [pc, #56]	@ (8005428 <xTaskRemoveFromEventList+0xbc>)
 80053ee:	f7fe fb98 	bl	8003b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <xTaskRemoveFromEventList+0xc0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d905      	bls.n	800540c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005404:	4b0a      	ldr	r3, [pc, #40]	@ (8005430 <xTaskRemoveFromEventList+0xc4>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e001      	b.n	8005410 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001870 	.word	0x20001870
 8005420:	20001850 	.word	0x20001850
 8005424:	2000174c 	.word	0x2000174c
 8005428:	20001808 	.word	0x20001808
 800542c:	20001748 	.word	0x20001748
 8005430:	2000185c 	.word	0x2000185c

08005434 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <vTaskInternalSetTimeOutState+0x24>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005444:	4b05      	ldr	r3, [pc, #20]	@ (800545c <vTaskInternalSetTimeOutState+0x28>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20001860 	.word	0x20001860
 800545c:	2000184c 	.word	0x2000184c

08005460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	613b      	str	r3, [r7, #16]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60fb      	str	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80054a6:	f7fe fcb1 	bl	8003e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005520 <xTaskCheckForTimeOut+0xc0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c2:	d102      	bne.n	80054ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e023      	b.n	8005512 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <xTaskCheckForTimeOut+0xc4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d007      	beq.n	80054e6 <xTaskCheckForTimeOut+0x86>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e015      	b.n	8005512 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d20b      	bcs.n	8005508 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff99 	bl	8005434 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	e004      	b.n	8005512 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005512:	f7fe fcab 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 8005516:	69fb      	ldr	r3, [r7, #28]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000184c 	.word	0x2000184c
 8005524:	20001860 	.word	0x20001860

08005528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800552c:	4b03      	ldr	r3, [pc, #12]	@ (800553c <vTaskMissedYield+0x14>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000185c 	.word	0x2000185c

08005540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005548:	f000 f852 	bl	80055f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800554c:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <prvIdleTask+0x28>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d9f9      	bls.n	8005548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <prvIdleTask+0x2c>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005564:	e7f0      	b.n	8005548 <prvIdleTask+0x8>
 8005566:	bf00      	nop
 8005568:	2000174c 	.word	0x2000174c
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	e00c      	b.n	8005596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4a12      	ldr	r2, [pc, #72]	@ (80055d0 <prvInitialiseTaskLists+0x60>)
 8005588:	4413      	add	r3, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fa9e 	bl	8003acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3301      	adds	r3, #1
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b06      	cmp	r3, #6
 800559a:	d9ef      	bls.n	800557c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800559c:	480d      	ldr	r0, [pc, #52]	@ (80055d4 <prvInitialiseTaskLists+0x64>)
 800559e:	f7fe fa95 	bl	8003acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055a2:	480d      	ldr	r0, [pc, #52]	@ (80055d8 <prvInitialiseTaskLists+0x68>)
 80055a4:	f7fe fa92 	bl	8003acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055a8:	480c      	ldr	r0, [pc, #48]	@ (80055dc <prvInitialiseTaskLists+0x6c>)
 80055aa:	f7fe fa8f 	bl	8003acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ae:	480c      	ldr	r0, [pc, #48]	@ (80055e0 <prvInitialiseTaskLists+0x70>)
 80055b0:	f7fe fa8c 	bl	8003acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055b4:	480b      	ldr	r0, [pc, #44]	@ (80055e4 <prvInitialiseTaskLists+0x74>)
 80055b6:	f7fe fa89 	bl	8003acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ba:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <prvInitialiseTaskLists+0x78>)
 80055bc:	4a05      	ldr	r2, [pc, #20]	@ (80055d4 <prvInitialiseTaskLists+0x64>)
 80055be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055c0:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <prvInitialiseTaskLists+0x7c>)
 80055c2:	4a05      	ldr	r2, [pc, #20]	@ (80055d8 <prvInitialiseTaskLists+0x68>)
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	2000174c 	.word	0x2000174c
 80055d4:	200017d8 	.word	0x200017d8
 80055d8:	200017ec 	.word	0x200017ec
 80055dc:	20001808 	.word	0x20001808
 80055e0:	2000181c 	.word	0x2000181c
 80055e4:	20001834 	.word	0x20001834
 80055e8:	20001800 	.word	0x20001800
 80055ec:	20001804 	.word	0x20001804

080055f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f6:	e019      	b.n	800562c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055f8:	f7fe fc08 	bl	8003e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fc:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <prvCheckTasksWaitingTermination+0x50>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fae5 	bl	8003bd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <prvCheckTasksWaitingTermination+0x54>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3b01      	subs	r3, #1
 8005614:	4a0b      	ldr	r2, [pc, #44]	@ (8005644 <prvCheckTasksWaitingTermination+0x54>)
 8005616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005618:	4b0b      	ldr	r3, [pc, #44]	@ (8005648 <prvCheckTasksWaitingTermination+0x58>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	4a0a      	ldr	r2, [pc, #40]	@ (8005648 <prvCheckTasksWaitingTermination+0x58>)
 8005620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005622:	f7fe fc23 	bl	8003e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f810 	bl	800564c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <prvCheckTasksWaitingTermination+0x58>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e1      	bne.n	80055f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	2000181c 	.word	0x2000181c
 8005644:	20001848 	.word	0x20001848
 8005648:	20001830 	.word	0x20001830

0800564c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	334c      	adds	r3, #76	@ 0x4c
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fd5b 	bl	8006114 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005664:	2b00      	cmp	r3, #0
 8005666:	d108      	bne.n	800567a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe f90f 	bl	8003890 <vPortFree>
				vPortFree( pxTCB );
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fe f90c 	bl	8003890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005678:	e019      	b.n	80056ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005680:	2b01      	cmp	r3, #1
 8005682:	d103      	bne.n	800568c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fe f903 	bl	8003890 <vPortFree>
	}
 800568a:	e010      	b.n	80056ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005692:	2b02      	cmp	r3, #2
 8005694:	d00b      	beq.n	80056ae <prvDeleteTCB+0x62>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60fb      	str	r3, [r7, #12]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <prvDeleteTCB+0x5e>
	}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056be:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <prvResetNextTaskUnblockTime+0x38>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056c8:	4b0a      	ldr	r3, [pc, #40]	@ (80056f4 <prvResetNextTaskUnblockTime+0x3c>)
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056d0:	e008      	b.n	80056e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d2:	4b07      	ldr	r3, [pc, #28]	@ (80056f0 <prvResetNextTaskUnblockTime+0x38>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a04      	ldr	r2, [pc, #16]	@ (80056f4 <prvResetNextTaskUnblockTime+0x3c>)
 80056e2:	6013      	str	r3, [r2, #0]
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20001800 	.word	0x20001800
 80056f4:	20001868 	.word	0x20001868

080056f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056fe:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <xTaskGetSchedulerState+0x34>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005706:	2301      	movs	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	e008      	b.n	800571e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800570c:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <xTaskGetSchedulerState+0x38>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005714:	2302      	movs	r3, #2
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	e001      	b.n	800571e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800571e:	687b      	ldr	r3, [r7, #4]
	}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20001854 	.word	0x20001854
 8005730:	20001870 	.word	0x20001870

08005734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d070      	beq.n	800582c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800574a:	4b3b      	ldr	r3, [pc, #236]	@ (8005838 <xTaskPriorityDisinherit+0x104>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	429a      	cmp	r2, r3
 8005752:	d00b      	beq.n	800576c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60fb      	str	r3, [r7, #12]
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	e7fd      	b.n	8005768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60bb      	str	r3, [r7, #8]
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005790:	1e5a      	subs	r2, r3, #1
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	429a      	cmp	r2, r3
 80057a0:	d044      	beq.n	800582c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d140      	bne.n	800582c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fa12 	bl	8003bd8 <uxListRemove>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d115      	bne.n	80057e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	491f      	ldr	r1, [pc, #124]	@ (800583c <xTaskPriorityDisinherit+0x108>)
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <xTaskPriorityDisinherit+0xb2>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	2201      	movs	r2, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	4b18      	ldr	r3, [pc, #96]	@ (8005840 <xTaskPriorityDisinherit+0x10c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	4a17      	ldr	r2, [pc, #92]	@ (8005840 <xTaskPriorityDisinherit+0x10c>)
 80057e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	f1c3 0207 	rsb	r2, r3, #7
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	2201      	movs	r2, #1
 8005800:	409a      	lsls	r2, r3
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <xTaskPriorityDisinherit+0x10c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	4a0d      	ldr	r2, [pc, #52]	@ (8005840 <xTaskPriorityDisinherit+0x10c>)
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4a08      	ldr	r2, [pc, #32]	@ (800583c <xTaskPriorityDisinherit+0x108>)
 800581a:	441a      	add	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f7fe f97d 	bl	8003b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800582c:	697b      	ldr	r3, [r7, #20]
	}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20001748 	.word	0x20001748
 800583c:	2000174c 	.word	0x2000174c
 8005840:	20001850 	.word	0x20001850

08005844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800584e:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005854:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3304      	adds	r3, #4
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f9bc 	bl	8003bd8 <uxListRemove>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	2201      	movs	r2, #1
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43da      	mvns	r2, r3
 8005874:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4013      	ands	r3, r2
 800587a:	4a20      	ldr	r2, [pc, #128]	@ (80058fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800587c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005884:	d10a      	bne.n	800589c <prvAddCurrentTaskToDelayedList+0x58>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	481a      	ldr	r0, [pc, #104]	@ (8005900 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005896:	f7fe f944 	bl	8003b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800589a:	e026      	b.n	80058ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058a4:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d209      	bcs.n	80058c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b4:	4b13      	ldr	r3, [pc, #76]	@ (8005904 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f7fe f951 	bl	8003b68 <vListInsert>
}
 80058c6:	e010      	b.n	80058ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f7fe f947 	bl	8003b68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d202      	bcs.n	80058ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6013      	str	r3, [r2, #0]
}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000184c 	.word	0x2000184c
 80058f8:	20001748 	.word	0x20001748
 80058fc:	20001850 	.word	0x20001850
 8005900:	20001834 	.word	0x20001834
 8005904:	20001804 	.word	0x20001804
 8005908:	20001800 	.word	0x20001800
 800590c:	20001868 	.word	0x20001868

08005910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800591a:	f000 fb93 	bl	8006044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800591e:	4b1d      	ldr	r3, [pc, #116]	@ (8005994 <xTimerCreateTimerTask+0x84>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d021      	beq.n	800596a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800592e:	1d3a      	adds	r2, r7, #4
 8005930:	f107 0108 	add.w	r1, r7, #8
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f7fb f95f 	bl	8000bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	9202      	str	r2, [sp, #8]
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	2302      	movs	r3, #2
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	460a      	mov	r2, r1
 8005950:	4911      	ldr	r1, [pc, #68]	@ (8005998 <xTimerCreateTimerTask+0x88>)
 8005952:	4812      	ldr	r0, [pc, #72]	@ (800599c <xTimerCreateTimerTask+0x8c>)
 8005954:	f7ff f88c 	bl	8004a70 <xTaskCreateStatic>
 8005958:	4603      	mov	r3, r0
 800595a:	4a11      	ldr	r2, [pc, #68]	@ (80059a0 <xTimerCreateTimerTask+0x90>)
 800595c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800595e:	4b10      	ldr	r3, [pc, #64]	@ (80059a0 <xTimerCreateTimerTask+0x90>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200018a4 	.word	0x200018a4
 8005998:	08006bc8 	.word	0x08006bc8
 800599c:	08005c19 	.word	0x08005c19
 80059a0:	200018a8 	.word	0x200018a8

080059a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80059b2:	2028      	movs	r0, #40	@ 0x28
 80059b4:	f7fd fe9e 	bl	80036f4 <pvPortMalloc>
 80059b8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f845 	bl	8005a66 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80059dc:	697b      	ldr	r3, [r7, #20]
	}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08a      	sub	sp, #40	@ 0x28
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80059f4:	2328      	movs	r3, #40	@ 0x28
 80059f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2b28      	cmp	r3, #40	@ 0x28
 80059fc:	d00b      	beq.n	8005a16 <xTimerCreateStatic+0x30>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	61bb      	str	r3, [r7, #24]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <xTimerCreateStatic+0x50>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	617b      	str	r3, [r7, #20]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f805 	bl	8005a66 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
	}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	617b      	str	r3, [r7, #20]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01e      	beq.n	8005ad6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005a98:	f000 fad4 	bl	8006044 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe f826 	bl	8003b0a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <xTimerGenericCommand+0x30>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	e7fd      	b.n	8005b0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b10:	4b19      	ldr	r3, [pc, #100]	@ (8005b78 <xTimerGenericCommand+0x98>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02a      	beq.n	8005b6e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	dc18      	bgt.n	8005b5c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b2a:	f7ff fde5 	bl	80056f8 <xTaskGetSchedulerState>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d109      	bne.n	8005b48 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b34:	4b10      	ldr	r3, [pc, #64]	@ (8005b78 <xTimerGenericCommand+0x98>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f107 0114 	add.w	r1, r7, #20
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b40:	f7fe fba8 	bl	8004294 <xQueueGenericSend>
 8005b44:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b46:	e012      	b.n	8005b6e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b48:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <xTimerGenericCommand+0x98>)
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	f107 0114 	add.w	r1, r7, #20
 8005b50:	2300      	movs	r3, #0
 8005b52:	2200      	movs	r2, #0
 8005b54:	f7fe fb9e 	bl	8004294 <xQueueGenericSend>
 8005b58:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b5a:	e008      	b.n	8005b6e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <xTimerGenericCommand+0x98>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	f107 0114 	add.w	r1, r7, #20
 8005b64:	2300      	movs	r3, #0
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	f7fe fc96 	bl	8004498 <xQueueGenericSendFromISR>
 8005b6c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3728      	adds	r7, #40	@ 0x28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200018a4 	.word	0x200018a4

08005b7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b23      	ldr	r3, [pc, #140]	@ (8005c14 <prvProcessExpiredTimer+0x98>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe f81f 	bl	8003bd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d023      	beq.n	8005bf0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	18d1      	adds	r1, r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	6978      	ldr	r0, [r7, #20]
 8005bb6:	f000 f8d3 	bl	8005d60 <prvInsertTimerInActiveList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d020      	beq.n	8005c02 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7ff ff88 	bl	8005ae0 <xTimerGenericCommand>
 8005bd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d114      	bne.n	8005c02 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	4798      	blx	r3
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000189c 	.word	0x2000189c

08005c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 f859 	bl	8005cdc <prvGetNextExpireTime>
 8005c2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f805 	bl	8005c40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c36:	f000 f8d5 	bl	8005de4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c3a:	bf00      	nop
 8005c3c:	e7f0      	b.n	8005c20 <prvTimerTask+0x8>
	...

08005c40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c4a:	f7ff f967 	bl	8004f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c4e:	f107 0308 	add.w	r3, r7, #8
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f864 	bl	8005d20 <prvSampleTimeNow>
 8005c58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d130      	bne.n	8005cc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <prvProcessTimerOrBlockTask+0x3c>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d806      	bhi.n	8005c7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c6e:	f7ff f963 	bl	8004f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff81 	bl	8005b7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c7a:	e024      	b.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c82:	4b13      	ldr	r3, [pc, #76]	@ (8005cd0 <prvProcessTimerOrBlockTask+0x90>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <prvProcessTimerOrBlockTask+0x50>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <prvProcessTimerOrBlockTask+0x52>
 8005c90:	2300      	movs	r3, #0
 8005c92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c94:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd4 <prvProcessTimerOrBlockTask+0x94>)
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7fe feb1 	bl	8004a08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ca6:	f7ff f947 	bl	8004f38 <xTaskResumeAll>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cb0:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <prvProcessTimerOrBlockTask+0x98>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
}
 8005cc0:	e001      	b.n	8005cc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cc2:	f7ff f939 	bl	8004f38 <xTaskResumeAll>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200018a0 	.word	0x200018a0
 8005cd4:	200018a4 	.word	0x200018a4
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8005d1c <prvGetNextExpireTime+0x40>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <prvGetNextExpireTime+0x16>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	e000      	b.n	8005cf4 <prvGetNextExpireTime+0x18>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <prvGetNextExpireTime+0x40>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e001      	b.n	8005d10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	2000189c 	.word	0x2000189c

08005d20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d28:	f7ff f9a4 	bl	8005074 <xTaskGetTickCount>
 8005d2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <prvSampleTimeNow+0x3c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d205      	bcs.n	8005d44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d38:	f000 f91e 	bl	8005f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d4a:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <prvSampleTimeNow+0x3c>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d50:	68fb      	ldr	r3, [r7, #12]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200018ac 	.word	0x200018ac

08005d60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d812      	bhi.n	8005dac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e01b      	b.n	8005dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d9a:	4b10      	ldr	r3, [pc, #64]	@ (8005ddc <prvInsertTimerInActiveList+0x7c>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fd fedf 	bl	8003b68 <vListInsert>
 8005daa:	e012      	b.n	8005dd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d206      	bcs.n	8005dc2 <prvInsertTimerInActiveList+0x62>
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d302      	bcc.n	8005dc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e007      	b.n	8005dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dc2:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <prvInsertTimerInActiveList+0x80>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fd fecb 	bl	8003b68 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	200018a0 	.word	0x200018a0
 8005de0:	2000189c 	.word	0x2000189c

08005de4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	@ 0x30
 8005de8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dea:	e0b2      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f2c0 80af 	blt.w	8005f52 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fd fee7 	bl	8003bd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ff87 	bl	8005d20 <prvSampleTimeNow>
 8005e12:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	f200 8098 	bhi.w	8005f4c <prvProcessReceivedCommands+0x168>
 8005e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e24 <prvProcessReceivedCommands+0x40>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e4d 	.word	0x08005e4d
 8005e2c:	08005e4d 	.word	0x08005e4d
 8005e30:	08005ec3 	.word	0x08005ec3
 8005e34:	08005ed7 	.word	0x08005ed7
 8005e38:	08005f23 	.word	0x08005f23
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005e4d 	.word	0x08005e4d
 8005e44:	08005ec3 	.word	0x08005ec3
 8005e48:	08005ed7 	.word	0x08005ed7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	18d1      	adds	r1, r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e6c:	f7ff ff78 	bl	8005d60 <prvInsertTimerInActiveList>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d06c      	beq.n	8005f50 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d061      	beq.n	8005f50 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	441a      	add	r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e9e:	f7ff fe1f 	bl	8005ae0 <xTimerGenericCommand>
 8005ea2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d152      	bne.n	8005f50 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61bb      	str	r3, [r7, #24]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005ed4:	e03d      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	617b      	str	r3, [r7, #20]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	18d1      	adds	r1, r2, r3
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	6a3a      	ldr	r2, [r7, #32]
 8005f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f1c:	f7ff ff20 	bl	8005d60 <prvInsertTimerInActiveList>
					break;
 8005f20:	e017      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005f30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f32:	f7fd fcad 	bl	8003890 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f36:	e00c      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005f4a:	e002      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005f4c:	bf00      	nop
 8005f4e:	e000      	b.n	8005f52 <prvProcessReceivedCommands+0x16e>
					break;
 8005f50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f52:	4b08      	ldr	r3, [pc, #32]	@ (8005f74 <prvProcessReceivedCommands+0x190>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f107 0108 	add.w	r1, r7, #8
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fb39 	bl	80045d4 <xQueueReceive>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f47f af41 	bne.w	8005dec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	3728      	adds	r7, #40	@ 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200018a4 	.word	0x200018a4

08005f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f7e:	e049      	b.n	8006014 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f80:	4b2e      	ldr	r3, [pc, #184]	@ (800603c <prvSwitchTimerLists+0xc4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800603c <prvSwitchTimerLists+0xc4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fd fe1d 	bl	8003bd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d02f      	beq.n	8006014 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d90e      	bls.n	8005fe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800603c <prvSwitchTimerLists+0xc4>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fd fdc3 	bl	8003b68 <vListInsert>
 8005fe2:	e017      	b.n	8006014 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	2100      	movs	r1, #0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff fd76 	bl	8005ae0 <xTimerGenericCommand>
 8005ff4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	603b      	str	r3, [r7, #0]
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <prvSwitchTimerLists+0xc4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1b0      	bne.n	8005f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800601e:	4b07      	ldr	r3, [pc, #28]	@ (800603c <prvSwitchTimerLists+0xc4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <prvSwitchTimerLists+0xc8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a04      	ldr	r2, [pc, #16]	@ (800603c <prvSwitchTimerLists+0xc4>)
 800602a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800602c:	4a04      	ldr	r2, [pc, #16]	@ (8006040 <prvSwitchTimerLists+0xc8>)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	2000189c 	.word	0x2000189c
 8006040:	200018a0 	.word	0x200018a0

08006044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800604a:	f7fd fedf 	bl	8003e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800604e:	4b15      	ldr	r3, [pc, #84]	@ (80060a4 <prvCheckForValidListAndQueue+0x60>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d120      	bne.n	8006098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006056:	4814      	ldr	r0, [pc, #80]	@ (80060a8 <prvCheckForValidListAndQueue+0x64>)
 8006058:	f7fd fd38 	bl	8003acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800605c:	4813      	ldr	r0, [pc, #76]	@ (80060ac <prvCheckForValidListAndQueue+0x68>)
 800605e:	f7fd fd35 	bl	8003acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006062:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <prvCheckForValidListAndQueue+0x6c>)
 8006064:	4a10      	ldr	r2, [pc, #64]	@ (80060a8 <prvCheckForValidListAndQueue+0x64>)
 8006066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006068:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <prvCheckForValidListAndQueue+0x70>)
 800606a:	4a10      	ldr	r2, [pc, #64]	@ (80060ac <prvCheckForValidListAndQueue+0x68>)
 800606c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800606e:	2300      	movs	r3, #0
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4b11      	ldr	r3, [pc, #68]	@ (80060b8 <prvCheckForValidListAndQueue+0x74>)
 8006074:	4a11      	ldr	r2, [pc, #68]	@ (80060bc <prvCheckForValidListAndQueue+0x78>)
 8006076:	210c      	movs	r1, #12
 8006078:	200a      	movs	r0, #10
 800607a:	f7fe f833 	bl	80040e4 <xQueueGenericCreateStatic>
 800607e:	4603      	mov	r3, r0
 8006080:	4a08      	ldr	r2, [pc, #32]	@ (80060a4 <prvCheckForValidListAndQueue+0x60>)
 8006082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006084:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <prvCheckForValidListAndQueue+0x60>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800608c:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <prvCheckForValidListAndQueue+0x60>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	490b      	ldr	r1, [pc, #44]	@ (80060c0 <prvCheckForValidListAndQueue+0x7c>)
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fc90 	bl	80049b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006098:	f7fd fee8 	bl	8003e6c <vPortExitCritical>
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200018a4 	.word	0x200018a4
 80060a8:	20001874 	.word	0x20001874
 80060ac:	20001888 	.word	0x20001888
 80060b0:	2000189c 	.word	0x2000189c
 80060b4:	200018a0 	.word	0x200018a0
 80060b8:	20001928 	.word	0x20001928
 80060bc:	200018b0 	.word	0x200018b0
 80060c0:	08006bd0 	.word	0x08006bd0

080060c4 <siprintf>:
 80060c4:	b40e      	push	{r1, r2, r3}
 80060c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060ca:	b500      	push	{lr}
 80060cc:	b09c      	sub	sp, #112	@ 0x70
 80060ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80060d0:	9002      	str	r0, [sp, #8]
 80060d2:	9006      	str	r0, [sp, #24]
 80060d4:	9107      	str	r1, [sp, #28]
 80060d6:	9104      	str	r1, [sp, #16]
 80060d8:	4808      	ldr	r0, [pc, #32]	@ (80060fc <siprintf+0x38>)
 80060da:	4909      	ldr	r1, [pc, #36]	@ (8006100 <siprintf+0x3c>)
 80060dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e0:	9105      	str	r1, [sp, #20]
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	a902      	add	r1, sp, #8
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f000 f9f6 	bl	80064d8 <_svfiprintf_r>
 80060ec:	2200      	movs	r2, #0
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	b01c      	add	sp, #112	@ 0x70
 80060f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f8:	b003      	add	sp, #12
 80060fa:	4770      	bx	lr
 80060fc:	20000010 	.word	0x20000010
 8006100:	ffff0208 	.word	0xffff0208

08006104 <memset>:
 8006104:	4603      	mov	r3, r0
 8006106:	4402      	add	r2, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <_reclaim_reent>:
 8006114:	4b29      	ldr	r3, [pc, #164]	@ (80061bc <_reclaim_reent+0xa8>)
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4604      	mov	r4, r0
 800611c:	4283      	cmp	r3, r0
 800611e:	d04b      	beq.n	80061b8 <_reclaim_reent+0xa4>
 8006120:	69c3      	ldr	r3, [r0, #28]
 8006122:	b1ab      	cbz	r3, 8006150 <_reclaim_reent+0x3c>
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	b16b      	cbz	r3, 8006144 <_reclaim_reent+0x30>
 8006128:	2500      	movs	r5, #0
 800612a:	69e3      	ldr	r3, [r4, #28]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	5959      	ldr	r1, [r3, r5]
 8006130:	2900      	cmp	r1, #0
 8006132:	d13b      	bne.n	80061ac <_reclaim_reent+0x98>
 8006134:	3504      	adds	r5, #4
 8006136:	2d80      	cmp	r5, #128	@ 0x80
 8006138:	d1f7      	bne.n	800612a <_reclaim_reent+0x16>
 800613a:	69e3      	ldr	r3, [r4, #28]
 800613c:	4620      	mov	r0, r4
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	f000 f878 	bl	8006234 <_free_r>
 8006144:	69e3      	ldr	r3, [r4, #28]
 8006146:	6819      	ldr	r1, [r3, #0]
 8006148:	b111      	cbz	r1, 8006150 <_reclaim_reent+0x3c>
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f872 	bl	8006234 <_free_r>
 8006150:	6961      	ldr	r1, [r4, #20]
 8006152:	b111      	cbz	r1, 800615a <_reclaim_reent+0x46>
 8006154:	4620      	mov	r0, r4
 8006156:	f000 f86d 	bl	8006234 <_free_r>
 800615a:	69e1      	ldr	r1, [r4, #28]
 800615c:	b111      	cbz	r1, 8006164 <_reclaim_reent+0x50>
 800615e:	4620      	mov	r0, r4
 8006160:	f000 f868 	bl	8006234 <_free_r>
 8006164:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006166:	b111      	cbz	r1, 800616e <_reclaim_reent+0x5a>
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f863 	bl	8006234 <_free_r>
 800616e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006170:	b111      	cbz	r1, 8006178 <_reclaim_reent+0x64>
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f85e 	bl	8006234 <_free_r>
 8006178:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800617a:	b111      	cbz	r1, 8006182 <_reclaim_reent+0x6e>
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f859 	bl	8006234 <_free_r>
 8006182:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006184:	b111      	cbz	r1, 800618c <_reclaim_reent+0x78>
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f854 	bl	8006234 <_free_r>
 800618c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800618e:	b111      	cbz	r1, 8006196 <_reclaim_reent+0x82>
 8006190:	4620      	mov	r0, r4
 8006192:	f000 f84f 	bl	8006234 <_free_r>
 8006196:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006198:	b111      	cbz	r1, 80061a0 <_reclaim_reent+0x8c>
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f84a 	bl	8006234 <_free_r>
 80061a0:	6a23      	ldr	r3, [r4, #32]
 80061a2:	b14b      	cbz	r3, 80061b8 <_reclaim_reent+0xa4>
 80061a4:	4620      	mov	r0, r4
 80061a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061aa:	4718      	bx	r3
 80061ac:	680e      	ldr	r6, [r1, #0]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 f840 	bl	8006234 <_free_r>
 80061b4:	4631      	mov	r1, r6
 80061b6:	e7bb      	b.n	8006130 <_reclaim_reent+0x1c>
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
 80061ba:	bf00      	nop
 80061bc:	20000010 	.word	0x20000010

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	@ (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000010 	.word	0x20000010

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	2600      	movs	r6, #0
 80061d0:	4d0c      	ldr	r5, [pc, #48]	@ (8006204 <__libc_init_array+0x38>)
 80061d2:	4c0d      	ldr	r4, [pc, #52]	@ (8006208 <__libc_init_array+0x3c>)
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	f000 fc78 	bl	8006ad0 <_init>
 80061e0:	2600      	movs	r6, #0
 80061e2:	4d0a      	ldr	r5, [pc, #40]	@ (800620c <__libc_init_array+0x40>)
 80061e4:	4c0a      	ldr	r4, [pc, #40]	@ (8006210 <__libc_init_array+0x44>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08006d44 	.word	0x08006d44
 8006208:	08006d44 	.word	0x08006d44
 800620c:	08006d44 	.word	0x08006d44
 8006210:	08006d48 	.word	0x08006d48

08006214 <__retarget_lock_acquire_recursive>:
 8006214:	4770      	bx	lr

08006216 <__retarget_lock_release_recursive>:
 8006216:	4770      	bx	lr

08006218 <memcpy>:
 8006218:	440a      	add	r2, r1
 800621a:	4291      	cmp	r1, r2
 800621c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006220:	d100      	bne.n	8006224 <memcpy+0xc>
 8006222:	4770      	bx	lr
 8006224:	b510      	push	{r4, lr}
 8006226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622a:	4291      	cmp	r1, r2
 800622c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006230:	d1f9      	bne.n	8006226 <memcpy+0xe>
 8006232:	bd10      	pop	{r4, pc}

08006234 <_free_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4605      	mov	r5, r0
 8006238:	2900      	cmp	r1, #0
 800623a:	d040      	beq.n	80062be <_free_r+0x8a>
 800623c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006240:	1f0c      	subs	r4, r1, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bfb8      	it	lt
 8006246:	18e4      	addlt	r4, r4, r3
 8006248:	f000 f8de 	bl	8006408 <__malloc_lock>
 800624c:	4a1c      	ldr	r2, [pc, #112]	@ (80062c0 <_free_r+0x8c>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	b933      	cbnz	r3, 8006260 <_free_r+0x2c>
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	4628      	mov	r0, r5
 8006258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800625c:	f000 b8da 	b.w	8006414 <__malloc_unlock>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d908      	bls.n	8006276 <_free_r+0x42>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	1821      	adds	r1, r4, r0
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1809      	addeq	r1, r1, r0
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	e7ed      	b.n	8006252 <_free_r+0x1e>
 8006276:	461a      	mov	r2, r3
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b10b      	cbz	r3, 8006280 <_free_r+0x4c>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d9fa      	bls.n	8006276 <_free_r+0x42>
 8006280:	6811      	ldr	r1, [r2, #0]
 8006282:	1850      	adds	r0, r2, r1
 8006284:	42a0      	cmp	r0, r4
 8006286:	d10b      	bne.n	80062a0 <_free_r+0x6c>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	4401      	add	r1, r0
 800628c:	1850      	adds	r0, r2, r1
 800628e:	4283      	cmp	r3, r0
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	d1e0      	bne.n	8006256 <_free_r+0x22>
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4408      	add	r0, r1
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	6053      	str	r3, [r2, #4]
 800629e:	e7da      	b.n	8006256 <_free_r+0x22>
 80062a0:	d902      	bls.n	80062a8 <_free_r+0x74>
 80062a2:	230c      	movs	r3, #12
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	e7d6      	b.n	8006256 <_free_r+0x22>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	1821      	adds	r1, r4, r0
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1809      	addeq	r1, r1, r0
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6054      	str	r4, [r2, #4]
 80062bc:	e7cb      	b.n	8006256 <_free_r+0x22>
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20001ab4 	.word	0x20001ab4

080062c4 <sbrk_aligned>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006304 <sbrk_aligned+0x40>)
 80062c8:	460c      	mov	r4, r1
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	4605      	mov	r5, r0
 80062ce:	b911      	cbnz	r1, 80062d6 <sbrk_aligned+0x12>
 80062d0:	f000 fbaa 	bl	8006a28 <_sbrk_r>
 80062d4:	6030      	str	r0, [r6, #0]
 80062d6:	4621      	mov	r1, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 fba5 	bl	8006a28 <_sbrk_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d103      	bne.n	80062ea <sbrk_aligned+0x26>
 80062e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80062e6:	4620      	mov	r0, r4
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	1cc4      	adds	r4, r0, #3
 80062ec:	f024 0403 	bic.w	r4, r4, #3
 80062f0:	42a0      	cmp	r0, r4
 80062f2:	d0f8      	beq.n	80062e6 <sbrk_aligned+0x22>
 80062f4:	1a21      	subs	r1, r4, r0
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 fb96 	bl	8006a28 <_sbrk_r>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d1f2      	bne.n	80062e6 <sbrk_aligned+0x22>
 8006300:	e7ef      	b.n	80062e2 <sbrk_aligned+0x1e>
 8006302:	bf00      	nop
 8006304:	20001ab0 	.word	0x20001ab0

08006308 <_malloc_r>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	1ccd      	adds	r5, r1, #3
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	2d00      	cmp	r5, #0
 800631c:	4606      	mov	r6, r0
 800631e:	db01      	blt.n	8006324 <_malloc_r+0x1c>
 8006320:	42a9      	cmp	r1, r5
 8006322:	d904      	bls.n	800632e <_malloc_r+0x26>
 8006324:	230c      	movs	r3, #12
 8006326:	6033      	str	r3, [r6, #0]
 8006328:	2000      	movs	r0, #0
 800632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006404 <_malloc_r+0xfc>
 8006332:	f000 f869 	bl	8006408 <__malloc_lock>
 8006336:	f8d8 3000 	ldr.w	r3, [r8]
 800633a:	461c      	mov	r4, r3
 800633c:	bb44      	cbnz	r4, 8006390 <_malloc_r+0x88>
 800633e:	4629      	mov	r1, r5
 8006340:	4630      	mov	r0, r6
 8006342:	f7ff ffbf 	bl	80062c4 <sbrk_aligned>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	4604      	mov	r4, r0
 800634a:	d158      	bne.n	80063fe <_malloc_r+0xf6>
 800634c:	f8d8 4000 	ldr.w	r4, [r8]
 8006350:	4627      	mov	r7, r4
 8006352:	2f00      	cmp	r7, #0
 8006354:	d143      	bne.n	80063de <_malloc_r+0xd6>
 8006356:	2c00      	cmp	r4, #0
 8006358:	d04b      	beq.n	80063f2 <_malloc_r+0xea>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	4639      	mov	r1, r7
 800635e:	4630      	mov	r0, r6
 8006360:	eb04 0903 	add.w	r9, r4, r3
 8006364:	f000 fb60 	bl	8006a28 <_sbrk_r>
 8006368:	4581      	cmp	r9, r0
 800636a:	d142      	bne.n	80063f2 <_malloc_r+0xea>
 800636c:	6821      	ldr	r1, [r4, #0]
 800636e:	4630      	mov	r0, r6
 8006370:	1a6d      	subs	r5, r5, r1
 8006372:	4629      	mov	r1, r5
 8006374:	f7ff ffa6 	bl	80062c4 <sbrk_aligned>
 8006378:	3001      	adds	r0, #1
 800637a:	d03a      	beq.n	80063f2 <_malloc_r+0xea>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	442b      	add	r3, r5
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	f8d8 3000 	ldr.w	r3, [r8]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	bb62      	cbnz	r2, 80063e4 <_malloc_r+0xdc>
 800638a:	f8c8 7000 	str.w	r7, [r8]
 800638e:	e00f      	b.n	80063b0 <_malloc_r+0xa8>
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	1b52      	subs	r2, r2, r5
 8006394:	d420      	bmi.n	80063d8 <_malloc_r+0xd0>
 8006396:	2a0b      	cmp	r2, #11
 8006398:	d917      	bls.n	80063ca <_malloc_r+0xc2>
 800639a:	1961      	adds	r1, r4, r5
 800639c:	42a3      	cmp	r3, r4
 800639e:	6025      	str	r5, [r4, #0]
 80063a0:	bf18      	it	ne
 80063a2:	6059      	strne	r1, [r3, #4]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	bf08      	it	eq
 80063a8:	f8c8 1000 	streq.w	r1, [r8]
 80063ac:	5162      	str	r2, [r4, r5]
 80063ae:	604b      	str	r3, [r1, #4]
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f82f 	bl	8006414 <__malloc_unlock>
 80063b6:	f104 000b 	add.w	r0, r4, #11
 80063ba:	1d23      	adds	r3, r4, #4
 80063bc:	f020 0007 	bic.w	r0, r0, #7
 80063c0:	1ac2      	subs	r2, r0, r3
 80063c2:	bf1c      	itt	ne
 80063c4:	1a1b      	subne	r3, r3, r0
 80063c6:	50a3      	strne	r3, [r4, r2]
 80063c8:	e7af      	b.n	800632a <_malloc_r+0x22>
 80063ca:	6862      	ldr	r2, [r4, #4]
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	bf0c      	ite	eq
 80063d0:	f8c8 2000 	streq.w	r2, [r8]
 80063d4:	605a      	strne	r2, [r3, #4]
 80063d6:	e7eb      	b.n	80063b0 <_malloc_r+0xa8>
 80063d8:	4623      	mov	r3, r4
 80063da:	6864      	ldr	r4, [r4, #4]
 80063dc:	e7ae      	b.n	800633c <_malloc_r+0x34>
 80063de:	463c      	mov	r4, r7
 80063e0:	687f      	ldr	r7, [r7, #4]
 80063e2:	e7b6      	b.n	8006352 <_malloc_r+0x4a>
 80063e4:	461a      	mov	r2, r3
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d1fb      	bne.n	80063e4 <_malloc_r+0xdc>
 80063ec:	2300      	movs	r3, #0
 80063ee:	6053      	str	r3, [r2, #4]
 80063f0:	e7de      	b.n	80063b0 <_malloc_r+0xa8>
 80063f2:	230c      	movs	r3, #12
 80063f4:	4630      	mov	r0, r6
 80063f6:	6033      	str	r3, [r6, #0]
 80063f8:	f000 f80c 	bl	8006414 <__malloc_unlock>
 80063fc:	e794      	b.n	8006328 <_malloc_r+0x20>
 80063fe:	6005      	str	r5, [r0, #0]
 8006400:	e7d6      	b.n	80063b0 <_malloc_r+0xa8>
 8006402:	bf00      	nop
 8006404:	20001ab4 	.word	0x20001ab4

08006408 <__malloc_lock>:
 8006408:	4801      	ldr	r0, [pc, #4]	@ (8006410 <__malloc_lock+0x8>)
 800640a:	f7ff bf03 	b.w	8006214 <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	20001aac 	.word	0x20001aac

08006414 <__malloc_unlock>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__malloc_unlock+0x8>)
 8006416:	f7ff befe 	b.w	8006216 <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	20001aac 	.word	0x20001aac

08006420 <__ssputs_r>:
 8006420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006424:	461f      	mov	r7, r3
 8006426:	688e      	ldr	r6, [r1, #8]
 8006428:	4682      	mov	sl, r0
 800642a:	42be      	cmp	r6, r7
 800642c:	460c      	mov	r4, r1
 800642e:	4690      	mov	r8, r2
 8006430:	680b      	ldr	r3, [r1, #0]
 8006432:	d82d      	bhi.n	8006490 <__ssputs_r+0x70>
 8006434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006438:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800643c:	d026      	beq.n	800648c <__ssputs_r+0x6c>
 800643e:	6965      	ldr	r5, [r4, #20]
 8006440:	6909      	ldr	r1, [r1, #16]
 8006442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006446:	eba3 0901 	sub.w	r9, r3, r1
 800644a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800644e:	1c7b      	adds	r3, r7, #1
 8006450:	444b      	add	r3, r9
 8006452:	106d      	asrs	r5, r5, #1
 8006454:	429d      	cmp	r5, r3
 8006456:	bf38      	it	cc
 8006458:	461d      	movcc	r5, r3
 800645a:	0553      	lsls	r3, r2, #21
 800645c:	d527      	bpl.n	80064ae <__ssputs_r+0x8e>
 800645e:	4629      	mov	r1, r5
 8006460:	f7ff ff52 	bl	8006308 <_malloc_r>
 8006464:	4606      	mov	r6, r0
 8006466:	b360      	cbz	r0, 80064c2 <__ssputs_r+0xa2>
 8006468:	464a      	mov	r2, r9
 800646a:	6921      	ldr	r1, [r4, #16]
 800646c:	f7ff fed4 	bl	8006218 <memcpy>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	6126      	str	r6, [r4, #16]
 800647e:	444e      	add	r6, r9
 8006480:	6026      	str	r6, [r4, #0]
 8006482:	463e      	mov	r6, r7
 8006484:	6165      	str	r5, [r4, #20]
 8006486:	eba5 0509 	sub.w	r5, r5, r9
 800648a:	60a5      	str	r5, [r4, #8]
 800648c:	42be      	cmp	r6, r7
 800648e:	d900      	bls.n	8006492 <__ssputs_r+0x72>
 8006490:	463e      	mov	r6, r7
 8006492:	4632      	mov	r2, r6
 8006494:	4641      	mov	r1, r8
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	f000 faac 	bl	80069f4 <memmove>
 800649c:	2000      	movs	r0, #0
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	1b9b      	subs	r3, r3, r6
 80064a2:	60a3      	str	r3, [r4, #8]
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	4433      	add	r3, r6
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ae:	462a      	mov	r2, r5
 80064b0:	f000 fad8 	bl	8006a64 <_realloc_r>
 80064b4:	4606      	mov	r6, r0
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d1e0      	bne.n	800647c <__ssputs_r+0x5c>
 80064ba:	4650      	mov	r0, sl
 80064bc:	6921      	ldr	r1, [r4, #16]
 80064be:	f7ff feb9 	bl	8006234 <_free_r>
 80064c2:	230c      	movs	r3, #12
 80064c4:	f8ca 3000 	str.w	r3, [sl]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	e7e9      	b.n	80064aa <__ssputs_r+0x8a>
	...

080064d8 <_svfiprintf_r>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	4698      	mov	r8, r3
 80064de:	898b      	ldrh	r3, [r1, #12]
 80064e0:	4607      	mov	r7, r0
 80064e2:	061b      	lsls	r3, r3, #24
 80064e4:	460d      	mov	r5, r1
 80064e6:	4614      	mov	r4, r2
 80064e8:	b09d      	sub	sp, #116	@ 0x74
 80064ea:	d510      	bpl.n	800650e <_svfiprintf_r+0x36>
 80064ec:	690b      	ldr	r3, [r1, #16]
 80064ee:	b973      	cbnz	r3, 800650e <_svfiprintf_r+0x36>
 80064f0:	2140      	movs	r1, #64	@ 0x40
 80064f2:	f7ff ff09 	bl	8006308 <_malloc_r>
 80064f6:	6028      	str	r0, [r5, #0]
 80064f8:	6128      	str	r0, [r5, #16]
 80064fa:	b930      	cbnz	r0, 800650a <_svfiprintf_r+0x32>
 80064fc:	230c      	movs	r3, #12
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006504:	b01d      	add	sp, #116	@ 0x74
 8006506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650a:	2340      	movs	r3, #64	@ 0x40
 800650c:	616b      	str	r3, [r5, #20]
 800650e:	2300      	movs	r3, #0
 8006510:	9309      	str	r3, [sp, #36]	@ 0x24
 8006512:	2320      	movs	r3, #32
 8006514:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006518:	2330      	movs	r3, #48	@ 0x30
 800651a:	f04f 0901 	mov.w	r9, #1
 800651e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006522:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80066bc <_svfiprintf_r+0x1e4>
 8006526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800652a:	4623      	mov	r3, r4
 800652c:	469a      	mov	sl, r3
 800652e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006532:	b10a      	cbz	r2, 8006538 <_svfiprintf_r+0x60>
 8006534:	2a25      	cmp	r2, #37	@ 0x25
 8006536:	d1f9      	bne.n	800652c <_svfiprintf_r+0x54>
 8006538:	ebba 0b04 	subs.w	fp, sl, r4
 800653c:	d00b      	beq.n	8006556 <_svfiprintf_r+0x7e>
 800653e:	465b      	mov	r3, fp
 8006540:	4622      	mov	r2, r4
 8006542:	4629      	mov	r1, r5
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff ff6b 	bl	8006420 <__ssputs_r>
 800654a:	3001      	adds	r0, #1
 800654c:	f000 80a7 	beq.w	800669e <_svfiprintf_r+0x1c6>
 8006550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006552:	445a      	add	r2, fp
 8006554:	9209      	str	r2, [sp, #36]	@ 0x24
 8006556:	f89a 3000 	ldrb.w	r3, [sl]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 809f 	beq.w	800669e <_svfiprintf_r+0x1c6>
 8006560:	2300      	movs	r3, #0
 8006562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656a:	f10a 0a01 	add.w	sl, sl, #1
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006576:	931a      	str	r3, [sp, #104]	@ 0x68
 8006578:	4654      	mov	r4, sl
 800657a:	2205      	movs	r2, #5
 800657c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006580:	484e      	ldr	r0, [pc, #312]	@ (80066bc <_svfiprintf_r+0x1e4>)
 8006582:	f000 fa61 	bl	8006a48 <memchr>
 8006586:	9a04      	ldr	r2, [sp, #16]
 8006588:	b9d8      	cbnz	r0, 80065c2 <_svfiprintf_r+0xea>
 800658a:	06d0      	lsls	r0, r2, #27
 800658c:	bf44      	itt	mi
 800658e:	2320      	movmi	r3, #32
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006594:	0711      	lsls	r1, r2, #28
 8006596:	bf44      	itt	mi
 8006598:	232b      	movmi	r3, #43	@ 0x2b
 800659a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800659e:	f89a 3000 	ldrb.w	r3, [sl]
 80065a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a4:	d015      	beq.n	80065d2 <_svfiprintf_r+0xfa>
 80065a6:	4654      	mov	r4, sl
 80065a8:	2000      	movs	r0, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	9a07      	ldr	r2, [sp, #28]
 80065b0:	4621      	mov	r1, r4
 80065b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b6:	3b30      	subs	r3, #48	@ 0x30
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d94b      	bls.n	8006654 <_svfiprintf_r+0x17c>
 80065bc:	b1b0      	cbz	r0, 80065ec <_svfiprintf_r+0x114>
 80065be:	9207      	str	r2, [sp, #28]
 80065c0:	e014      	b.n	80065ec <_svfiprintf_r+0x114>
 80065c2:	eba0 0308 	sub.w	r3, r0, r8
 80065c6:	fa09 f303 	lsl.w	r3, r9, r3
 80065ca:	4313      	orrs	r3, r2
 80065cc:	46a2      	mov	sl, r4
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	e7d2      	b.n	8006578 <_svfiprintf_r+0xa0>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	1d19      	adds	r1, r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfbb      	ittet	lt
 80065de:	425b      	neglt	r3, r3
 80065e0:	f042 0202 	orrlt.w	r2, r2, #2
 80065e4:	9307      	strge	r3, [sp, #28]
 80065e6:	9307      	strlt	r3, [sp, #28]
 80065e8:	bfb8      	it	lt
 80065ea:	9204      	strlt	r2, [sp, #16]
 80065ec:	7823      	ldrb	r3, [r4, #0]
 80065ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f0:	d10a      	bne.n	8006608 <_svfiprintf_r+0x130>
 80065f2:	7863      	ldrb	r3, [r4, #1]
 80065f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f6:	d132      	bne.n	800665e <_svfiprintf_r+0x186>
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	3402      	adds	r4, #2
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9203      	str	r2, [sp, #12]
 8006602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80066c0 <_svfiprintf_r+0x1e8>
 800660c:	2203      	movs	r2, #3
 800660e:	4650      	mov	r0, sl
 8006610:	7821      	ldrb	r1, [r4, #0]
 8006612:	f000 fa19 	bl	8006a48 <memchr>
 8006616:	b138      	cbz	r0, 8006628 <_svfiprintf_r+0x150>
 8006618:	2240      	movs	r2, #64	@ 0x40
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	4082      	lsls	r2, r0
 8006622:	4313      	orrs	r3, r2
 8006624:	3401      	adds	r4, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662c:	2206      	movs	r2, #6
 800662e:	4825      	ldr	r0, [pc, #148]	@ (80066c4 <_svfiprintf_r+0x1ec>)
 8006630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006634:	f000 fa08 	bl	8006a48 <memchr>
 8006638:	2800      	cmp	r0, #0
 800663a:	d036      	beq.n	80066aa <_svfiprintf_r+0x1d2>
 800663c:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <_svfiprintf_r+0x1f0>)
 800663e:	bb1b      	cbnz	r3, 8006688 <_svfiprintf_r+0x1b0>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	3307      	adds	r3, #7
 8006644:	f023 0307 	bic.w	r3, r3, #7
 8006648:	3308      	adds	r3, #8
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	4433      	add	r3, r6
 8006650:	9309      	str	r3, [sp, #36]	@ 0x24
 8006652:	e76a      	b.n	800652a <_svfiprintf_r+0x52>
 8006654:	460c      	mov	r4, r1
 8006656:	2001      	movs	r0, #1
 8006658:	fb0c 3202 	mla	r2, ip, r2, r3
 800665c:	e7a8      	b.n	80065b0 <_svfiprintf_r+0xd8>
 800665e:	2300      	movs	r3, #0
 8006660:	f04f 0c0a 	mov.w	ip, #10
 8006664:	4619      	mov	r1, r3
 8006666:	3401      	adds	r4, #1
 8006668:	9305      	str	r3, [sp, #20]
 800666a:	4620      	mov	r0, r4
 800666c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006670:	3a30      	subs	r2, #48	@ 0x30
 8006672:	2a09      	cmp	r2, #9
 8006674:	d903      	bls.n	800667e <_svfiprintf_r+0x1a6>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0c6      	beq.n	8006608 <_svfiprintf_r+0x130>
 800667a:	9105      	str	r1, [sp, #20]
 800667c:	e7c4      	b.n	8006608 <_svfiprintf_r+0x130>
 800667e:	4604      	mov	r4, r0
 8006680:	2301      	movs	r3, #1
 8006682:	fb0c 2101 	mla	r1, ip, r1, r2
 8006686:	e7f0      	b.n	800666a <_svfiprintf_r+0x192>
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	462a      	mov	r2, r5
 800668e:	4638      	mov	r0, r7
 8006690:	4b0e      	ldr	r3, [pc, #56]	@ (80066cc <_svfiprintf_r+0x1f4>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	f3af 8000 	nop.w
 8006698:	1c42      	adds	r2, r0, #1
 800669a:	4606      	mov	r6, r0
 800669c:	d1d6      	bne.n	800664c <_svfiprintf_r+0x174>
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	065b      	lsls	r3, r3, #25
 80066a2:	f53f af2d 	bmi.w	8006500 <_svfiprintf_r+0x28>
 80066a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066a8:	e72c      	b.n	8006504 <_svfiprintf_r+0x2c>
 80066aa:	ab03      	add	r3, sp, #12
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	462a      	mov	r2, r5
 80066b0:	4638      	mov	r0, r7
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <_svfiprintf_r+0x1f4>)
 80066b4:	a904      	add	r1, sp, #16
 80066b6:	f000 f87d 	bl	80067b4 <_printf_i>
 80066ba:	e7ed      	b.n	8006698 <_svfiprintf_r+0x1c0>
 80066bc:	08006d06 	.word	0x08006d06
 80066c0:	08006d0c 	.word	0x08006d0c
 80066c4:	08006d10 	.word	0x08006d10
 80066c8:	00000000 	.word	0x00000000
 80066cc:	08006421 	.word	0x08006421

080066d0 <_printf_common>:
 80066d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	4616      	mov	r6, r2
 80066d6:	4698      	mov	r8, r3
 80066d8:	688a      	ldr	r2, [r1, #8]
 80066da:	690b      	ldr	r3, [r1, #16]
 80066dc:	4607      	mov	r7, r0
 80066de:	4293      	cmp	r3, r2
 80066e0:	bfb8      	it	lt
 80066e2:	4613      	movlt	r3, r2
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ea:	460c      	mov	r4, r1
 80066ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f0:	b10a      	cbz	r2, 80066f6 <_printf_common+0x26>
 80066f2:	3301      	adds	r3, #1
 80066f4:	6033      	str	r3, [r6, #0]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	0699      	lsls	r1, r3, #26
 80066fa:	bf42      	ittt	mi
 80066fc:	6833      	ldrmi	r3, [r6, #0]
 80066fe:	3302      	addmi	r3, #2
 8006700:	6033      	strmi	r3, [r6, #0]
 8006702:	6825      	ldr	r5, [r4, #0]
 8006704:	f015 0506 	ands.w	r5, r5, #6
 8006708:	d106      	bne.n	8006718 <_printf_common+0x48>
 800670a:	f104 0a19 	add.w	sl, r4, #25
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	6832      	ldr	r2, [r6, #0]
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	42ab      	cmp	r3, r5
 8006716:	dc2b      	bgt.n	8006770 <_printf_common+0xa0>
 8006718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	3b00      	subs	r3, #0
 8006720:	bf18      	it	ne
 8006722:	2301      	movne	r3, #1
 8006724:	0692      	lsls	r2, r2, #26
 8006726:	d430      	bmi.n	800678a <_printf_common+0xba>
 8006728:	4641      	mov	r1, r8
 800672a:	4638      	mov	r0, r7
 800672c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006730:	47c8      	blx	r9
 8006732:	3001      	adds	r0, #1
 8006734:	d023      	beq.n	800677e <_printf_common+0xae>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	6922      	ldr	r2, [r4, #16]
 800673a:	f003 0306 	and.w	r3, r3, #6
 800673e:	2b04      	cmp	r3, #4
 8006740:	bf14      	ite	ne
 8006742:	2500      	movne	r5, #0
 8006744:	6833      	ldreq	r3, [r6, #0]
 8006746:	f04f 0600 	mov.w	r6, #0
 800674a:	bf08      	it	eq
 800674c:	68e5      	ldreq	r5, [r4, #12]
 800674e:	f104 041a 	add.w	r4, r4, #26
 8006752:	bf08      	it	eq
 8006754:	1aed      	subeq	r5, r5, r3
 8006756:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800675a:	bf08      	it	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	4293      	cmp	r3, r2
 8006762:	bfc4      	itt	gt
 8006764:	1a9b      	subgt	r3, r3, r2
 8006766:	18ed      	addgt	r5, r5, r3
 8006768:	42b5      	cmp	r5, r6
 800676a:	d11a      	bne.n	80067a2 <_printf_common+0xd2>
 800676c:	2000      	movs	r0, #0
 800676e:	e008      	b.n	8006782 <_printf_common+0xb2>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4641      	mov	r1, r8
 8006776:	4638      	mov	r0, r7
 8006778:	47c8      	blx	r9
 800677a:	3001      	adds	r0, #1
 800677c:	d103      	bne.n	8006786 <_printf_common+0xb6>
 800677e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006786:	3501      	adds	r5, #1
 8006788:	e7c1      	b.n	800670e <_printf_common+0x3e>
 800678a:	2030      	movs	r0, #48	@ 0x30
 800678c:	18e1      	adds	r1, r4, r3
 800678e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006798:	4422      	add	r2, r4
 800679a:	3302      	adds	r3, #2
 800679c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a0:	e7c2      	b.n	8006728 <_printf_common+0x58>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4622      	mov	r2, r4
 80067a6:	4641      	mov	r1, r8
 80067a8:	4638      	mov	r0, r7
 80067aa:	47c8      	blx	r9
 80067ac:	3001      	adds	r0, #1
 80067ae:	d0e6      	beq.n	800677e <_printf_common+0xae>
 80067b0:	3601      	adds	r6, #1
 80067b2:	e7d9      	b.n	8006768 <_printf_common+0x98>

080067b4 <_printf_i>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	7e0f      	ldrb	r7, [r1, #24]
 80067ba:	4691      	mov	r9, r2
 80067bc:	2f78      	cmp	r7, #120	@ 0x78
 80067be:	4680      	mov	r8, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	469a      	mov	sl, r3
 80067c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ca:	d807      	bhi.n	80067dc <_printf_i+0x28>
 80067cc:	2f62      	cmp	r7, #98	@ 0x62
 80067ce:	d80a      	bhi.n	80067e6 <_printf_i+0x32>
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	f000 80d3 	beq.w	800697c <_printf_i+0x1c8>
 80067d6:	2f58      	cmp	r7, #88	@ 0x58
 80067d8:	f000 80ba 	beq.w	8006950 <_printf_i+0x19c>
 80067dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e4:	e03a      	b.n	800685c <_printf_i+0xa8>
 80067e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ea:	2b15      	cmp	r3, #21
 80067ec:	d8f6      	bhi.n	80067dc <_printf_i+0x28>
 80067ee:	a101      	add	r1, pc, #4	@ (adr r1, 80067f4 <_printf_i+0x40>)
 80067f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	08006861 	.word	0x08006861
 80067fc:	080067dd 	.word	0x080067dd
 8006800:	080067dd 	.word	0x080067dd
 8006804:	080067dd 	.word	0x080067dd
 8006808:	080067dd 	.word	0x080067dd
 800680c:	08006861 	.word	0x08006861
 8006810:	080067dd 	.word	0x080067dd
 8006814:	080067dd 	.word	0x080067dd
 8006818:	080067dd 	.word	0x080067dd
 800681c:	080067dd 	.word	0x080067dd
 8006820:	08006963 	.word	0x08006963
 8006824:	0800688b 	.word	0x0800688b
 8006828:	0800691d 	.word	0x0800691d
 800682c:	080067dd 	.word	0x080067dd
 8006830:	080067dd 	.word	0x080067dd
 8006834:	08006985 	.word	0x08006985
 8006838:	080067dd 	.word	0x080067dd
 800683c:	0800688b 	.word	0x0800688b
 8006840:	080067dd 	.word	0x080067dd
 8006844:	080067dd 	.word	0x080067dd
 8006848:	08006925 	.word	0x08006925
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6032      	str	r2, [r6, #0]
 8006854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800685c:	2301      	movs	r3, #1
 800685e:	e09e      	b.n	800699e <_printf_i+0x1ea>
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1d19      	adds	r1, r3, #4
 8006866:	6031      	str	r1, [r6, #0]
 8006868:	0606      	lsls	r6, r0, #24
 800686a:	d501      	bpl.n	8006870 <_printf_i+0xbc>
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	e003      	b.n	8006878 <_printf_i+0xc4>
 8006870:	0645      	lsls	r5, r0, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0xb8>
 8006874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006878:	2d00      	cmp	r5, #0
 800687a:	da03      	bge.n	8006884 <_printf_i+0xd0>
 800687c:	232d      	movs	r3, #45	@ 0x2d
 800687e:	426d      	negs	r5, r5
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006884:	230a      	movs	r3, #10
 8006886:	4859      	ldr	r0, [pc, #356]	@ (80069ec <_printf_i+0x238>)
 8006888:	e011      	b.n	80068ae <_printf_i+0xfa>
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	6833      	ldr	r3, [r6, #0]
 800688e:	0608      	lsls	r0, r1, #24
 8006890:	f853 5b04 	ldr.w	r5, [r3], #4
 8006894:	d402      	bmi.n	800689c <_printf_i+0xe8>
 8006896:	0649      	lsls	r1, r1, #25
 8006898:	bf48      	it	mi
 800689a:	b2ad      	uxthmi	r5, r5
 800689c:	2f6f      	cmp	r7, #111	@ 0x6f
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	bf14      	ite	ne
 80068a2:	230a      	movne	r3, #10
 80068a4:	2308      	moveq	r3, #8
 80068a6:	4851      	ldr	r0, [pc, #324]	@ (80069ec <_printf_i+0x238>)
 80068a8:	2100      	movs	r1, #0
 80068aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ae:	6866      	ldr	r6, [r4, #4]
 80068b0:	2e00      	cmp	r6, #0
 80068b2:	bfa8      	it	ge
 80068b4:	6821      	ldrge	r1, [r4, #0]
 80068b6:	60a6      	str	r6, [r4, #8]
 80068b8:	bfa4      	itt	ge
 80068ba:	f021 0104 	bicge.w	r1, r1, #4
 80068be:	6021      	strge	r1, [r4, #0]
 80068c0:	b90d      	cbnz	r5, 80068c6 <_printf_i+0x112>
 80068c2:	2e00      	cmp	r6, #0
 80068c4:	d04b      	beq.n	800695e <_printf_i+0x1aa>
 80068c6:	4616      	mov	r6, r2
 80068c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068cc:	fb03 5711 	mls	r7, r3, r1, r5
 80068d0:	5dc7      	ldrb	r7, [r0, r7]
 80068d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068d6:	462f      	mov	r7, r5
 80068d8:	42bb      	cmp	r3, r7
 80068da:	460d      	mov	r5, r1
 80068dc:	d9f4      	bls.n	80068c8 <_printf_i+0x114>
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d10b      	bne.n	80068fa <_printf_i+0x146>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	07df      	lsls	r7, r3, #31
 80068e6:	d508      	bpl.n	80068fa <_printf_i+0x146>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	6861      	ldr	r1, [r4, #4]
 80068ec:	4299      	cmp	r1, r3
 80068ee:	bfde      	ittt	le
 80068f0:	2330      	movle	r3, #48	@ 0x30
 80068f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80068fa:	1b92      	subs	r2, r2, r6
 80068fc:	6122      	str	r2, [r4, #16]
 80068fe:	464b      	mov	r3, r9
 8006900:	4621      	mov	r1, r4
 8006902:	4640      	mov	r0, r8
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	aa03      	add	r2, sp, #12
 800690a:	f7ff fee1 	bl	80066d0 <_printf_common>
 800690e:	3001      	adds	r0, #1
 8006910:	d14a      	bne.n	80069a8 <_printf_i+0x1f4>
 8006912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006916:	b004      	add	sp, #16
 8006918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f043 0320 	orr.w	r3, r3, #32
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	2778      	movs	r7, #120	@ 0x78
 8006926:	4832      	ldr	r0, [pc, #200]	@ (80069f0 <_printf_i+0x23c>)
 8006928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	6831      	ldr	r1, [r6, #0]
 8006930:	061f      	lsls	r7, r3, #24
 8006932:	f851 5b04 	ldr.w	r5, [r1], #4
 8006936:	d402      	bmi.n	800693e <_printf_i+0x18a>
 8006938:	065f      	lsls	r7, r3, #25
 800693a:	bf48      	it	mi
 800693c:	b2ad      	uxthmi	r5, r5
 800693e:	6031      	str	r1, [r6, #0]
 8006940:	07d9      	lsls	r1, r3, #31
 8006942:	bf44      	itt	mi
 8006944:	f043 0320 	orrmi.w	r3, r3, #32
 8006948:	6023      	strmi	r3, [r4, #0]
 800694a:	b11d      	cbz	r5, 8006954 <_printf_i+0x1a0>
 800694c:	2310      	movs	r3, #16
 800694e:	e7ab      	b.n	80068a8 <_printf_i+0xf4>
 8006950:	4826      	ldr	r0, [pc, #152]	@ (80069ec <_printf_i+0x238>)
 8006952:	e7e9      	b.n	8006928 <_printf_i+0x174>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f023 0320 	bic.w	r3, r3, #32
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	e7f6      	b.n	800694c <_printf_i+0x198>
 800695e:	4616      	mov	r6, r2
 8006960:	e7bd      	b.n	80068de <_printf_i+0x12a>
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	6825      	ldr	r5, [r4, #0]
 8006966:	1d18      	adds	r0, r3, #4
 8006968:	6961      	ldr	r1, [r4, #20]
 800696a:	6030      	str	r0, [r6, #0]
 800696c:	062e      	lsls	r6, r5, #24
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	d501      	bpl.n	8006976 <_printf_i+0x1c2>
 8006972:	6019      	str	r1, [r3, #0]
 8006974:	e002      	b.n	800697c <_printf_i+0x1c8>
 8006976:	0668      	lsls	r0, r5, #25
 8006978:	d5fb      	bpl.n	8006972 <_printf_i+0x1be>
 800697a:	8019      	strh	r1, [r3, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	4616      	mov	r6, r2
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	e7bc      	b.n	80068fe <_printf_i+0x14a>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	2100      	movs	r1, #0
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	6032      	str	r2, [r6, #0]
 800698c:	681e      	ldr	r6, [r3, #0]
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f859 	bl	8006a48 <memchr>
 8006996:	b108      	cbz	r0, 800699c <_printf_i+0x1e8>
 8006998:	1b80      	subs	r0, r0, r6
 800699a:	6060      	str	r0, [r4, #4]
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	2300      	movs	r3, #0
 80069a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a6:	e7aa      	b.n	80068fe <_printf_i+0x14a>
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	47d0      	blx	sl
 80069b2:	3001      	adds	r0, #1
 80069b4:	d0ad      	beq.n	8006912 <_printf_i+0x15e>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	079b      	lsls	r3, r3, #30
 80069ba:	d413      	bmi.n	80069e4 <_printf_i+0x230>
 80069bc:	68e0      	ldr	r0, [r4, #12]
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	4298      	cmp	r0, r3
 80069c2:	bfb8      	it	lt
 80069c4:	4618      	movlt	r0, r3
 80069c6:	e7a6      	b.n	8006916 <_printf_i+0x162>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4632      	mov	r2, r6
 80069cc:	4649      	mov	r1, r9
 80069ce:	4640      	mov	r0, r8
 80069d0:	47d0      	blx	sl
 80069d2:	3001      	adds	r0, #1
 80069d4:	d09d      	beq.n	8006912 <_printf_i+0x15e>
 80069d6:	3501      	adds	r5, #1
 80069d8:	68e3      	ldr	r3, [r4, #12]
 80069da:	9903      	ldr	r1, [sp, #12]
 80069dc:	1a5b      	subs	r3, r3, r1
 80069de:	42ab      	cmp	r3, r5
 80069e0:	dcf2      	bgt.n	80069c8 <_printf_i+0x214>
 80069e2:	e7eb      	b.n	80069bc <_printf_i+0x208>
 80069e4:	2500      	movs	r5, #0
 80069e6:	f104 0619 	add.w	r6, r4, #25
 80069ea:	e7f5      	b.n	80069d8 <_printf_i+0x224>
 80069ec:	08006d17 	.word	0x08006d17
 80069f0:	08006d28 	.word	0x08006d28

080069f4 <memmove>:
 80069f4:	4288      	cmp	r0, r1
 80069f6:	b510      	push	{r4, lr}
 80069f8:	eb01 0402 	add.w	r4, r1, r2
 80069fc:	d902      	bls.n	8006a04 <memmove+0x10>
 80069fe:	4284      	cmp	r4, r0
 8006a00:	4623      	mov	r3, r4
 8006a02:	d807      	bhi.n	8006a14 <memmove+0x20>
 8006a04:	1e43      	subs	r3, r0, #1
 8006a06:	42a1      	cmp	r1, r4
 8006a08:	d008      	beq.n	8006a1c <memmove+0x28>
 8006a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a12:	e7f8      	b.n	8006a06 <memmove+0x12>
 8006a14:	4601      	mov	r1, r0
 8006a16:	4402      	add	r2, r0
 8006a18:	428a      	cmp	r2, r1
 8006a1a:	d100      	bne.n	8006a1e <memmove+0x2a>
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a26:	e7f7      	b.n	8006a18 <memmove+0x24>

08006a28 <_sbrk_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4d05      	ldr	r5, [pc, #20]	@ (8006a44 <_sbrk_r+0x1c>)
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fa fb80 	bl	8001138 <_sbrk>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_sbrk_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_sbrk_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20001aa8 	.word	0x20001aa8

08006a48 <memchr>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	b2c9      	uxtb	r1, r1
 8006a4e:	4402      	add	r2, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	d101      	bne.n	8006a5a <memchr+0x12>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e003      	b.n	8006a62 <memchr+0x1a>
 8006a5a:	7804      	ldrb	r4, [r0, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	428c      	cmp	r4, r1
 8006a60:	d1f6      	bne.n	8006a50 <memchr+0x8>
 8006a62:	bd10      	pop	{r4, pc}

08006a64 <_realloc_r>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	4680      	mov	r8, r0
 8006a6a:	4615      	mov	r5, r2
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	b921      	cbnz	r1, 8006a7a <_realloc_r+0x16>
 8006a70:	4611      	mov	r1, r2
 8006a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	f7ff bc47 	b.w	8006308 <_malloc_r>
 8006a7a:	b92a      	cbnz	r2, 8006a88 <_realloc_r+0x24>
 8006a7c:	f7ff fbda 	bl	8006234 <_free_r>
 8006a80:	2400      	movs	r4, #0
 8006a82:	4620      	mov	r0, r4
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a88:	f000 f81a 	bl	8006ac0 <_malloc_usable_size_r>
 8006a8c:	4285      	cmp	r5, r0
 8006a8e:	4606      	mov	r6, r0
 8006a90:	d802      	bhi.n	8006a98 <_realloc_r+0x34>
 8006a92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a96:	d8f4      	bhi.n	8006a82 <_realloc_r+0x1e>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	f7ff fc34 	bl	8006308 <_malloc_r>
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d0ec      	beq.n	8006a80 <_realloc_r+0x1c>
 8006aa6:	42b5      	cmp	r5, r6
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	4621      	mov	r1, r4
 8006aac:	bf28      	it	cs
 8006aae:	4632      	movcs	r2, r6
 8006ab0:	f7ff fbb2 	bl	8006218 <memcpy>
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f7ff fbbc 	bl	8006234 <_free_r>
 8006abc:	463c      	mov	r4, r7
 8006abe:	e7e0      	b.n	8006a82 <_realloc_r+0x1e>

08006ac0 <_malloc_usable_size_r>:
 8006ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac4:	1f18      	subs	r0, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfbc      	itt	lt
 8006aca:	580b      	ldrlt	r3, [r1, r0]
 8006acc:	18c0      	addlt	r0, r0, r3
 8006ace:	4770      	bx	lr

08006ad0 <_init>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr

08006adc <_fini>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	bf00      	nop
 8006ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae2:	bc08      	pop	{r3}
 8006ae4:	469e      	mov	lr, r3
 8006ae6:	4770      	bx	lr
